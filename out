// -----// IR Dump Before Inliner (inline) ('builtin.module' operation) //----- //
#loc = loc("2d9pt_naive.py":18:0)
#loc102 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":35:0)
module {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc2)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc3)
    %3 = tt.call @cdiv__i32__1cconstexpr_16_(%2) : (i32) -> i32 loc(#loc4)
    %c2_i32_0 = arith.constant 2 : i32 loc(#loc5)
    %4 = arith.muli %arg4, %c2_i32_0 : i32 loc(#loc5)
    %5 = arith.subi %arg3, %4 : i32 loc(#loc6)
    %6 = tt.call @cdiv__i32__1cconstexpr_16_(%5) : (i32) -> i32 loc(#loc7)
    %7 = arith.divsi %0, %3 : i32 loc(#loc8)
    %8 = arith.remsi %0, %3 : i32 loc(#loc9)
    %c16_i32 = arith.constant 16 : i32 loc(#loc10)
    %9 = arith.muli %7, %c16_i32 : i32 loc(#loc10)
    %10 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc11)
    %11 = tt.splat %9 : i32 -> tensor<16xi32> loc(#loc12)
    %12 = arith.addi %11, %10 : tensor<16xi32> loc(#loc12)
    %c16_i32_1 = arith.constant 16 : i32 loc(#loc13)
    %13 = arith.muli %8, %c16_i32_1 : i32 loc(#loc13)
    %14 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc14)
    %15 = tt.splat %13 : i32 -> tensor<16xi32> loc(#loc15)
    %16 = arith.addi %15, %14 : tensor<16xi32> loc(#loc15)
    %c16_i32_2 = arith.constant 16 : i32 loc(#loc16)
    %17 = arith.muli %7, %c16_i32_2 : i32 loc(#loc16)
    %18 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc17)
    %19 = tt.splat %17 : i32 -> tensor<16xi32> loc(#loc18)
    %20 = arith.addi %19, %18 : tensor<16xi32> loc(#loc18)
    %c16_i32_3 = arith.constant 16 : i32 loc(#loc19)
    %21 = arith.muli %8, %c16_i32_3 : i32 loc(#loc19)
    %22 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc20)
    %23 = tt.splat %21 : i32 -> tensor<16xi32> loc(#loc21)
    %24 = arith.addi %23, %22 : tensor<16xi32> loc(#loc21)
    %25 = tt.call @"zeros____0cconstexpr_(constexpr_16_, constexpr_16_)__1cconstexpr_fp16_"() : () -> tensor<16x16xf16> loc(#loc22)
    %26 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc23)
    %27 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc24)
    %28 = arith.muli %26, %27 : tensor<16x1xi32> loc(#loc24)
    %29 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc25)
    %30 = tt.broadcast %28 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc25)
    %31 = tt.broadcast %29 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc25)
    %32 = arith.addi %30, %31 : tensor<16x16xi32> loc(#loc25)
    %33 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc26)
    %34 = arith.addi %32, %33 : tensor<16x16xi32> loc(#loc26)
    %35 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc27)
    %36 = tt.addptr %35, %34 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc27)
    %37 = tt.load %36 : tensor<16x16x!tt.ptr<f16>> loc(#loc28)
    %38 = arith.addf %25, %37 : tensor<16x16xf16> loc(#loc29)
    %39 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc30)
    %c1_i32 = arith.constant 1 : i32 loc(#loc31)
    %cst = arith.constant dense<1> : tensor<16x1xi32> loc(#loc31)
    %40 = arith.addi %39, %cst : tensor<16x1xi32> loc(#loc31)
    %41 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc32)
    %42 = arith.muli %40, %41 : tensor<16x1xi32> loc(#loc32)
    %43 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc33)
    %44 = tt.broadcast %42 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc33)
    %45 = tt.broadcast %43 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc33)
    %46 = arith.addi %44, %45 : tensor<16x16xi32> loc(#loc33)
    %47 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc34)
    %48 = arith.addi %46, %47 : tensor<16x16xi32> loc(#loc34)
    %49 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc35)
    %50 = tt.addptr %49, %48 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc35)
    %51 = tt.load %50 : tensor<16x16x!tt.ptr<f16>> loc(#loc36)
    %52 = arith.addf %38, %51 : tensor<16x16xf16> loc(#loc37)
    %53 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc38)
    %c2_i32_4 = arith.constant 2 : i32 loc(#loc39)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32> loc(#loc39)
    %54 = arith.addi %53, %cst_5 : tensor<16x1xi32> loc(#loc39)
    %55 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc40)
    %56 = arith.muli %54, %55 : tensor<16x1xi32> loc(#loc40)
    %57 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc41)
    %58 = tt.broadcast %56 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc41)
    %59 = tt.broadcast %57 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc41)
    %60 = arith.addi %58, %59 : tensor<16x16xi32> loc(#loc41)
    %61 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc42)
    %62 = arith.addi %60, %61 : tensor<16x16xi32> loc(#loc42)
    %63 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc43)
    %64 = tt.addptr %63, %62 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc43)
    %65 = tt.load %64 : tensor<16x16x!tt.ptr<f16>> loc(#loc44)
    %66 = arith.addf %52, %65 : tensor<16x16xf16> loc(#loc45)
    %67 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc46)
    %c3_i32 = arith.constant 3 : i32 loc(#loc47)
    %cst_6 = arith.constant dense<3> : tensor<16x1xi32> loc(#loc47)
    %68 = arith.addi %67, %cst_6 : tensor<16x1xi32> loc(#loc47)
    %69 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc48)
    %70 = arith.muli %68, %69 : tensor<16x1xi32> loc(#loc48)
    %71 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc49)
    %72 = tt.broadcast %70 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc49)
    %73 = tt.broadcast %71 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc49)
    %74 = arith.addi %72, %73 : tensor<16x16xi32> loc(#loc49)
    %75 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc50)
    %76 = arith.addi %74, %75 : tensor<16x16xi32> loc(#loc50)
    %77 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc51)
    %78 = tt.addptr %77, %76 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc51)
    %79 = tt.load %78 : tensor<16x16x!tt.ptr<f16>> loc(#loc52)
    %80 = arith.addf %66, %79 : tensor<16x16xf16> loc(#loc53)
    %81 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc54)
    %c4_i32 = arith.constant 4 : i32 loc(#loc55)
    %cst_7 = arith.constant dense<4> : tensor<16x1xi32> loc(#loc55)
    %82 = arith.addi %81, %cst_7 : tensor<16x1xi32> loc(#loc55)
    %83 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc56)
    %84 = arith.muli %82, %83 : tensor<16x1xi32> loc(#loc56)
    %85 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc57)
    %86 = tt.broadcast %84 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc57)
    %87 = tt.broadcast %85 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc57)
    %88 = arith.addi %86, %87 : tensor<16x16xi32> loc(#loc57)
    %89 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc58)
    %90 = arith.addi %88, %89 : tensor<16x16xi32> loc(#loc58)
    %91 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc59)
    %92 = tt.addptr %91, %90 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc59)
    %93 = tt.load %92 : tensor<16x16x!tt.ptr<f16>> loc(#loc60)
    %94 = arith.addf %80, %93 : tensor<16x16xf16> loc(#loc61)
    %95 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc62)
    %96 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc63)
    %97 = arith.addi %95, %96 : tensor<16x1xi32> loc(#loc63)
    %98 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc64)
    %99 = arith.muli %97, %98 : tensor<16x1xi32> loc(#loc64)
    %100 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc65)
    %101 = tt.broadcast %99 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc65)
    %102 = tt.broadcast %100 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc65)
    %103 = arith.addi %101, %102 : tensor<16x16xi32> loc(#loc65)
    %c0_i32 = arith.constant 0 : i32 loc(#loc66)
    %cst_8 = arith.constant dense<0> : tensor<16x16xi32> loc(#loc66)
    %104 = arith.addi %103, %cst_8 : tensor<16x16xi32> loc(#loc66)
    %105 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc67)
    %106 = tt.addptr %105, %104 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc67)
    %107 = tt.load %106 : tensor<16x16x!tt.ptr<f16>> loc(#loc68)
    %108 = arith.addf %94, %107 : tensor<16x16xf16> loc(#loc69)
    %109 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc70)
    %110 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc71)
    %111 = arith.addi %109, %110 : tensor<16x1xi32> loc(#loc71)
    %112 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc72)
    %113 = arith.muli %111, %112 : tensor<16x1xi32> loc(#loc72)
    %114 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc73)
    %115 = tt.broadcast %113 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc73)
    %116 = tt.broadcast %114 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc73)
    %117 = arith.addi %115, %116 : tensor<16x16xi32> loc(#loc73)
    %c1_i32_9 = arith.constant 1 : i32 loc(#loc74)
    %cst_10 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc74)
    %118 = arith.addi %117, %cst_10 : tensor<16x16xi32> loc(#loc74)
    %119 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc75)
    %120 = tt.addptr %119, %118 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc75)
    %121 = tt.load %120 : tensor<16x16x!tt.ptr<f16>> loc(#loc76)
    %122 = arith.addf %108, %121 : tensor<16x16xf16> loc(#loc77)
    %123 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc78)
    %124 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc79)
    %125 = arith.addi %123, %124 : tensor<16x1xi32> loc(#loc79)
    %126 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc80)
    %127 = arith.muli %125, %126 : tensor<16x1xi32> loc(#loc80)
    %128 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc81)
    %129 = tt.broadcast %127 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc81)
    %130 = tt.broadcast %128 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc81)
    %131 = arith.addi %129, %130 : tensor<16x16xi32> loc(#loc81)
    %c3_i32_11 = arith.constant 3 : i32 loc(#loc82)
    %cst_12 = arith.constant dense<3> : tensor<16x16xi32> loc(#loc82)
    %132 = arith.addi %131, %cst_12 : tensor<16x16xi32> loc(#loc82)
    %133 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc83)
    %134 = tt.addptr %133, %132 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc83)
    %135 = tt.load %134 : tensor<16x16x!tt.ptr<f16>> loc(#loc84)
    %136 = arith.addf %122, %135 : tensor<16x16xf16> loc(#loc85)
    %137 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc86)
    %138 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc87)
    %139 = arith.addi %137, %138 : tensor<16x1xi32> loc(#loc87)
    %140 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc88)
    %141 = arith.muli %139, %140 : tensor<16x1xi32> loc(#loc88)
    %142 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc89)
    %143 = tt.broadcast %141 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc89)
    %144 = tt.broadcast %142 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc89)
    %145 = arith.addi %143, %144 : tensor<16x16xi32> loc(#loc89)
    %c4_i32_13 = arith.constant 4 : i32 loc(#loc90)
    %cst_14 = arith.constant dense<4> : tensor<16x16xi32> loc(#loc90)
    %146 = arith.addi %145, %cst_14 : tensor<16x16xi32> loc(#loc90)
    %147 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc91)
    %148 = tt.addptr %147, %146 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc91)
    %149 = tt.load %148 : tensor<16x16x!tt.ptr<f16>> loc(#loc92)
    %150 = arith.addf %136, %149 : tensor<16x16xf16> loc(#loc93)
    %151 = tt.expand_dims %12 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc94)
    %152 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc95)
    %153 = arith.addi %151, %152 : tensor<16x1xi32> loc(#loc95)
    %154 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc96)
    %155 = arith.muli %153, %154 : tensor<16x1xi32> loc(#loc96)
    %156 = tt.expand_dims %16 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc97)
    %157 = tt.broadcast %155 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc97)
    %158 = tt.broadcast %156 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc97)
    %159 = arith.addi %157, %158 : tensor<16x16xi32> loc(#loc97)
    %160 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc98)
    %161 = arith.addi %159, %160 : tensor<16x16xi32> loc(#loc98)
    %162 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc99)
    %163 = tt.addptr %162, %161 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc99)
    tt.store %163, %150 : tensor<16x16x!tt.ptr<f16>> loc(#loc100)
    tt.return loc(#loc101)
  } loc(#loc)
  tt.func private @cdiv__i32__1cconstexpr_16_(%arg0: i32 loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":35:0)) -> i32 attributes {noinline = false} {
    %c16_i32 = arith.constant 16 : i32 loc(#loc103)
    %0 = arith.addi %arg0, %c16_i32 : i32 loc(#loc103)
    %c1_i32 = arith.constant 1 : i32 loc(#loc104)
    %1 = arith.subi %0, %c1_i32 : i32 loc(#loc104)
    %c16_i32_0 = arith.constant 16 : i32 loc(#loc105)
    %2 = arith.divsi %1, %c16_i32_0 : i32 loc(#loc105)
    tt.return %2 : i32 loc(#loc106)
  } loc(#loc102)
  tt.func private @"zeros____0cconstexpr_(constexpr_16_, constexpr_16_)__1cconstexpr_fp16_"() -> tensor<16x16xf16> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f16 loc(#loc108)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<16x16xf16> loc(#loc108)
    tt.return %cst_0 : tensor<16x16xf16> loc(#loc109)
  } loc(#loc107)
} loc(#loc)
#loc1 = loc("2d9pt_naive.py":30:10)
#loc2 = loc("2d9pt_naive.py":31:28)
#loc3 = loc("2d9pt_naive.py":31:26)
#loc4 = loc("2d9pt_naive.py":31:31)
#loc5 = loc("2d9pt_naive.py":32:28)
#loc6 = loc("2d9pt_naive.py":32:26)
#loc7 = loc("2d9pt_naive.py":32:31)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:50)
#loc15 = loc("2d9pt_naive.py":40:37)
#loc16 = loc("2d9pt_naive.py":42:22)
#loc17 = loc("2d9pt_naive.py":42:50)
#loc18 = loc("2d9pt_naive.py":42:37)
#loc19 = loc("2d9pt_naive.py":43:22)
#loc20 = loc("2d9pt_naive.py":43:50)
#loc21 = loc("2d9pt_naive.py":43:37)
#loc22 = loc("2d9pt_naive.py":47:22)
#loc23 = loc("2d9pt_naive.py":50:19)
#loc24 = loc("2d9pt_naive.py":50:36)
#loc25 = loc("2d9pt_naive.py":50:40)
#loc26 = loc("2d9pt_naive.py":50:56)
#loc27 = loc("2d9pt_naive.py":50:18)
#loc28 = loc("2d9pt_naive.py":51:21)
#loc29 = loc("2d9pt_naive.py":52:22)
#loc30 = loc("2d9pt_naive.py":54:20)
#loc31 = loc("2d9pt_naive.py":54:37)
#loc32 = loc("2d9pt_naive.py":54:40)
#loc33 = loc("2d9pt_naive.py":54:44)
#loc34 = loc("2d9pt_naive.py":54:60)
#loc35 = loc("2d9pt_naive.py":54:18)
#loc36 = loc("2d9pt_naive.py":55:21)
#loc37 = loc("2d9pt_naive.py":56:22)
#loc38 = loc("2d9pt_naive.py":58:20)
#loc39 = loc("2d9pt_naive.py":58:37)
#loc40 = loc("2d9pt_naive.py":58:40)
#loc41 = loc("2d9pt_naive.py":58:44)
#loc42 = loc("2d9pt_naive.py":58:60)
#loc43 = loc("2d9pt_naive.py":58:18)
#loc44 = loc("2d9pt_naive.py":59:21)
#loc45 = loc("2d9pt_naive.py":60:22)
#loc46 = loc("2d9pt_naive.py":62:20)
#loc47 = loc("2d9pt_naive.py":62:37)
#loc48 = loc("2d9pt_naive.py":62:40)
#loc49 = loc("2d9pt_naive.py":62:44)
#loc50 = loc("2d9pt_naive.py":62:60)
#loc51 = loc("2d9pt_naive.py":62:18)
#loc52 = loc("2d9pt_naive.py":63:21)
#loc53 = loc("2d9pt_naive.py":64:22)
#loc54 = loc("2d9pt_naive.py":66:20)
#loc55 = loc("2d9pt_naive.py":66:37)
#loc56 = loc("2d9pt_naive.py":66:40)
#loc57 = loc("2d9pt_naive.py":66:44)
#loc58 = loc("2d9pt_naive.py":66:60)
#loc59 = loc("2d9pt_naive.py":66:18)
#loc60 = loc("2d9pt_naive.py":67:21)
#loc61 = loc("2d9pt_naive.py":68:22)
#loc62 = loc("2d9pt_naive.py":71:20)
#loc63 = loc("2d9pt_naive.py":71:37)
#loc64 = loc("2d9pt_naive.py":71:40)
#loc65 = loc("2d9pt_naive.py":71:44)
#loc66 = loc("2d9pt_naive.py":71:62)
#loc67 = loc("2d9pt_naive.py":71:18)
#loc68 = loc("2d9pt_naive.py":72:21)
#loc69 = loc("2d9pt_naive.py":73:22)
#loc70 = loc("2d9pt_naive.py":75:20)
#loc71 = loc("2d9pt_naive.py":75:37)
#loc72 = loc("2d9pt_naive.py":75:40)
#loc73 = loc("2d9pt_naive.py":75:44)
#loc74 = loc("2d9pt_naive.py":75:62)
#loc75 = loc("2d9pt_naive.py":75:18)
#loc76 = loc("2d9pt_naive.py":76:21)
#loc77 = loc("2d9pt_naive.py":77:22)
#loc78 = loc("2d9pt_naive.py":79:20)
#loc79 = loc("2d9pt_naive.py":79:37)
#loc80 = loc("2d9pt_naive.py":79:40)
#loc81 = loc("2d9pt_naive.py":79:44)
#loc82 = loc("2d9pt_naive.py":79:62)
#loc83 = loc("2d9pt_naive.py":79:18)
#loc84 = loc("2d9pt_naive.py":80:21)
#loc85 = loc("2d9pt_naive.py":81:22)
#loc86 = loc("2d9pt_naive.py":83:20)
#loc87 = loc("2d9pt_naive.py":83:37)
#loc88 = loc("2d9pt_naive.py":83:40)
#loc89 = loc("2d9pt_naive.py":83:44)
#loc90 = loc("2d9pt_naive.py":83:62)
#loc91 = loc("2d9pt_naive.py":83:18)
#loc92 = loc("2d9pt_naive.py":84:21)
#loc93 = loc("2d9pt_naive.py":85:22)
#loc94 = loc("2d9pt_naive.py":87:19)
#loc95 = loc("2d9pt_naive.py":87:35)
#loc96 = loc("2d9pt_naive.py":87:38)
#loc97 = loc("2d9pt_naive.py":87:42)
#loc98 = loc("2d9pt_naive.py":87:60)
#loc99 = loc("2d9pt_naive.py":87:18)
#loc100 = loc("2d9pt_naive.py":88:21)
#loc101 = loc("2d9pt_naive.py":88:4)
#loc103 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:16)
#loc104 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc105 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc106 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:11)
#loc107 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":116:0)
#loc108 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":125:31)
#loc109 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":125:11)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @cdiv__i32__1cconstexpr_16_) //----- //
#loc = loc("2d9pt_naive.py":18:0)
#loc102 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":35:0)
module {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc2)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc3)
    %3 = tt.call @cdiv__i32__1cconstexpr_16_(%2) : (i32) -> i32 loc(#loc4)
    %c2_i32_0 = arith.constant 2 : i32 loc(#loc5)
    %4 = arith.muli %arg4, %c2_i32_0 : i32 loc(#loc5)
    %5 = arith.subi %arg3, %4 : i32 loc(#loc6)
    %6 = tt.call @cdiv__i32__1cconstexpr_16_(%5) : (i32) -> i32 loc(#loc7)
    %7 = arith.divsi %0, %3 : i32 loc(#loc8)
    %8 = arith.remsi %0, %3 : i32 loc(#loc9)
    %c16_i32 = arith.constant 16 : i32 loc(#loc10)
    %9 = arith.muli %7, %c16_i32 : i32 loc(#loc10)
    %10 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc11)
    %11 = tt.splat %9 : i32 -> tensor<16xi32> loc(#loc12)
    %12 = arith.addi %11, %10 : tensor<16xi32> loc(#loc12)
    %c16_i32_1 = arith.constant 16 : i32 loc(#loc13)
    %13 = arith.muli %8, %c16_i32_1 : i32 loc(#loc13)
    %14 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc14)
    %15 = tt.splat %13 : i32 -> tensor<16xi32> loc(#loc15)
    %16 = arith.addi %15, %14 : tensor<16xi32> loc(#loc15)
    %c16_i32_2 = arith.constant 16 : i32 loc(#loc16)
    %17 = arith.muli %7, %c16_i32_2 : i32 loc(#loc16)
    %18 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc17)
    %19 = tt.splat %17 : i32 -> tensor<16xi32> loc(#loc18)
    %20 = arith.addi %19, %18 : tensor<16xi32> loc(#loc18)
    %c16_i32_3 = arith.constant 16 : i32 loc(#loc19)
    %21 = arith.muli %8, %c16_i32_3 : i32 loc(#loc19)
    %22 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc20)
    %23 = tt.splat %21 : i32 -> tensor<16xi32> loc(#loc21)
    %24 = arith.addi %23, %22 : tensor<16xi32> loc(#loc21)
    %25 = tt.call @"zeros____0cconstexpr_(constexpr_16_, constexpr_16_)__1cconstexpr_fp16_"() : () -> tensor<16x16xf16> loc(#loc22)
    %26 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc23)
    %27 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc24)
    %28 = arith.muli %26, %27 : tensor<16x1xi32> loc(#loc24)
    %29 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc25)
    %30 = tt.broadcast %28 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc25)
    %31 = tt.broadcast %29 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc25)
    %32 = arith.addi %30, %31 : tensor<16x16xi32> loc(#loc25)
    %33 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc26)
    %34 = arith.addi %32, %33 : tensor<16x16xi32> loc(#loc26)
    %35 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc27)
    %36 = tt.addptr %35, %34 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc27)
    %37 = tt.load %36 : tensor<16x16x!tt.ptr<f16>> loc(#loc28)
    %38 = arith.addf %25, %37 : tensor<16x16xf16> loc(#loc29)
    %39 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc30)
    %c1_i32 = arith.constant 1 : i32 loc(#loc31)
    %cst = arith.constant dense<1> : tensor<16x1xi32> loc(#loc31)
    %40 = arith.addi %39, %cst : tensor<16x1xi32> loc(#loc31)
    %41 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc32)
    %42 = arith.muli %40, %41 : tensor<16x1xi32> loc(#loc32)
    %43 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc33)
    %44 = tt.broadcast %42 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc33)
    %45 = tt.broadcast %43 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc33)
    %46 = arith.addi %44, %45 : tensor<16x16xi32> loc(#loc33)
    %47 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc34)
    %48 = arith.addi %46, %47 : tensor<16x16xi32> loc(#loc34)
    %49 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc35)
    %50 = tt.addptr %49, %48 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc35)
    %51 = tt.load %50 : tensor<16x16x!tt.ptr<f16>> loc(#loc36)
    %52 = arith.addf %38, %51 : tensor<16x16xf16> loc(#loc37)
    %53 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc38)
    %c2_i32_4 = arith.constant 2 : i32 loc(#loc39)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32> loc(#loc39)
    %54 = arith.addi %53, %cst_5 : tensor<16x1xi32> loc(#loc39)
    %55 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc40)
    %56 = arith.muli %54, %55 : tensor<16x1xi32> loc(#loc40)
    %57 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc41)
    %58 = tt.broadcast %56 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc41)
    %59 = tt.broadcast %57 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc41)
    %60 = arith.addi %58, %59 : tensor<16x16xi32> loc(#loc41)
    %61 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc42)
    %62 = arith.addi %60, %61 : tensor<16x16xi32> loc(#loc42)
    %63 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc43)
    %64 = tt.addptr %63, %62 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc43)
    %65 = tt.load %64 : tensor<16x16x!tt.ptr<f16>> loc(#loc44)
    %66 = arith.addf %52, %65 : tensor<16x16xf16> loc(#loc45)
    %67 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc46)
    %c3_i32 = arith.constant 3 : i32 loc(#loc47)
    %cst_6 = arith.constant dense<3> : tensor<16x1xi32> loc(#loc47)
    %68 = arith.addi %67, %cst_6 : tensor<16x1xi32> loc(#loc47)
    %69 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc48)
    %70 = arith.muli %68, %69 : tensor<16x1xi32> loc(#loc48)
    %71 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc49)
    %72 = tt.broadcast %70 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc49)
    %73 = tt.broadcast %71 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc49)
    %74 = arith.addi %72, %73 : tensor<16x16xi32> loc(#loc49)
    %75 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc50)
    %76 = arith.addi %74, %75 : tensor<16x16xi32> loc(#loc50)
    %77 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc51)
    %78 = tt.addptr %77, %76 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc51)
    %79 = tt.load %78 : tensor<16x16x!tt.ptr<f16>> loc(#loc52)
    %80 = arith.addf %66, %79 : tensor<16x16xf16> loc(#loc53)
    %81 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc54)
    %c4_i32 = arith.constant 4 : i32 loc(#loc55)
    %cst_7 = arith.constant dense<4> : tensor<16x1xi32> loc(#loc55)
    %82 = arith.addi %81, %cst_7 : tensor<16x1xi32> loc(#loc55)
    %83 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc56)
    %84 = arith.muli %82, %83 : tensor<16x1xi32> loc(#loc56)
    %85 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc57)
    %86 = tt.broadcast %84 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc57)
    %87 = tt.broadcast %85 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc57)
    %88 = arith.addi %86, %87 : tensor<16x16xi32> loc(#loc57)
    %89 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc58)
    %90 = arith.addi %88, %89 : tensor<16x16xi32> loc(#loc58)
    %91 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc59)
    %92 = tt.addptr %91, %90 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc59)
    %93 = tt.load %92 : tensor<16x16x!tt.ptr<f16>> loc(#loc60)
    %94 = arith.addf %80, %93 : tensor<16x16xf16> loc(#loc61)
    %95 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc62)
    %96 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc63)
    %97 = arith.addi %95, %96 : tensor<16x1xi32> loc(#loc63)
    %98 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc64)
    %99 = arith.muli %97, %98 : tensor<16x1xi32> loc(#loc64)
    %100 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc65)
    %101 = tt.broadcast %99 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc65)
    %102 = tt.broadcast %100 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc65)
    %103 = arith.addi %101, %102 : tensor<16x16xi32> loc(#loc65)
    %c0_i32 = arith.constant 0 : i32 loc(#loc66)
    %cst_8 = arith.constant dense<0> : tensor<16x16xi32> loc(#loc66)
    %104 = arith.addi %103, %cst_8 : tensor<16x16xi32> loc(#loc66)
    %105 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc67)
    %106 = tt.addptr %105, %104 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc67)
    %107 = tt.load %106 : tensor<16x16x!tt.ptr<f16>> loc(#loc68)
    %108 = arith.addf %94, %107 : tensor<16x16xf16> loc(#loc69)
    %109 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc70)
    %110 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc71)
    %111 = arith.addi %109, %110 : tensor<16x1xi32> loc(#loc71)
    %112 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc72)
    %113 = arith.muli %111, %112 : tensor<16x1xi32> loc(#loc72)
    %114 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc73)
    %115 = tt.broadcast %113 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc73)
    %116 = tt.broadcast %114 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc73)
    %117 = arith.addi %115, %116 : tensor<16x16xi32> loc(#loc73)
    %c1_i32_9 = arith.constant 1 : i32 loc(#loc74)
    %cst_10 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc74)
    %118 = arith.addi %117, %cst_10 : tensor<16x16xi32> loc(#loc74)
    %119 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc75)
    %120 = tt.addptr %119, %118 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc75)
    %121 = tt.load %120 : tensor<16x16x!tt.ptr<f16>> loc(#loc76)
    %122 = arith.addf %108, %121 : tensor<16x16xf16> loc(#loc77)
    %123 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc78)
    %124 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc79)
    %125 = arith.addi %123, %124 : tensor<16x1xi32> loc(#loc79)
    %126 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc80)
    %127 = arith.muli %125, %126 : tensor<16x1xi32> loc(#loc80)
    %128 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc81)
    %129 = tt.broadcast %127 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc81)
    %130 = tt.broadcast %128 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc81)
    %131 = arith.addi %129, %130 : tensor<16x16xi32> loc(#loc81)
    %c3_i32_11 = arith.constant 3 : i32 loc(#loc82)
    %cst_12 = arith.constant dense<3> : tensor<16x16xi32> loc(#loc82)
    %132 = arith.addi %131, %cst_12 : tensor<16x16xi32> loc(#loc82)
    %133 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc83)
    %134 = tt.addptr %133, %132 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc83)
    %135 = tt.load %134 : tensor<16x16x!tt.ptr<f16>> loc(#loc84)
    %136 = arith.addf %122, %135 : tensor<16x16xf16> loc(#loc85)
    %137 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc86)
    %138 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc87)
    %139 = arith.addi %137, %138 : tensor<16x1xi32> loc(#loc87)
    %140 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc88)
    %141 = arith.muli %139, %140 : tensor<16x1xi32> loc(#loc88)
    %142 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc89)
    %143 = tt.broadcast %141 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc89)
    %144 = tt.broadcast %142 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc89)
    %145 = arith.addi %143, %144 : tensor<16x16xi32> loc(#loc89)
    %c4_i32_13 = arith.constant 4 : i32 loc(#loc90)
    %cst_14 = arith.constant dense<4> : tensor<16x16xi32> loc(#loc90)
    %146 = arith.addi %145, %cst_14 : tensor<16x16xi32> loc(#loc90)
    %147 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc91)
    %148 = tt.addptr %147, %146 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc91)
    %149 = tt.load %148 : tensor<16x16x!tt.ptr<f16>> loc(#loc92)
    %150 = arith.addf %136, %149 : tensor<16x16xf16> loc(#loc93)
    %151 = tt.expand_dims %12 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc94)
    %152 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc95)
    %153 = arith.addi %151, %152 : tensor<16x1xi32> loc(#loc95)
    %154 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc96)
    %155 = arith.muli %153, %154 : tensor<16x1xi32> loc(#loc96)
    %156 = tt.expand_dims %16 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc97)
    %157 = tt.broadcast %155 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc97)
    %158 = tt.broadcast %156 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc97)
    %159 = arith.addi %157, %158 : tensor<16x16xi32> loc(#loc97)
    %160 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc98)
    %161 = arith.addi %159, %160 : tensor<16x16xi32> loc(#loc98)
    %162 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc99)
    %163 = tt.addptr %162, %161 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc99)
    tt.store %163, %150 : tensor<16x16x!tt.ptr<f16>> loc(#loc100)
    tt.return loc(#loc101)
  } loc(#loc)
  tt.func private @cdiv__i32__1cconstexpr_16_(%arg0: i32 loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":35:0)) -> i32 attributes {noinline = false} {
    %c16_i32 = arith.constant 16 : i32 loc(#loc103)
    %0 = arith.addi %arg0, %c16_i32 : i32 loc(#loc103)
    %c1_i32 = arith.constant 1 : i32 loc(#loc104)
    %1 = arith.subi %0, %c1_i32 : i32 loc(#loc104)
    %c16_i32_0 = arith.constant 16 : i32 loc(#loc105)
    %2 = arith.divsi %1, %c16_i32_0 : i32 loc(#loc105)
    tt.return %2 : i32 loc(#loc106)
  } loc(#loc102)
  tt.func private @"zeros____0cconstexpr_(constexpr_16_, constexpr_16_)__1cconstexpr_fp16_"() -> tensor<16x16xf16> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f16 loc(#loc108)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<16x16xf16> loc(#loc108)
    tt.return %cst_0 : tensor<16x16xf16> loc(#loc109)
  } loc(#loc107)
} loc(#loc)
#loc1 = loc("2d9pt_naive.py":30:10)
#loc2 = loc("2d9pt_naive.py":31:28)
#loc3 = loc("2d9pt_naive.py":31:26)
#loc4 = loc("2d9pt_naive.py":31:31)
#loc5 = loc("2d9pt_naive.py":32:28)
#loc6 = loc("2d9pt_naive.py":32:26)
#loc7 = loc("2d9pt_naive.py":32:31)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:50)
#loc15 = loc("2d9pt_naive.py":40:37)
#loc16 = loc("2d9pt_naive.py":42:22)
#loc17 = loc("2d9pt_naive.py":42:50)
#loc18 = loc("2d9pt_naive.py":42:37)
#loc19 = loc("2d9pt_naive.py":43:22)
#loc20 = loc("2d9pt_naive.py":43:50)
#loc21 = loc("2d9pt_naive.py":43:37)
#loc22 = loc("2d9pt_naive.py":47:22)
#loc23 = loc("2d9pt_naive.py":50:19)
#loc24 = loc("2d9pt_naive.py":50:36)
#loc25 = loc("2d9pt_naive.py":50:40)
#loc26 = loc("2d9pt_naive.py":50:56)
#loc27 = loc("2d9pt_naive.py":50:18)
#loc28 = loc("2d9pt_naive.py":51:21)
#loc29 = loc("2d9pt_naive.py":52:22)
#loc30 = loc("2d9pt_naive.py":54:20)
#loc31 = loc("2d9pt_naive.py":54:37)
#loc32 = loc("2d9pt_naive.py":54:40)
#loc33 = loc("2d9pt_naive.py":54:44)
#loc34 = loc("2d9pt_naive.py":54:60)
#loc35 = loc("2d9pt_naive.py":54:18)
#loc36 = loc("2d9pt_naive.py":55:21)
#loc37 = loc("2d9pt_naive.py":56:22)
#loc38 = loc("2d9pt_naive.py":58:20)
#loc39 = loc("2d9pt_naive.py":58:37)
#loc40 = loc("2d9pt_naive.py":58:40)
#loc41 = loc("2d9pt_naive.py":58:44)
#loc42 = loc("2d9pt_naive.py":58:60)
#loc43 = loc("2d9pt_naive.py":58:18)
#loc44 = loc("2d9pt_naive.py":59:21)
#loc45 = loc("2d9pt_naive.py":60:22)
#loc46 = loc("2d9pt_naive.py":62:20)
#loc47 = loc("2d9pt_naive.py":62:37)
#loc48 = loc("2d9pt_naive.py":62:40)
#loc49 = loc("2d9pt_naive.py":62:44)
#loc50 = loc("2d9pt_naive.py":62:60)
#loc51 = loc("2d9pt_naive.py":62:18)
#loc52 = loc("2d9pt_naive.py":63:21)
#loc53 = loc("2d9pt_naive.py":64:22)
#loc54 = loc("2d9pt_naive.py":66:20)
#loc55 = loc("2d9pt_naive.py":66:37)
#loc56 = loc("2d9pt_naive.py":66:40)
#loc57 = loc("2d9pt_naive.py":66:44)
#loc58 = loc("2d9pt_naive.py":66:60)
#loc59 = loc("2d9pt_naive.py":66:18)
#loc60 = loc("2d9pt_naive.py":67:21)
#loc61 = loc("2d9pt_naive.py":68:22)
#loc62 = loc("2d9pt_naive.py":71:20)
#loc63 = loc("2d9pt_naive.py":71:37)
#loc64 = loc("2d9pt_naive.py":71:40)
#loc65 = loc("2d9pt_naive.py":71:44)
#loc66 = loc("2d9pt_naive.py":71:62)
#loc67 = loc("2d9pt_naive.py":71:18)
#loc68 = loc("2d9pt_naive.py":72:21)
#loc69 = loc("2d9pt_naive.py":73:22)
#loc70 = loc("2d9pt_naive.py":75:20)
#loc71 = loc("2d9pt_naive.py":75:37)
#loc72 = loc("2d9pt_naive.py":75:40)
#loc73 = loc("2d9pt_naive.py":75:44)
#loc74 = loc("2d9pt_naive.py":75:62)
#loc75 = loc("2d9pt_naive.py":75:18)
#loc76 = loc("2d9pt_naive.py":76:21)
#loc77 = loc("2d9pt_naive.py":77:22)
#loc78 = loc("2d9pt_naive.py":79:20)
#loc79 = loc("2d9pt_naive.py":79:37)
#loc80 = loc("2d9pt_naive.py":79:40)
#loc81 = loc("2d9pt_naive.py":79:44)
#loc82 = loc("2d9pt_naive.py":79:62)
#loc83 = loc("2d9pt_naive.py":79:18)
#loc84 = loc("2d9pt_naive.py":80:21)
#loc85 = loc("2d9pt_naive.py":81:22)
#loc86 = loc("2d9pt_naive.py":83:20)
#loc87 = loc("2d9pt_naive.py":83:37)
#loc88 = loc("2d9pt_naive.py":83:40)
#loc89 = loc("2d9pt_naive.py":83:44)
#loc90 = loc("2d9pt_naive.py":83:62)
#loc91 = loc("2d9pt_naive.py":83:18)
#loc92 = loc("2d9pt_naive.py":84:21)
#loc93 = loc("2d9pt_naive.py":85:22)
#loc94 = loc("2d9pt_naive.py":87:19)
#loc95 = loc("2d9pt_naive.py":87:35)
#loc96 = loc("2d9pt_naive.py":87:38)
#loc97 = loc("2d9pt_naive.py":87:42)
#loc98 = loc("2d9pt_naive.py":87:60)
#loc99 = loc("2d9pt_naive.py":87:18)
#loc100 = loc("2d9pt_naive.py":88:21)
#loc101 = loc("2d9pt_naive.py":88:4)
#loc103 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:16)
#loc104 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc105 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc106 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:11)
#loc107 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":116:0)
#loc108 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":125:31)
#loc109 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":125:11)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @zeros____0cconstexpr_(constexpr_16_, constexpr_16_)__1cconstexpr_fp16_) //----- //
#loc = loc("2d9pt_naive.py":18:0)
#loc102 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":35:0)
module {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc2)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc3)
    %3 = tt.call @cdiv__i32__1cconstexpr_16_(%2) : (i32) -> i32 loc(#loc4)
    %c2_i32_0 = arith.constant 2 : i32 loc(#loc5)
    %4 = arith.muli %arg4, %c2_i32_0 : i32 loc(#loc5)
    %5 = arith.subi %arg3, %4 : i32 loc(#loc6)
    %6 = tt.call @cdiv__i32__1cconstexpr_16_(%5) : (i32) -> i32 loc(#loc7)
    %7 = arith.divsi %0, %3 : i32 loc(#loc8)
    %8 = arith.remsi %0, %3 : i32 loc(#loc9)
    %c16_i32 = arith.constant 16 : i32 loc(#loc10)
    %9 = arith.muli %7, %c16_i32 : i32 loc(#loc10)
    %10 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc11)
    %11 = tt.splat %9 : i32 -> tensor<16xi32> loc(#loc12)
    %12 = arith.addi %11, %10 : tensor<16xi32> loc(#loc12)
    %c16_i32_1 = arith.constant 16 : i32 loc(#loc13)
    %13 = arith.muli %8, %c16_i32_1 : i32 loc(#loc13)
    %14 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc14)
    %15 = tt.splat %13 : i32 -> tensor<16xi32> loc(#loc15)
    %16 = arith.addi %15, %14 : tensor<16xi32> loc(#loc15)
    %c16_i32_2 = arith.constant 16 : i32 loc(#loc16)
    %17 = arith.muli %7, %c16_i32_2 : i32 loc(#loc16)
    %18 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc17)
    %19 = tt.splat %17 : i32 -> tensor<16xi32> loc(#loc18)
    %20 = arith.addi %19, %18 : tensor<16xi32> loc(#loc18)
    %c16_i32_3 = arith.constant 16 : i32 loc(#loc19)
    %21 = arith.muli %8, %c16_i32_3 : i32 loc(#loc19)
    %22 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc20)
    %23 = tt.splat %21 : i32 -> tensor<16xi32> loc(#loc21)
    %24 = arith.addi %23, %22 : tensor<16xi32> loc(#loc21)
    %25 = tt.call @"zeros____0cconstexpr_(constexpr_16_, constexpr_16_)__1cconstexpr_fp16_"() : () -> tensor<16x16xf16> loc(#loc22)
    %26 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc23)
    %27 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc24)
    %28 = arith.muli %26, %27 : tensor<16x1xi32> loc(#loc24)
    %29 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc25)
    %30 = tt.broadcast %28 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc25)
    %31 = tt.broadcast %29 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc25)
    %32 = arith.addi %30, %31 : tensor<16x16xi32> loc(#loc25)
    %33 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc26)
    %34 = arith.addi %32, %33 : tensor<16x16xi32> loc(#loc26)
    %35 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc27)
    %36 = tt.addptr %35, %34 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc27)
    %37 = tt.load %36 : tensor<16x16x!tt.ptr<f16>> loc(#loc28)
    %38 = arith.addf %25, %37 : tensor<16x16xf16> loc(#loc29)
    %39 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc30)
    %c1_i32 = arith.constant 1 : i32 loc(#loc31)
    %cst = arith.constant dense<1> : tensor<16x1xi32> loc(#loc31)
    %40 = arith.addi %39, %cst : tensor<16x1xi32> loc(#loc31)
    %41 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc32)
    %42 = arith.muli %40, %41 : tensor<16x1xi32> loc(#loc32)
    %43 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc33)
    %44 = tt.broadcast %42 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc33)
    %45 = tt.broadcast %43 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc33)
    %46 = arith.addi %44, %45 : tensor<16x16xi32> loc(#loc33)
    %47 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc34)
    %48 = arith.addi %46, %47 : tensor<16x16xi32> loc(#loc34)
    %49 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc35)
    %50 = tt.addptr %49, %48 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc35)
    %51 = tt.load %50 : tensor<16x16x!tt.ptr<f16>> loc(#loc36)
    %52 = arith.addf %38, %51 : tensor<16x16xf16> loc(#loc37)
    %53 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc38)
    %c2_i32_4 = arith.constant 2 : i32 loc(#loc39)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32> loc(#loc39)
    %54 = arith.addi %53, %cst_5 : tensor<16x1xi32> loc(#loc39)
    %55 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc40)
    %56 = arith.muli %54, %55 : tensor<16x1xi32> loc(#loc40)
    %57 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc41)
    %58 = tt.broadcast %56 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc41)
    %59 = tt.broadcast %57 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc41)
    %60 = arith.addi %58, %59 : tensor<16x16xi32> loc(#loc41)
    %61 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc42)
    %62 = arith.addi %60, %61 : tensor<16x16xi32> loc(#loc42)
    %63 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc43)
    %64 = tt.addptr %63, %62 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc43)
    %65 = tt.load %64 : tensor<16x16x!tt.ptr<f16>> loc(#loc44)
    %66 = arith.addf %52, %65 : tensor<16x16xf16> loc(#loc45)
    %67 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc46)
    %c3_i32 = arith.constant 3 : i32 loc(#loc47)
    %cst_6 = arith.constant dense<3> : tensor<16x1xi32> loc(#loc47)
    %68 = arith.addi %67, %cst_6 : tensor<16x1xi32> loc(#loc47)
    %69 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc48)
    %70 = arith.muli %68, %69 : tensor<16x1xi32> loc(#loc48)
    %71 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc49)
    %72 = tt.broadcast %70 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc49)
    %73 = tt.broadcast %71 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc49)
    %74 = arith.addi %72, %73 : tensor<16x16xi32> loc(#loc49)
    %75 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc50)
    %76 = arith.addi %74, %75 : tensor<16x16xi32> loc(#loc50)
    %77 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc51)
    %78 = tt.addptr %77, %76 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc51)
    %79 = tt.load %78 : tensor<16x16x!tt.ptr<f16>> loc(#loc52)
    %80 = arith.addf %66, %79 : tensor<16x16xf16> loc(#loc53)
    %81 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc54)
    %c4_i32 = arith.constant 4 : i32 loc(#loc55)
    %cst_7 = arith.constant dense<4> : tensor<16x1xi32> loc(#loc55)
    %82 = arith.addi %81, %cst_7 : tensor<16x1xi32> loc(#loc55)
    %83 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc56)
    %84 = arith.muli %82, %83 : tensor<16x1xi32> loc(#loc56)
    %85 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc57)
    %86 = tt.broadcast %84 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc57)
    %87 = tt.broadcast %85 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc57)
    %88 = arith.addi %86, %87 : tensor<16x16xi32> loc(#loc57)
    %89 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc58)
    %90 = arith.addi %88, %89 : tensor<16x16xi32> loc(#loc58)
    %91 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc59)
    %92 = tt.addptr %91, %90 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc59)
    %93 = tt.load %92 : tensor<16x16x!tt.ptr<f16>> loc(#loc60)
    %94 = arith.addf %80, %93 : tensor<16x16xf16> loc(#loc61)
    %95 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc62)
    %96 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc63)
    %97 = arith.addi %95, %96 : tensor<16x1xi32> loc(#loc63)
    %98 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc64)
    %99 = arith.muli %97, %98 : tensor<16x1xi32> loc(#loc64)
    %100 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc65)
    %101 = tt.broadcast %99 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc65)
    %102 = tt.broadcast %100 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc65)
    %103 = arith.addi %101, %102 : tensor<16x16xi32> loc(#loc65)
    %c0_i32 = arith.constant 0 : i32 loc(#loc66)
    %cst_8 = arith.constant dense<0> : tensor<16x16xi32> loc(#loc66)
    %104 = arith.addi %103, %cst_8 : tensor<16x16xi32> loc(#loc66)
    %105 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc67)
    %106 = tt.addptr %105, %104 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc67)
    %107 = tt.load %106 : tensor<16x16x!tt.ptr<f16>> loc(#loc68)
    %108 = arith.addf %94, %107 : tensor<16x16xf16> loc(#loc69)
    %109 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc70)
    %110 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc71)
    %111 = arith.addi %109, %110 : tensor<16x1xi32> loc(#loc71)
    %112 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc72)
    %113 = arith.muli %111, %112 : tensor<16x1xi32> loc(#loc72)
    %114 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc73)
    %115 = tt.broadcast %113 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc73)
    %116 = tt.broadcast %114 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc73)
    %117 = arith.addi %115, %116 : tensor<16x16xi32> loc(#loc73)
    %c1_i32_9 = arith.constant 1 : i32 loc(#loc74)
    %cst_10 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc74)
    %118 = arith.addi %117, %cst_10 : tensor<16x16xi32> loc(#loc74)
    %119 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc75)
    %120 = tt.addptr %119, %118 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc75)
    %121 = tt.load %120 : tensor<16x16x!tt.ptr<f16>> loc(#loc76)
    %122 = arith.addf %108, %121 : tensor<16x16xf16> loc(#loc77)
    %123 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc78)
    %124 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc79)
    %125 = arith.addi %123, %124 : tensor<16x1xi32> loc(#loc79)
    %126 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc80)
    %127 = arith.muli %125, %126 : tensor<16x1xi32> loc(#loc80)
    %128 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc81)
    %129 = tt.broadcast %127 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc81)
    %130 = tt.broadcast %128 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc81)
    %131 = arith.addi %129, %130 : tensor<16x16xi32> loc(#loc81)
    %c3_i32_11 = arith.constant 3 : i32 loc(#loc82)
    %cst_12 = arith.constant dense<3> : tensor<16x16xi32> loc(#loc82)
    %132 = arith.addi %131, %cst_12 : tensor<16x16xi32> loc(#loc82)
    %133 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc83)
    %134 = tt.addptr %133, %132 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc83)
    %135 = tt.load %134 : tensor<16x16x!tt.ptr<f16>> loc(#loc84)
    %136 = arith.addf %122, %135 : tensor<16x16xf16> loc(#loc85)
    %137 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc86)
    %138 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc87)
    %139 = arith.addi %137, %138 : tensor<16x1xi32> loc(#loc87)
    %140 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc88)
    %141 = arith.muli %139, %140 : tensor<16x1xi32> loc(#loc88)
    %142 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc89)
    %143 = tt.broadcast %141 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc89)
    %144 = tt.broadcast %142 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc89)
    %145 = arith.addi %143, %144 : tensor<16x16xi32> loc(#loc89)
    %c4_i32_13 = arith.constant 4 : i32 loc(#loc90)
    %cst_14 = arith.constant dense<4> : tensor<16x16xi32> loc(#loc90)
    %146 = arith.addi %145, %cst_14 : tensor<16x16xi32> loc(#loc90)
    %147 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc91)
    %148 = tt.addptr %147, %146 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc91)
    %149 = tt.load %148 : tensor<16x16x!tt.ptr<f16>> loc(#loc92)
    %150 = arith.addf %136, %149 : tensor<16x16xf16> loc(#loc93)
    %151 = tt.expand_dims %12 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc94)
    %152 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc95)
    %153 = arith.addi %151, %152 : tensor<16x1xi32> loc(#loc95)
    %154 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc96)
    %155 = arith.muli %153, %154 : tensor<16x1xi32> loc(#loc96)
    %156 = tt.expand_dims %16 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc97)
    %157 = tt.broadcast %155 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc97)
    %158 = tt.broadcast %156 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc97)
    %159 = arith.addi %157, %158 : tensor<16x16xi32> loc(#loc97)
    %160 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc98)
    %161 = arith.addi %159, %160 : tensor<16x16xi32> loc(#loc98)
    %162 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc99)
    %163 = tt.addptr %162, %161 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc99)
    tt.store %163, %150 : tensor<16x16x!tt.ptr<f16>> loc(#loc100)
    tt.return loc(#loc101)
  } loc(#loc)
  tt.func private @cdiv__i32__1cconstexpr_16_(%arg0: i32 loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":35:0)) -> i32 attributes {noinline = false} {
    %c16_i32 = arith.constant 16 : i32 loc(#loc103)
    %c15_i32 = arith.constant 15 : i32 loc(#loc104)
    %0 = arith.addi %arg0, %c15_i32 : i32 loc(#loc104)
    %1 = arith.divsi %0, %c16_i32 : i32 loc(#loc105)
    tt.return %1 : i32 loc(#loc106)
  } loc(#loc102)
  tt.func private @"zeros____0cconstexpr_(constexpr_16_, constexpr_16_)__1cconstexpr_fp16_"() -> tensor<16x16xf16> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f16 loc(#loc108)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<16x16xf16> loc(#loc108)
    tt.return %cst_0 : tensor<16x16xf16> loc(#loc109)
  } loc(#loc107)
} loc(#loc)
#loc1 = loc("2d9pt_naive.py":30:10)
#loc2 = loc("2d9pt_naive.py":31:28)
#loc3 = loc("2d9pt_naive.py":31:26)
#loc4 = loc("2d9pt_naive.py":31:31)
#loc5 = loc("2d9pt_naive.py":32:28)
#loc6 = loc("2d9pt_naive.py":32:26)
#loc7 = loc("2d9pt_naive.py":32:31)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:50)
#loc15 = loc("2d9pt_naive.py":40:37)
#loc16 = loc("2d9pt_naive.py":42:22)
#loc17 = loc("2d9pt_naive.py":42:50)
#loc18 = loc("2d9pt_naive.py":42:37)
#loc19 = loc("2d9pt_naive.py":43:22)
#loc20 = loc("2d9pt_naive.py":43:50)
#loc21 = loc("2d9pt_naive.py":43:37)
#loc22 = loc("2d9pt_naive.py":47:22)
#loc23 = loc("2d9pt_naive.py":50:19)
#loc24 = loc("2d9pt_naive.py":50:36)
#loc25 = loc("2d9pt_naive.py":50:40)
#loc26 = loc("2d9pt_naive.py":50:56)
#loc27 = loc("2d9pt_naive.py":50:18)
#loc28 = loc("2d9pt_naive.py":51:21)
#loc29 = loc("2d9pt_naive.py":52:22)
#loc30 = loc("2d9pt_naive.py":54:20)
#loc31 = loc("2d9pt_naive.py":54:37)
#loc32 = loc("2d9pt_naive.py":54:40)
#loc33 = loc("2d9pt_naive.py":54:44)
#loc34 = loc("2d9pt_naive.py":54:60)
#loc35 = loc("2d9pt_naive.py":54:18)
#loc36 = loc("2d9pt_naive.py":55:21)
#loc37 = loc("2d9pt_naive.py":56:22)
#loc38 = loc("2d9pt_naive.py":58:20)
#loc39 = loc("2d9pt_naive.py":58:37)
#loc40 = loc("2d9pt_naive.py":58:40)
#loc41 = loc("2d9pt_naive.py":58:44)
#loc42 = loc("2d9pt_naive.py":58:60)
#loc43 = loc("2d9pt_naive.py":58:18)
#loc44 = loc("2d9pt_naive.py":59:21)
#loc45 = loc("2d9pt_naive.py":60:22)
#loc46 = loc("2d9pt_naive.py":62:20)
#loc47 = loc("2d9pt_naive.py":62:37)
#loc48 = loc("2d9pt_naive.py":62:40)
#loc49 = loc("2d9pt_naive.py":62:44)
#loc50 = loc("2d9pt_naive.py":62:60)
#loc51 = loc("2d9pt_naive.py":62:18)
#loc52 = loc("2d9pt_naive.py":63:21)
#loc53 = loc("2d9pt_naive.py":64:22)
#loc54 = loc("2d9pt_naive.py":66:20)
#loc55 = loc("2d9pt_naive.py":66:37)
#loc56 = loc("2d9pt_naive.py":66:40)
#loc57 = loc("2d9pt_naive.py":66:44)
#loc58 = loc("2d9pt_naive.py":66:60)
#loc59 = loc("2d9pt_naive.py":66:18)
#loc60 = loc("2d9pt_naive.py":67:21)
#loc61 = loc("2d9pt_naive.py":68:22)
#loc62 = loc("2d9pt_naive.py":71:20)
#loc63 = loc("2d9pt_naive.py":71:37)
#loc64 = loc("2d9pt_naive.py":71:40)
#loc65 = loc("2d9pt_naive.py":71:44)
#loc66 = loc("2d9pt_naive.py":71:62)
#loc67 = loc("2d9pt_naive.py":71:18)
#loc68 = loc("2d9pt_naive.py":72:21)
#loc69 = loc("2d9pt_naive.py":73:22)
#loc70 = loc("2d9pt_naive.py":75:20)
#loc71 = loc("2d9pt_naive.py":75:37)
#loc72 = loc("2d9pt_naive.py":75:40)
#loc73 = loc("2d9pt_naive.py":75:44)
#loc74 = loc("2d9pt_naive.py":75:62)
#loc75 = loc("2d9pt_naive.py":75:18)
#loc76 = loc("2d9pt_naive.py":76:21)
#loc77 = loc("2d9pt_naive.py":77:22)
#loc78 = loc("2d9pt_naive.py":79:20)
#loc79 = loc("2d9pt_naive.py":79:37)
#loc80 = loc("2d9pt_naive.py":79:40)
#loc81 = loc("2d9pt_naive.py":79:44)
#loc82 = loc("2d9pt_naive.py":79:62)
#loc83 = loc("2d9pt_naive.py":79:18)
#loc84 = loc("2d9pt_naive.py":80:21)
#loc85 = loc("2d9pt_naive.py":81:22)
#loc86 = loc("2d9pt_naive.py":83:20)
#loc87 = loc("2d9pt_naive.py":83:37)
#loc88 = loc("2d9pt_naive.py":83:40)
#loc89 = loc("2d9pt_naive.py":83:44)
#loc90 = loc("2d9pt_naive.py":83:62)
#loc91 = loc("2d9pt_naive.py":83:18)
#loc92 = loc("2d9pt_naive.py":84:21)
#loc93 = loc("2d9pt_naive.py":85:22)
#loc94 = loc("2d9pt_naive.py":87:19)
#loc95 = loc("2d9pt_naive.py":87:35)
#loc96 = loc("2d9pt_naive.py":87:38)
#loc97 = loc("2d9pt_naive.py":87:42)
#loc98 = loc("2d9pt_naive.py":87:60)
#loc99 = loc("2d9pt_naive.py":87:18)
#loc100 = loc("2d9pt_naive.py":88:21)
#loc101 = loc("2d9pt_naive.py":88:4)
#loc103 = loc(unknown)
#loc104 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc105 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc106 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:11)
#loc107 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":116:0)
#loc108 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":125:31)
#loc109 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":125:11)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @stencil_kernel) //----- //
#loc = loc("2d9pt_naive.py":18:0)
#loc102 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":35:0)
module {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc2)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc3)
    %3 = tt.call @cdiv__i32__1cconstexpr_16_(%2) : (i32) -> i32 loc(#loc4)
    %c2_i32_0 = arith.constant 2 : i32 loc(#loc5)
    %4 = arith.muli %arg4, %c2_i32_0 : i32 loc(#loc5)
    %5 = arith.subi %arg3, %4 : i32 loc(#loc6)
    %6 = tt.call @cdiv__i32__1cconstexpr_16_(%5) : (i32) -> i32 loc(#loc7)
    %7 = arith.divsi %0, %3 : i32 loc(#loc8)
    %8 = arith.remsi %0, %3 : i32 loc(#loc9)
    %c16_i32 = arith.constant 16 : i32 loc(#loc10)
    %9 = arith.muli %7, %c16_i32 : i32 loc(#loc10)
    %10 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc11)
    %11 = tt.splat %9 : i32 -> tensor<16xi32> loc(#loc12)
    %12 = arith.addi %11, %10 : tensor<16xi32> loc(#loc12)
    %c16_i32_1 = arith.constant 16 : i32 loc(#loc13)
    %13 = arith.muli %8, %c16_i32_1 : i32 loc(#loc13)
    %14 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc14)
    %15 = tt.splat %13 : i32 -> tensor<16xi32> loc(#loc15)
    %16 = arith.addi %15, %14 : tensor<16xi32> loc(#loc15)
    %c16_i32_2 = arith.constant 16 : i32 loc(#loc16)
    %17 = arith.muli %7, %c16_i32_2 : i32 loc(#loc16)
    %18 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc17)
    %19 = tt.splat %17 : i32 -> tensor<16xi32> loc(#loc18)
    %20 = arith.addi %19, %18 : tensor<16xi32> loc(#loc18)
    %c16_i32_3 = arith.constant 16 : i32 loc(#loc19)
    %21 = arith.muli %8, %c16_i32_3 : i32 loc(#loc19)
    %22 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc20)
    %23 = tt.splat %21 : i32 -> tensor<16xi32> loc(#loc21)
    %24 = arith.addi %23, %22 : tensor<16xi32> loc(#loc21)
    %25 = tt.call @"zeros____0cconstexpr_(constexpr_16_, constexpr_16_)__1cconstexpr_fp16_"() : () -> tensor<16x16xf16> loc(#loc22)
    %26 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc23)
    %27 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc24)
    %28 = arith.muli %26, %27 : tensor<16x1xi32> loc(#loc24)
    %29 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc25)
    %30 = tt.broadcast %28 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc25)
    %31 = tt.broadcast %29 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc25)
    %32 = arith.addi %30, %31 : tensor<16x16xi32> loc(#loc25)
    %33 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc26)
    %34 = arith.addi %32, %33 : tensor<16x16xi32> loc(#loc26)
    %35 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc27)
    %36 = tt.addptr %35, %34 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc27)
    %37 = tt.load %36 : tensor<16x16x!tt.ptr<f16>> loc(#loc28)
    %38 = arith.addf %25, %37 : tensor<16x16xf16> loc(#loc29)
    %39 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc30)
    %c1_i32 = arith.constant 1 : i32 loc(#loc31)
    %cst = arith.constant dense<1> : tensor<16x1xi32> loc(#loc31)
    %40 = arith.addi %39, %cst : tensor<16x1xi32> loc(#loc31)
    %41 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc32)
    %42 = arith.muli %40, %41 : tensor<16x1xi32> loc(#loc32)
    %43 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc33)
    %44 = tt.broadcast %42 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc33)
    %45 = tt.broadcast %43 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc33)
    %46 = arith.addi %44, %45 : tensor<16x16xi32> loc(#loc33)
    %47 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc34)
    %48 = arith.addi %46, %47 : tensor<16x16xi32> loc(#loc34)
    %49 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc35)
    %50 = tt.addptr %49, %48 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc35)
    %51 = tt.load %50 : tensor<16x16x!tt.ptr<f16>> loc(#loc36)
    %52 = arith.addf %38, %51 : tensor<16x16xf16> loc(#loc37)
    %53 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc38)
    %c2_i32_4 = arith.constant 2 : i32 loc(#loc39)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32> loc(#loc39)
    %54 = arith.addi %53, %cst_5 : tensor<16x1xi32> loc(#loc39)
    %55 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc40)
    %56 = arith.muli %54, %55 : tensor<16x1xi32> loc(#loc40)
    %57 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc41)
    %58 = tt.broadcast %56 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc41)
    %59 = tt.broadcast %57 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc41)
    %60 = arith.addi %58, %59 : tensor<16x16xi32> loc(#loc41)
    %61 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc42)
    %62 = arith.addi %60, %61 : tensor<16x16xi32> loc(#loc42)
    %63 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc43)
    %64 = tt.addptr %63, %62 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc43)
    %65 = tt.load %64 : tensor<16x16x!tt.ptr<f16>> loc(#loc44)
    %66 = arith.addf %52, %65 : tensor<16x16xf16> loc(#loc45)
    %67 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc46)
    %c3_i32 = arith.constant 3 : i32 loc(#loc47)
    %cst_6 = arith.constant dense<3> : tensor<16x1xi32> loc(#loc47)
    %68 = arith.addi %67, %cst_6 : tensor<16x1xi32> loc(#loc47)
    %69 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc48)
    %70 = arith.muli %68, %69 : tensor<16x1xi32> loc(#loc48)
    %71 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc49)
    %72 = tt.broadcast %70 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc49)
    %73 = tt.broadcast %71 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc49)
    %74 = arith.addi %72, %73 : tensor<16x16xi32> loc(#loc49)
    %75 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc50)
    %76 = arith.addi %74, %75 : tensor<16x16xi32> loc(#loc50)
    %77 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc51)
    %78 = tt.addptr %77, %76 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc51)
    %79 = tt.load %78 : tensor<16x16x!tt.ptr<f16>> loc(#loc52)
    %80 = arith.addf %66, %79 : tensor<16x16xf16> loc(#loc53)
    %81 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc54)
    %c4_i32 = arith.constant 4 : i32 loc(#loc55)
    %cst_7 = arith.constant dense<4> : tensor<16x1xi32> loc(#loc55)
    %82 = arith.addi %81, %cst_7 : tensor<16x1xi32> loc(#loc55)
    %83 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc56)
    %84 = arith.muli %82, %83 : tensor<16x1xi32> loc(#loc56)
    %85 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc57)
    %86 = tt.broadcast %84 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc57)
    %87 = tt.broadcast %85 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc57)
    %88 = arith.addi %86, %87 : tensor<16x16xi32> loc(#loc57)
    %89 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc58)
    %90 = arith.addi %88, %89 : tensor<16x16xi32> loc(#loc58)
    %91 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc59)
    %92 = tt.addptr %91, %90 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc59)
    %93 = tt.load %92 : tensor<16x16x!tt.ptr<f16>> loc(#loc60)
    %94 = arith.addf %80, %93 : tensor<16x16xf16> loc(#loc61)
    %95 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc62)
    %96 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc63)
    %97 = arith.addi %95, %96 : tensor<16x1xi32> loc(#loc63)
    %98 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc64)
    %99 = arith.muli %97, %98 : tensor<16x1xi32> loc(#loc64)
    %100 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc65)
    %101 = tt.broadcast %99 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc65)
    %102 = tt.broadcast %100 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc65)
    %103 = arith.addi %101, %102 : tensor<16x16xi32> loc(#loc65)
    %c0_i32 = arith.constant 0 : i32 loc(#loc66)
    %cst_8 = arith.constant dense<0> : tensor<16x16xi32> loc(#loc66)
    %104 = arith.addi %103, %cst_8 : tensor<16x16xi32> loc(#loc66)
    %105 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc67)
    %106 = tt.addptr %105, %104 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc67)
    %107 = tt.load %106 : tensor<16x16x!tt.ptr<f16>> loc(#loc68)
    %108 = arith.addf %94, %107 : tensor<16x16xf16> loc(#loc69)
    %109 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc70)
    %110 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc71)
    %111 = arith.addi %109, %110 : tensor<16x1xi32> loc(#loc71)
    %112 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc72)
    %113 = arith.muli %111, %112 : tensor<16x1xi32> loc(#loc72)
    %114 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc73)
    %115 = tt.broadcast %113 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc73)
    %116 = tt.broadcast %114 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc73)
    %117 = arith.addi %115, %116 : tensor<16x16xi32> loc(#loc73)
    %c1_i32_9 = arith.constant 1 : i32 loc(#loc74)
    %cst_10 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc74)
    %118 = arith.addi %117, %cst_10 : tensor<16x16xi32> loc(#loc74)
    %119 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc75)
    %120 = tt.addptr %119, %118 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc75)
    %121 = tt.load %120 : tensor<16x16x!tt.ptr<f16>> loc(#loc76)
    %122 = arith.addf %108, %121 : tensor<16x16xf16> loc(#loc77)
    %123 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc78)
    %124 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc79)
    %125 = arith.addi %123, %124 : tensor<16x1xi32> loc(#loc79)
    %126 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc80)
    %127 = arith.muli %125, %126 : tensor<16x1xi32> loc(#loc80)
    %128 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc81)
    %129 = tt.broadcast %127 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc81)
    %130 = tt.broadcast %128 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc81)
    %131 = arith.addi %129, %130 : tensor<16x16xi32> loc(#loc81)
    %c3_i32_11 = arith.constant 3 : i32 loc(#loc82)
    %cst_12 = arith.constant dense<3> : tensor<16x16xi32> loc(#loc82)
    %132 = arith.addi %131, %cst_12 : tensor<16x16xi32> loc(#loc82)
    %133 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc83)
    %134 = tt.addptr %133, %132 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc83)
    %135 = tt.load %134 : tensor<16x16x!tt.ptr<f16>> loc(#loc84)
    %136 = arith.addf %122, %135 : tensor<16x16xf16> loc(#loc85)
    %137 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc86)
    %138 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc87)
    %139 = arith.addi %137, %138 : tensor<16x1xi32> loc(#loc87)
    %140 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc88)
    %141 = arith.muli %139, %140 : tensor<16x1xi32> loc(#loc88)
    %142 = tt.expand_dims %24 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc89)
    %143 = tt.broadcast %141 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc89)
    %144 = tt.broadcast %142 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc89)
    %145 = arith.addi %143, %144 : tensor<16x16xi32> loc(#loc89)
    %c4_i32_13 = arith.constant 4 : i32 loc(#loc90)
    %cst_14 = arith.constant dense<4> : tensor<16x16xi32> loc(#loc90)
    %146 = arith.addi %145, %cst_14 : tensor<16x16xi32> loc(#loc90)
    %147 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc91)
    %148 = tt.addptr %147, %146 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc91)
    %149 = tt.load %148 : tensor<16x16x!tt.ptr<f16>> loc(#loc92)
    %150 = arith.addf %136, %149 : tensor<16x16xf16> loc(#loc93)
    %151 = tt.expand_dims %12 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc94)
    %152 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc95)
    %153 = arith.addi %151, %152 : tensor<16x1xi32> loc(#loc95)
    %154 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc96)
    %155 = arith.muli %153, %154 : tensor<16x1xi32> loc(#loc96)
    %156 = tt.expand_dims %16 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc97)
    %157 = tt.broadcast %155 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc97)
    %158 = tt.broadcast %156 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc97)
    %159 = arith.addi %157, %158 : tensor<16x16xi32> loc(#loc97)
    %160 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc98)
    %161 = arith.addi %159, %160 : tensor<16x16xi32> loc(#loc98)
    %162 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc99)
    %163 = tt.addptr %162, %161 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc99)
    tt.store %163, %150 : tensor<16x16x!tt.ptr<f16>> loc(#loc100)
    tt.return loc(#loc101)
  } loc(#loc)
  tt.func private @cdiv__i32__1cconstexpr_16_(%arg0: i32 loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":35:0)) -> i32 attributes {noinline = false} {
    %c16_i32 = arith.constant 16 : i32 loc(#loc103)
    %c15_i32 = arith.constant 15 : i32 loc(#loc104)
    %0 = arith.addi %arg0, %c15_i32 : i32 loc(#loc104)
    %1 = arith.divsi %0, %c16_i32 : i32 loc(#loc105)
    tt.return %1 : i32 loc(#loc106)
  } loc(#loc102)
  tt.func private @"zeros____0cconstexpr_(constexpr_16_, constexpr_16_)__1cconstexpr_fp16_"() -> tensor<16x16xf16> attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16> loc(#loc108)
    tt.return %cst : tensor<16x16xf16> loc(#loc109)
  } loc(#loc107)
} loc(#loc)
#loc1 = loc("2d9pt_naive.py":30:10)
#loc2 = loc("2d9pt_naive.py":31:28)
#loc3 = loc("2d9pt_naive.py":31:26)
#loc4 = loc("2d9pt_naive.py":31:31)
#loc5 = loc("2d9pt_naive.py":32:28)
#loc6 = loc("2d9pt_naive.py":32:26)
#loc7 = loc("2d9pt_naive.py":32:31)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:50)
#loc15 = loc("2d9pt_naive.py":40:37)
#loc16 = loc("2d9pt_naive.py":42:22)
#loc17 = loc("2d9pt_naive.py":42:50)
#loc18 = loc("2d9pt_naive.py":42:37)
#loc19 = loc("2d9pt_naive.py":43:22)
#loc20 = loc("2d9pt_naive.py":43:50)
#loc21 = loc("2d9pt_naive.py":43:37)
#loc22 = loc("2d9pt_naive.py":47:22)
#loc23 = loc("2d9pt_naive.py":50:19)
#loc24 = loc("2d9pt_naive.py":50:36)
#loc25 = loc("2d9pt_naive.py":50:40)
#loc26 = loc("2d9pt_naive.py":50:56)
#loc27 = loc("2d9pt_naive.py":50:18)
#loc28 = loc("2d9pt_naive.py":51:21)
#loc29 = loc("2d9pt_naive.py":52:22)
#loc30 = loc("2d9pt_naive.py":54:20)
#loc31 = loc("2d9pt_naive.py":54:37)
#loc32 = loc("2d9pt_naive.py":54:40)
#loc33 = loc("2d9pt_naive.py":54:44)
#loc34 = loc("2d9pt_naive.py":54:60)
#loc35 = loc("2d9pt_naive.py":54:18)
#loc36 = loc("2d9pt_naive.py":55:21)
#loc37 = loc("2d9pt_naive.py":56:22)
#loc38 = loc("2d9pt_naive.py":58:20)
#loc39 = loc("2d9pt_naive.py":58:37)
#loc40 = loc("2d9pt_naive.py":58:40)
#loc41 = loc("2d9pt_naive.py":58:44)
#loc42 = loc("2d9pt_naive.py":58:60)
#loc43 = loc("2d9pt_naive.py":58:18)
#loc44 = loc("2d9pt_naive.py":59:21)
#loc45 = loc("2d9pt_naive.py":60:22)
#loc46 = loc("2d9pt_naive.py":62:20)
#loc47 = loc("2d9pt_naive.py":62:37)
#loc48 = loc("2d9pt_naive.py":62:40)
#loc49 = loc("2d9pt_naive.py":62:44)
#loc50 = loc("2d9pt_naive.py":62:60)
#loc51 = loc("2d9pt_naive.py":62:18)
#loc52 = loc("2d9pt_naive.py":63:21)
#loc53 = loc("2d9pt_naive.py":64:22)
#loc54 = loc("2d9pt_naive.py":66:20)
#loc55 = loc("2d9pt_naive.py":66:37)
#loc56 = loc("2d9pt_naive.py":66:40)
#loc57 = loc("2d9pt_naive.py":66:44)
#loc58 = loc("2d9pt_naive.py":66:60)
#loc59 = loc("2d9pt_naive.py":66:18)
#loc60 = loc("2d9pt_naive.py":67:21)
#loc61 = loc("2d9pt_naive.py":68:22)
#loc62 = loc("2d9pt_naive.py":71:20)
#loc63 = loc("2d9pt_naive.py":71:37)
#loc64 = loc("2d9pt_naive.py":71:40)
#loc65 = loc("2d9pt_naive.py":71:44)
#loc66 = loc("2d9pt_naive.py":71:62)
#loc67 = loc("2d9pt_naive.py":71:18)
#loc68 = loc("2d9pt_naive.py":72:21)
#loc69 = loc("2d9pt_naive.py":73:22)
#loc70 = loc("2d9pt_naive.py":75:20)
#loc71 = loc("2d9pt_naive.py":75:37)
#loc72 = loc("2d9pt_naive.py":75:40)
#loc73 = loc("2d9pt_naive.py":75:44)
#loc74 = loc("2d9pt_naive.py":75:62)
#loc75 = loc("2d9pt_naive.py":75:18)
#loc76 = loc("2d9pt_naive.py":76:21)
#loc77 = loc("2d9pt_naive.py":77:22)
#loc78 = loc("2d9pt_naive.py":79:20)
#loc79 = loc("2d9pt_naive.py":79:37)
#loc80 = loc("2d9pt_naive.py":79:40)
#loc81 = loc("2d9pt_naive.py":79:44)
#loc82 = loc("2d9pt_naive.py":79:62)
#loc83 = loc("2d9pt_naive.py":79:18)
#loc84 = loc("2d9pt_naive.py":80:21)
#loc85 = loc("2d9pt_naive.py":81:22)
#loc86 = loc("2d9pt_naive.py":83:20)
#loc87 = loc("2d9pt_naive.py":83:37)
#loc88 = loc("2d9pt_naive.py":83:40)
#loc89 = loc("2d9pt_naive.py":83:44)
#loc90 = loc("2d9pt_naive.py":83:62)
#loc91 = loc("2d9pt_naive.py":83:18)
#loc92 = loc("2d9pt_naive.py":84:21)
#loc93 = loc("2d9pt_naive.py":85:22)
#loc94 = loc("2d9pt_naive.py":87:19)
#loc95 = loc("2d9pt_naive.py":87:35)
#loc96 = loc("2d9pt_naive.py":87:38)
#loc97 = loc("2d9pt_naive.py":87:42)
#loc98 = loc("2d9pt_naive.py":87:60)
#loc99 = loc("2d9pt_naive.py":87:18)
#loc100 = loc("2d9pt_naive.py":88:21)
#loc101 = loc("2d9pt_naive.py":88:4)
#loc103 = loc(unknown)
#loc104 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc105 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc106 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:11)
#loc107 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":116:0)
#loc108 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":125:31)
#loc109 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":125:11)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @stencil_kernel) //----- //
#loc = loc("2d9pt_naive.py":18:0)
module {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<4> : tensor<16x16xi32> loc(#loc1)
    %cst_0 = arith.constant dense<3> : tensor<16x16xi32> loc(#loc1)
    %cst_1 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc1)
    %cst_2 = arith.constant dense<4> : tensor<16x1xi32> loc(#loc1)
    %cst_3 = arith.constant dense<3> : tensor<16x1xi32> loc(#loc1)
    %cst_4 = arith.constant dense<2> : tensor<16x1xi32> loc(#loc1)
    %cst_5 = arith.constant dense<1> : tensor<16x1xi32> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %c16_i32_6 = arith.constant 16 : i32 loc(#loc107)
    %c15_i32 = arith.constant 15 : i32 loc(#loc108)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc108)
    %4 = arith.divsi %3, %c16_i32_6 : i32 loc(#loc109)
    %5 = arith.muli %arg4, %c2_i32 : i32 loc(#loc8)
    %6 = arith.subi %arg3, %5 : i32 loc(#loc9)
    %c16_i32_7 = arith.constant 16 : i32 loc(#loc110)
    %c15_i32_8 = arith.constant 15 : i32 loc(#loc111)
    %7 = arith.addi %6, %c15_i32_8 : i32 loc(#loc111)
    %8 = arith.divsi %7, %c16_i32_7 : i32 loc(#loc112)
    %9 = arith.divsi %0, %4 : i32 loc(#loc11)
    %10 = arith.remsi %0, %4 : i32 loc(#loc12)
    %11 = arith.muli %9, %c16_i32 : i32 loc(#loc13)
    %12 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc14)
    %13 = tt.splat %11 : i32 -> tensor<16xi32> loc(#loc15)
    %14 = arith.addi %13, %12 : tensor<16xi32> loc(#loc15)
    %15 = arith.muli %10, %c16_i32 : i32 loc(#loc16)
    %16 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc17)
    %17 = tt.splat %15 : i32 -> tensor<16xi32> loc(#loc18)
    %18 = arith.addi %17, %16 : tensor<16xi32> loc(#loc18)
    %19 = arith.muli %9, %c16_i32 : i32 loc(#loc19)
    %20 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc20)
    %21 = tt.splat %19 : i32 -> tensor<16xi32> loc(#loc21)
    %22 = arith.addi %21, %20 : tensor<16xi32> loc(#loc21)
    %23 = arith.muli %10, %c16_i32 : i32 loc(#loc22)
    %24 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc23)
    %25 = tt.splat %23 : i32 -> tensor<16xi32> loc(#loc24)
    %26 = arith.addi %25, %24 : tensor<16xi32> loc(#loc24)
    %cst_9 = arith.constant dense<0.000000e+00> : tensor<16x16xf16> loc(#loc113)
    %27 = tt.expand_dims %22 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc27)
    %28 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc28)
    %29 = arith.muli %27, %28 : tensor<16x1xi32> loc(#loc28)
    %30 = tt.expand_dims %26 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc29)
    %31 = tt.broadcast %29 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc29)
    %32 = tt.broadcast %30 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc29)
    %33 = arith.addi %31, %32 : tensor<16x16xi32> loc(#loc29)
    %34 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc30)
    %35 = arith.addi %33, %34 : tensor<16x16xi32> loc(#loc30)
    %36 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc31)
    %37 = tt.addptr %36, %35 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc31)
    %38 = tt.load %37 : tensor<16x16x!tt.ptr<f16>> loc(#loc32)
    %39 = arith.addf %cst_9, %38 : tensor<16x16xf16> loc(#loc33)
    %40 = tt.expand_dims %22 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc34)
    %41 = arith.addi %40, %cst_5 : tensor<16x1xi32> loc(#loc35)
    %42 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc36)
    %43 = arith.muli %41, %42 : tensor<16x1xi32> loc(#loc36)
    %44 = tt.expand_dims %26 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc37)
    %45 = tt.broadcast %43 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc37)
    %46 = tt.broadcast %44 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc37)
    %47 = arith.addi %45, %46 : tensor<16x16xi32> loc(#loc37)
    %48 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc38)
    %49 = arith.addi %47, %48 : tensor<16x16xi32> loc(#loc38)
    %50 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc39)
    %51 = tt.addptr %50, %49 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc39)
    %52 = tt.load %51 : tensor<16x16x!tt.ptr<f16>> loc(#loc40)
    %53 = arith.addf %39, %52 : tensor<16x16xf16> loc(#loc41)
    %54 = tt.expand_dims %22 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc42)
    %55 = arith.addi %54, %cst_4 : tensor<16x1xi32> loc(#loc43)
    %56 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc44)
    %57 = arith.muli %55, %56 : tensor<16x1xi32> loc(#loc44)
    %58 = tt.expand_dims %26 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc45)
    %59 = tt.broadcast %57 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc45)
    %60 = tt.broadcast %58 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc45)
    %61 = arith.addi %59, %60 : tensor<16x16xi32> loc(#loc45)
    %62 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc46)
    %63 = arith.addi %61, %62 : tensor<16x16xi32> loc(#loc46)
    %64 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc47)
    %65 = tt.addptr %64, %63 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc47)
    %66 = tt.load %65 : tensor<16x16x!tt.ptr<f16>> loc(#loc48)
    %67 = arith.addf %53, %66 : tensor<16x16xf16> loc(#loc49)
    %68 = tt.expand_dims %22 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc50)
    %69 = arith.addi %68, %cst_3 : tensor<16x1xi32> loc(#loc51)
    %70 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc52)
    %71 = arith.muli %69, %70 : tensor<16x1xi32> loc(#loc52)
    %72 = tt.expand_dims %26 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc53)
    %73 = tt.broadcast %71 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc53)
    %74 = tt.broadcast %72 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc53)
    %75 = arith.addi %73, %74 : tensor<16x16xi32> loc(#loc53)
    %76 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc54)
    %77 = arith.addi %75, %76 : tensor<16x16xi32> loc(#loc54)
    %78 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc55)
    %79 = tt.addptr %78, %77 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc55)
    %80 = tt.load %79 : tensor<16x16x!tt.ptr<f16>> loc(#loc56)
    %81 = arith.addf %67, %80 : tensor<16x16xf16> loc(#loc57)
    %82 = tt.expand_dims %22 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc58)
    %83 = arith.addi %82, %cst_2 : tensor<16x1xi32> loc(#loc59)
    %84 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc60)
    %85 = arith.muli %83, %84 : tensor<16x1xi32> loc(#loc60)
    %86 = tt.expand_dims %26 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc61)
    %87 = tt.broadcast %85 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc61)
    %88 = tt.broadcast %86 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc61)
    %89 = arith.addi %87, %88 : tensor<16x16xi32> loc(#loc61)
    %90 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc62)
    %91 = arith.addi %89, %90 : tensor<16x16xi32> loc(#loc62)
    %92 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc63)
    %93 = tt.addptr %92, %91 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc63)
    %94 = tt.load %93 : tensor<16x16x!tt.ptr<f16>> loc(#loc64)
    %95 = arith.addf %81, %94 : tensor<16x16xf16> loc(#loc65)
    %96 = tt.expand_dims %22 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc66)
    %97 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc67)
    %98 = arith.addi %96, %97 : tensor<16x1xi32> loc(#loc67)
    %99 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc68)
    %100 = arith.muli %98, %99 : tensor<16x1xi32> loc(#loc68)
    %101 = tt.expand_dims %26 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc69)
    %102 = tt.broadcast %100 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc69)
    %103 = tt.broadcast %101 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc69)
    %104 = arith.addi %102, %103 : tensor<16x16xi32> loc(#loc69)
    %105 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc70)
    %106 = tt.addptr %105, %104 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc70)
    %107 = tt.load %106 : tensor<16x16x!tt.ptr<f16>> loc(#loc71)
    %108 = arith.addf %95, %107 : tensor<16x16xf16> loc(#loc72)
    %109 = tt.expand_dims %22 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc73)
    %110 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc74)
    %111 = arith.addi %109, %110 : tensor<16x1xi32> loc(#loc74)
    %112 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc75)
    %113 = arith.muli %111, %112 : tensor<16x1xi32> loc(#loc75)
    %114 = tt.expand_dims %26 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc76)
    %115 = tt.broadcast %113 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc76)
    %116 = tt.broadcast %114 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc76)
    %117 = arith.addi %115, %116 : tensor<16x16xi32> loc(#loc76)
    %118 = arith.addi %117, %cst_1 : tensor<16x16xi32> loc(#loc77)
    %119 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc78)
    %120 = tt.addptr %119, %118 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc78)
    %121 = tt.load %120 : tensor<16x16x!tt.ptr<f16>> loc(#loc79)
    %122 = arith.addf %108, %121 : tensor<16x16xf16> loc(#loc80)
    %123 = tt.expand_dims %22 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc81)
    %124 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc82)
    %125 = arith.addi %123, %124 : tensor<16x1xi32> loc(#loc82)
    %126 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc83)
    %127 = arith.muli %125, %126 : tensor<16x1xi32> loc(#loc83)
    %128 = tt.expand_dims %26 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc84)
    %129 = tt.broadcast %127 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc84)
    %130 = tt.broadcast %128 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc84)
    %131 = arith.addi %129, %130 : tensor<16x16xi32> loc(#loc84)
    %132 = arith.addi %131, %cst_0 : tensor<16x16xi32> loc(#loc85)
    %133 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc86)
    %134 = tt.addptr %133, %132 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc86)
    %135 = tt.load %134 : tensor<16x16x!tt.ptr<f16>> loc(#loc87)
    %136 = arith.addf %122, %135 : tensor<16x16xf16> loc(#loc88)
    %137 = tt.expand_dims %22 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc89)
    %138 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc90)
    %139 = arith.addi %137, %138 : tensor<16x1xi32> loc(#loc90)
    %140 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc91)
    %141 = arith.muli %139, %140 : tensor<16x1xi32> loc(#loc91)
    %142 = tt.expand_dims %26 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc92)
    %143 = tt.broadcast %141 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc92)
    %144 = tt.broadcast %142 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc92)
    %145 = arith.addi %143, %144 : tensor<16x16xi32> loc(#loc92)
    %146 = arith.addi %145, %cst : tensor<16x16xi32> loc(#loc93)
    %147 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc94)
    %148 = tt.addptr %147, %146 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc94)
    %149 = tt.load %148 : tensor<16x16x!tt.ptr<f16>> loc(#loc95)
    %150 = arith.addf %136, %149 : tensor<16x16xf16> loc(#loc96)
    %151 = tt.expand_dims %14 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc97)
    %152 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc98)
    %153 = arith.addi %151, %152 : tensor<16x1xi32> loc(#loc98)
    %154 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc99)
    %155 = arith.muli %153, %154 : tensor<16x1xi32> loc(#loc99)
    %156 = tt.expand_dims %18 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc100)
    %157 = tt.broadcast %155 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc100)
    %158 = tt.broadcast %156 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc100)
    %159 = arith.addi %157, %158 : tensor<16x16xi32> loc(#loc100)
    %160 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc101)
    %161 = arith.addi %159, %160 : tensor<16x16xi32> loc(#loc101)
    %162 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc102)
    %163 = tt.addptr %162, %161 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc102)
    tt.store %163, %150 : tensor<16x16x!tt.ptr<f16>> loc(#loc103)
    tt.return loc(#loc104)
  } loc(#loc)
  tt.func private @cdiv__i32__1cconstexpr_16_(i32) -> i32 attributes {noinline = false} loc(#loc105)
  tt.func private @"zeros____0cconstexpr_(constexpr_16_, constexpr_16_)__1cconstexpr_fp16_"() -> tensor<16x16xf16> attributes {noinline = false} loc(#loc106)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("2d9pt_naive.py":31:31)
#loc6 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":32:28)
#loc9 = loc("2d9pt_naive.py":32:26)
#loc10 = loc("2d9pt_naive.py":32:31)
#loc11 = loc("2d9pt_naive.py":34:19)
#loc12 = loc("2d9pt_naive.py":35:18)
#loc13 = loc("2d9pt_naive.py":39:22)
#loc14 = loc("2d9pt_naive.py":39:50)
#loc15 = loc("2d9pt_naive.py":39:37)
#loc16 = loc("2d9pt_naive.py":40:22)
#loc17 = loc("2d9pt_naive.py":40:50)
#loc18 = loc("2d9pt_naive.py":40:37)
#loc19 = loc("2d9pt_naive.py":42:22)
#loc20 = loc("2d9pt_naive.py":42:50)
#loc21 = loc("2d9pt_naive.py":42:37)
#loc22 = loc("2d9pt_naive.py":43:22)
#loc23 = loc("2d9pt_naive.py":43:50)
#loc24 = loc("2d9pt_naive.py":43:37)
#loc25 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":125:31)
#loc26 = loc("2d9pt_naive.py":47:22)
#loc27 = loc("2d9pt_naive.py":50:19)
#loc28 = loc("2d9pt_naive.py":50:36)
#loc29 = loc("2d9pt_naive.py":50:40)
#loc30 = loc("2d9pt_naive.py":50:56)
#loc31 = loc("2d9pt_naive.py":50:18)
#loc32 = loc("2d9pt_naive.py":51:21)
#loc33 = loc("2d9pt_naive.py":52:22)
#loc34 = loc("2d9pt_naive.py":54:20)
#loc35 = loc("2d9pt_naive.py":54:37)
#loc36 = loc("2d9pt_naive.py":54:40)
#loc37 = loc("2d9pt_naive.py":54:44)
#loc38 = loc("2d9pt_naive.py":54:60)
#loc39 = loc("2d9pt_naive.py":54:18)
#loc40 = loc("2d9pt_naive.py":55:21)
#loc41 = loc("2d9pt_naive.py":56:22)
#loc42 = loc("2d9pt_naive.py":58:20)
#loc43 = loc("2d9pt_naive.py":58:37)
#loc44 = loc("2d9pt_naive.py":58:40)
#loc45 = loc("2d9pt_naive.py":58:44)
#loc46 = loc("2d9pt_naive.py":58:60)
#loc47 = loc("2d9pt_naive.py":58:18)
#loc48 = loc("2d9pt_naive.py":59:21)
#loc49 = loc("2d9pt_naive.py":60:22)
#loc50 = loc("2d9pt_naive.py":62:20)
#loc51 = loc("2d9pt_naive.py":62:37)
#loc52 = loc("2d9pt_naive.py":62:40)
#loc53 = loc("2d9pt_naive.py":62:44)
#loc54 = loc("2d9pt_naive.py":62:60)
#loc55 = loc("2d9pt_naive.py":62:18)
#loc56 = loc("2d9pt_naive.py":63:21)
#loc57 = loc("2d9pt_naive.py":64:22)
#loc58 = loc("2d9pt_naive.py":66:20)
#loc59 = loc("2d9pt_naive.py":66:37)
#loc60 = loc("2d9pt_naive.py":66:40)
#loc61 = loc("2d9pt_naive.py":66:44)
#loc62 = loc("2d9pt_naive.py":66:60)
#loc63 = loc("2d9pt_naive.py":66:18)
#loc64 = loc("2d9pt_naive.py":67:21)
#loc65 = loc("2d9pt_naive.py":68:22)
#loc66 = loc("2d9pt_naive.py":71:20)
#loc67 = loc("2d9pt_naive.py":71:37)
#loc68 = loc("2d9pt_naive.py":71:40)
#loc69 = loc("2d9pt_naive.py":71:44)
#loc70 = loc("2d9pt_naive.py":71:18)
#loc71 = loc("2d9pt_naive.py":72:21)
#loc72 = loc("2d9pt_naive.py":73:22)
#loc73 = loc("2d9pt_naive.py":75:20)
#loc74 = loc("2d9pt_naive.py":75:37)
#loc75 = loc("2d9pt_naive.py":75:40)
#loc76 = loc("2d9pt_naive.py":75:44)
#loc77 = loc("2d9pt_naive.py":75:62)
#loc78 = loc("2d9pt_naive.py":75:18)
#loc79 = loc("2d9pt_naive.py":76:21)
#loc80 = loc("2d9pt_naive.py":77:22)
#loc81 = loc("2d9pt_naive.py":79:20)
#loc82 = loc("2d9pt_naive.py":79:37)
#loc83 = loc("2d9pt_naive.py":79:40)
#loc84 = loc("2d9pt_naive.py":79:44)
#loc85 = loc("2d9pt_naive.py":79:62)
#loc86 = loc("2d9pt_naive.py":79:18)
#loc87 = loc("2d9pt_naive.py":80:21)
#loc88 = loc("2d9pt_naive.py":81:22)
#loc89 = loc("2d9pt_naive.py":83:20)
#loc90 = loc("2d9pt_naive.py":83:37)
#loc91 = loc("2d9pt_naive.py":83:40)
#loc92 = loc("2d9pt_naive.py":83:44)
#loc93 = loc("2d9pt_naive.py":83:62)
#loc94 = loc("2d9pt_naive.py":83:18)
#loc95 = loc("2d9pt_naive.py":84:21)
#loc96 = loc("2d9pt_naive.py":85:22)
#loc97 = loc("2d9pt_naive.py":87:19)
#loc98 = loc("2d9pt_naive.py":87:35)
#loc99 = loc("2d9pt_naive.py":87:38)
#loc100 = loc("2d9pt_naive.py":87:42)
#loc101 = loc("2d9pt_naive.py":87:60)
#loc102 = loc("2d9pt_naive.py":87:18)
#loc103 = loc("2d9pt_naive.py":88:21)
#loc104 = loc("2d9pt_naive.py":88:4)
#loc105 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":35:0)
#loc106 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":116:0)
#loc107 = loc(callsite(#loc1 at #loc5))
#loc108 = loc(callsite(#loc6 at #loc5))
#loc109 = loc(callsite(#loc7 at #loc5))
#loc110 = loc(callsite(#loc1 at #loc10))
#loc111 = loc(callsite(#loc6 at #loc10))
#loc112 = loc(callsite(#loc7 at #loc10))
#loc113 = loc(callsite(#loc25 at #loc26))


// -----// IR Dump Before TritonRewriteTensorPointer (triton-rewrite-tensor-pointer) ('builtin.module' operation) //----- //
#loc = loc("2d9pt_naive.py":18:0)
module {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc100)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc101)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc11)
    %9 = tt.splat %7 : i32 -> tensor<16xi32> loc(#loc12)
    %10 = arith.addi %9, %8 : tensor<16xi32> loc(#loc12)
    %11 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %12 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc14)
    %13 = tt.splat %11 : i32 -> tensor<16xi32> loc(#loc15)
    %14 = arith.addi %13, %12 : tensor<16xi32> loc(#loc15)
    %15 = arith.muli %5, %c16_i32 : i32 loc(#loc16)
    %16 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc17)
    %17 = tt.splat %15 : i32 -> tensor<16xi32> loc(#loc18)
    %18 = arith.addi %17, %16 : tensor<16xi32> loc(#loc18)
    %19 = arith.muli %6, %c16_i32 : i32 loc(#loc19)
    %20 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc20)
    %21 = tt.splat %19 : i32 -> tensor<16xi32> loc(#loc21)
    %22 = arith.addi %21, %20 : tensor<16xi32> loc(#loc21)
    %23 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc22)
    %24 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc23)
    %25 = arith.muli %23, %24 : tensor<16x1xi32> loc(#loc23)
    %26 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc24)
    %27 = tt.broadcast %25 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc24)
    %28 = tt.broadcast %26 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc24)
    %29 = arith.addi %27, %28 : tensor<16x16xi32> loc(#loc24)
    %30 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc25)
    %31 = arith.addi %29, %30 : tensor<16x16xi32> loc(#loc25)
    %32 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc26)
    %33 = tt.addptr %32, %31 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>> loc(#loc27)
    %35 = arith.addf %34, %cst : tensor<16x16xf16> loc(#loc28)
    %36 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc29)
    %37 = arith.addi %36, %cst_6 : tensor<16x1xi32> loc(#loc30)
    %38 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc31)
    %39 = arith.muli %37, %38 : tensor<16x1xi32> loc(#loc31)
    %40 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc32)
    %41 = tt.broadcast %39 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc32)
    %42 = tt.broadcast %40 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc32)
    %43 = arith.addi %41, %42 : tensor<16x16xi32> loc(#loc32)
    %44 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc33)
    %45 = arith.addi %43, %44 : tensor<16x16xi32> loc(#loc33)
    %46 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc34)
    %47 = tt.addptr %46, %45 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc34)
    %48 = tt.load %47 : tensor<16x16x!tt.ptr<f16>> loc(#loc35)
    %49 = arith.addf %35, %48 : tensor<16x16xf16> loc(#loc36)
    %50 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc37)
    %51 = arith.addi %50, %cst_5 : tensor<16x1xi32> loc(#loc38)
    %52 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc39)
    %53 = arith.muli %51, %52 : tensor<16x1xi32> loc(#loc39)
    %54 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc40)
    %55 = tt.broadcast %53 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc40)
    %56 = tt.broadcast %54 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc40)
    %57 = arith.addi %55, %56 : tensor<16x16xi32> loc(#loc40)
    %58 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc41)
    %59 = arith.addi %57, %58 : tensor<16x16xi32> loc(#loc41)
    %60 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc42)
    %61 = tt.addptr %60, %59 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc42)
    %62 = tt.load %61 : tensor<16x16x!tt.ptr<f16>> loc(#loc43)
    %63 = arith.addf %49, %62 : tensor<16x16xf16> loc(#loc44)
    %64 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc45)
    %65 = arith.addi %64, %cst_4 : tensor<16x1xi32> loc(#loc46)
    %66 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc47)
    %67 = arith.muli %65, %66 : tensor<16x1xi32> loc(#loc47)
    %68 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc48)
    %69 = tt.broadcast %67 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc48)
    %70 = tt.broadcast %68 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc48)
    %71 = arith.addi %69, %70 : tensor<16x16xi32> loc(#loc48)
    %72 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc49)
    %73 = arith.addi %71, %72 : tensor<16x16xi32> loc(#loc49)
    %74 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc50)
    %75 = tt.addptr %74, %73 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc50)
    %76 = tt.load %75 : tensor<16x16x!tt.ptr<f16>> loc(#loc51)
    %77 = arith.addf %63, %76 : tensor<16x16xf16> loc(#loc52)
    %78 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc53)
    %79 = arith.addi %78, %cst_3 : tensor<16x1xi32> loc(#loc54)
    %80 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc55)
    %81 = arith.muli %79, %80 : tensor<16x1xi32> loc(#loc55)
    %82 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc56)
    %83 = tt.broadcast %81 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc56)
    %84 = tt.broadcast %82 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc56)
    %85 = arith.addi %83, %84 : tensor<16x16xi32> loc(#loc56)
    %86 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc57)
    %87 = arith.addi %85, %86 : tensor<16x16xi32> loc(#loc57)
    %88 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc58)
    %89 = tt.addptr %88, %87 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc58)
    %90 = tt.load %89 : tensor<16x16x!tt.ptr<f16>> loc(#loc59)
    %91 = arith.addf %77, %90 : tensor<16x16xf16> loc(#loc60)
    %92 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc61)
    %93 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc62)
    %94 = arith.addi %92, %93 : tensor<16x1xi32> loc(#loc62)
    %95 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc63)
    %96 = arith.muli %94, %95 : tensor<16x1xi32> loc(#loc63)
    %97 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc64)
    %98 = tt.broadcast %96 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc64)
    %99 = tt.broadcast %97 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc64)
    %100 = arith.addi %98, %99 : tensor<16x16xi32> loc(#loc64)
    %101 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc65)
    %102 = tt.addptr %101, %100 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc65)
    %103 = tt.load %102 : tensor<16x16x!tt.ptr<f16>> loc(#loc66)
    %104 = arith.addf %91, %103 : tensor<16x16xf16> loc(#loc67)
    %105 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc68)
    %106 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc69)
    %107 = arith.addi %105, %106 : tensor<16x1xi32> loc(#loc69)
    %108 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc70)
    %109 = arith.muli %107, %108 : tensor<16x1xi32> loc(#loc70)
    %110 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc71)
    %111 = tt.broadcast %109 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc71)
    %112 = tt.broadcast %110 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc71)
    %113 = arith.addi %111, %112 : tensor<16x16xi32> loc(#loc71)
    %114 = arith.addi %113, %cst_2 : tensor<16x16xi32> loc(#loc72)
    %115 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc73)
    %116 = tt.addptr %115, %114 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc73)
    %117 = tt.load %116 : tensor<16x16x!tt.ptr<f16>> loc(#loc74)
    %118 = arith.addf %104, %117 : tensor<16x16xf16> loc(#loc75)
    %119 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc76)
    %120 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc77)
    %121 = arith.addi %119, %120 : tensor<16x1xi32> loc(#loc77)
    %122 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc78)
    %123 = arith.muli %121, %122 : tensor<16x1xi32> loc(#loc78)
    %124 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc79)
    %125 = tt.broadcast %123 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc79)
    %126 = tt.broadcast %124 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc79)
    %127 = arith.addi %125, %126 : tensor<16x16xi32> loc(#loc79)
    %128 = arith.addi %127, %cst_1 : tensor<16x16xi32> loc(#loc80)
    %129 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc81)
    %130 = tt.addptr %129, %128 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc81)
    %131 = tt.load %130 : tensor<16x16x!tt.ptr<f16>> loc(#loc82)
    %132 = arith.addf %118, %131 : tensor<16x16xf16> loc(#loc83)
    %133 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc84)
    %134 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc85)
    %135 = arith.addi %133, %134 : tensor<16x1xi32> loc(#loc85)
    %136 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc86)
    %137 = arith.muli %135, %136 : tensor<16x1xi32> loc(#loc86)
    %138 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc87)
    %139 = tt.broadcast %137 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc87)
    %140 = tt.broadcast %138 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc87)
    %141 = arith.addi %139, %140 : tensor<16x16xi32> loc(#loc87)
    %142 = arith.addi %141, %cst_0 : tensor<16x16xi32> loc(#loc88)
    %143 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc89)
    %144 = tt.addptr %143, %142 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc89)
    %145 = tt.load %144 : tensor<16x16x!tt.ptr<f16>> loc(#loc90)
    %146 = arith.addf %132, %145 : tensor<16x16xf16> loc(#loc91)
    %147 = tt.expand_dims %10 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc92)
    %148 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc93)
    %149 = arith.addi %147, %148 : tensor<16x1xi32> loc(#loc93)
    %150 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc94)
    %151 = arith.muli %149, %150 : tensor<16x1xi32> loc(#loc94)
    %152 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc95)
    %153 = tt.broadcast %151 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc95)
    %154 = tt.broadcast %152 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc95)
    %155 = arith.addi %153, %154 : tensor<16x16xi32> loc(#loc95)
    %156 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc96)
    %157 = arith.addi %155, %156 : tensor<16x16xi32> loc(#loc96)
    %158 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc97)
    %159 = tt.addptr %158, %157 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc97)
    tt.store %159, %146 : tensor<16x16x!tt.ptr<f16>> loc(#loc98)
    tt.return loc(#loc99)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:50)
#loc15 = loc("2d9pt_naive.py":40:37)
#loc16 = loc("2d9pt_naive.py":42:22)
#loc17 = loc("2d9pt_naive.py":42:50)
#loc18 = loc("2d9pt_naive.py":42:37)
#loc19 = loc("2d9pt_naive.py":43:22)
#loc20 = loc("2d9pt_naive.py":43:50)
#loc21 = loc("2d9pt_naive.py":43:37)
#loc22 = loc("2d9pt_naive.py":50:19)
#loc23 = loc("2d9pt_naive.py":50:36)
#loc24 = loc("2d9pt_naive.py":50:40)
#loc25 = loc("2d9pt_naive.py":50:56)
#loc26 = loc("2d9pt_naive.py":50:18)
#loc27 = loc("2d9pt_naive.py":51:21)
#loc28 = loc("2d9pt_naive.py":52:22)
#loc29 = loc("2d9pt_naive.py":54:20)
#loc30 = loc("2d9pt_naive.py":54:37)
#loc31 = loc("2d9pt_naive.py":54:40)
#loc32 = loc("2d9pt_naive.py":54:44)
#loc33 = loc("2d9pt_naive.py":54:60)
#loc34 = loc("2d9pt_naive.py":54:18)
#loc35 = loc("2d9pt_naive.py":55:21)
#loc36 = loc("2d9pt_naive.py":56:22)
#loc37 = loc("2d9pt_naive.py":58:20)
#loc38 = loc("2d9pt_naive.py":58:37)
#loc39 = loc("2d9pt_naive.py":58:40)
#loc40 = loc("2d9pt_naive.py":58:44)
#loc41 = loc("2d9pt_naive.py":58:60)
#loc42 = loc("2d9pt_naive.py":58:18)
#loc43 = loc("2d9pt_naive.py":59:21)
#loc44 = loc("2d9pt_naive.py":60:22)
#loc45 = loc("2d9pt_naive.py":62:20)
#loc46 = loc("2d9pt_naive.py":62:37)
#loc47 = loc("2d9pt_naive.py":62:40)
#loc48 = loc("2d9pt_naive.py":62:44)
#loc49 = loc("2d9pt_naive.py":62:60)
#loc50 = loc("2d9pt_naive.py":62:18)
#loc51 = loc("2d9pt_naive.py":63:21)
#loc52 = loc("2d9pt_naive.py":64:22)
#loc53 = loc("2d9pt_naive.py":66:20)
#loc54 = loc("2d9pt_naive.py":66:37)
#loc55 = loc("2d9pt_naive.py":66:40)
#loc56 = loc("2d9pt_naive.py":66:44)
#loc57 = loc("2d9pt_naive.py":66:60)
#loc58 = loc("2d9pt_naive.py":66:18)
#loc59 = loc("2d9pt_naive.py":67:21)
#loc60 = loc("2d9pt_naive.py":68:22)
#loc61 = loc("2d9pt_naive.py":71:20)
#loc62 = loc("2d9pt_naive.py":71:37)
#loc63 = loc("2d9pt_naive.py":71:40)
#loc64 = loc("2d9pt_naive.py":71:44)
#loc65 = loc("2d9pt_naive.py":71:18)
#loc66 = loc("2d9pt_naive.py":72:21)
#loc67 = loc("2d9pt_naive.py":73:22)
#loc68 = loc("2d9pt_naive.py":75:20)
#loc69 = loc("2d9pt_naive.py":75:37)
#loc70 = loc("2d9pt_naive.py":75:40)
#loc71 = loc("2d9pt_naive.py":75:44)
#loc72 = loc("2d9pt_naive.py":75:62)
#loc73 = loc("2d9pt_naive.py":75:18)
#loc74 = loc("2d9pt_naive.py":76:21)
#loc75 = loc("2d9pt_naive.py":77:22)
#loc76 = loc("2d9pt_naive.py":79:20)
#loc77 = loc("2d9pt_naive.py":79:37)
#loc78 = loc("2d9pt_naive.py":79:40)
#loc79 = loc("2d9pt_naive.py":79:44)
#loc80 = loc("2d9pt_naive.py":79:62)
#loc81 = loc("2d9pt_naive.py":79:18)
#loc82 = loc("2d9pt_naive.py":80:21)
#loc83 = loc("2d9pt_naive.py":81:22)
#loc84 = loc("2d9pt_naive.py":83:20)
#loc85 = loc("2d9pt_naive.py":83:37)
#loc86 = loc("2d9pt_naive.py":83:40)
#loc87 = loc("2d9pt_naive.py":83:44)
#loc88 = loc("2d9pt_naive.py":83:62)
#loc89 = loc("2d9pt_naive.py":83:18)
#loc90 = loc("2d9pt_naive.py":84:21)
#loc91 = loc("2d9pt_naive.py":85:22)
#loc92 = loc("2d9pt_naive.py":87:19)
#loc93 = loc("2d9pt_naive.py":87:35)
#loc94 = loc("2d9pt_naive.py":87:38)
#loc95 = loc("2d9pt_naive.py":87:42)
#loc96 = loc("2d9pt_naive.py":87:60)
#loc97 = loc("2d9pt_naive.py":87:18)
#loc98 = loc("2d9pt_naive.py":88:21)
#loc99 = loc("2d9pt_naive.py":88:4)
#loc100 = loc(callsite(#loc5 at #loc6))
#loc101 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before TritonCombineOps (triton-combine) ('builtin.module' operation) //----- //
#loc = loc("2d9pt_naive.py":18:0)
module {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc100)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc101)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc11)
    %9 = tt.splat %7 : i32 -> tensor<16xi32> loc(#loc12)
    %10 = arith.addi %9, %8 : tensor<16xi32> loc(#loc12)
    %11 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %12 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc14)
    %13 = tt.splat %11 : i32 -> tensor<16xi32> loc(#loc15)
    %14 = arith.addi %13, %12 : tensor<16xi32> loc(#loc15)
    %15 = arith.muli %5, %c16_i32 : i32 loc(#loc16)
    %16 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc17)
    %17 = tt.splat %15 : i32 -> tensor<16xi32> loc(#loc18)
    %18 = arith.addi %17, %16 : tensor<16xi32> loc(#loc18)
    %19 = arith.muli %6, %c16_i32 : i32 loc(#loc19)
    %20 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc20)
    %21 = tt.splat %19 : i32 -> tensor<16xi32> loc(#loc21)
    %22 = arith.addi %21, %20 : tensor<16xi32> loc(#loc21)
    %23 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc22)
    %24 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc23)
    %25 = arith.muli %23, %24 : tensor<16x1xi32> loc(#loc23)
    %26 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc24)
    %27 = tt.broadcast %25 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc24)
    %28 = tt.broadcast %26 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc24)
    %29 = arith.addi %27, %28 : tensor<16x16xi32> loc(#loc24)
    %30 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc25)
    %31 = arith.addi %29, %30 : tensor<16x16xi32> loc(#loc25)
    %32 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc26)
    %33 = tt.addptr %32, %31 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>> loc(#loc27)
    %35 = arith.addf %34, %cst : tensor<16x16xf16> loc(#loc28)
    %36 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc29)
    %37 = arith.addi %36, %cst_6 : tensor<16x1xi32> loc(#loc30)
    %38 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc31)
    %39 = arith.muli %37, %38 : tensor<16x1xi32> loc(#loc31)
    %40 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc32)
    %41 = tt.broadcast %39 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc32)
    %42 = tt.broadcast %40 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc32)
    %43 = arith.addi %41, %42 : tensor<16x16xi32> loc(#loc32)
    %44 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc33)
    %45 = arith.addi %43, %44 : tensor<16x16xi32> loc(#loc33)
    %46 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc34)
    %47 = tt.addptr %46, %45 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc34)
    %48 = tt.load %47 : tensor<16x16x!tt.ptr<f16>> loc(#loc35)
    %49 = arith.addf %35, %48 : tensor<16x16xf16> loc(#loc36)
    %50 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc37)
    %51 = arith.addi %50, %cst_5 : tensor<16x1xi32> loc(#loc38)
    %52 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc39)
    %53 = arith.muli %51, %52 : tensor<16x1xi32> loc(#loc39)
    %54 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc40)
    %55 = tt.broadcast %53 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc40)
    %56 = tt.broadcast %54 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc40)
    %57 = arith.addi %55, %56 : tensor<16x16xi32> loc(#loc40)
    %58 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc41)
    %59 = arith.addi %57, %58 : tensor<16x16xi32> loc(#loc41)
    %60 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc42)
    %61 = tt.addptr %60, %59 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc42)
    %62 = tt.load %61 : tensor<16x16x!tt.ptr<f16>> loc(#loc43)
    %63 = arith.addf %49, %62 : tensor<16x16xf16> loc(#loc44)
    %64 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc45)
    %65 = arith.addi %64, %cst_4 : tensor<16x1xi32> loc(#loc46)
    %66 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc47)
    %67 = arith.muli %65, %66 : tensor<16x1xi32> loc(#loc47)
    %68 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc48)
    %69 = tt.broadcast %67 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc48)
    %70 = tt.broadcast %68 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc48)
    %71 = arith.addi %69, %70 : tensor<16x16xi32> loc(#loc48)
    %72 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc49)
    %73 = arith.addi %71, %72 : tensor<16x16xi32> loc(#loc49)
    %74 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc50)
    %75 = tt.addptr %74, %73 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc50)
    %76 = tt.load %75 : tensor<16x16x!tt.ptr<f16>> loc(#loc51)
    %77 = arith.addf %63, %76 : tensor<16x16xf16> loc(#loc52)
    %78 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc53)
    %79 = arith.addi %78, %cst_3 : tensor<16x1xi32> loc(#loc54)
    %80 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc55)
    %81 = arith.muli %79, %80 : tensor<16x1xi32> loc(#loc55)
    %82 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc56)
    %83 = tt.broadcast %81 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc56)
    %84 = tt.broadcast %82 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc56)
    %85 = arith.addi %83, %84 : tensor<16x16xi32> loc(#loc56)
    %86 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc57)
    %87 = arith.addi %85, %86 : tensor<16x16xi32> loc(#loc57)
    %88 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc58)
    %89 = tt.addptr %88, %87 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc58)
    %90 = tt.load %89 : tensor<16x16x!tt.ptr<f16>> loc(#loc59)
    %91 = arith.addf %77, %90 : tensor<16x16xf16> loc(#loc60)
    %92 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc61)
    %93 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc62)
    %94 = arith.addi %92, %93 : tensor<16x1xi32> loc(#loc62)
    %95 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc63)
    %96 = arith.muli %94, %95 : tensor<16x1xi32> loc(#loc63)
    %97 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc64)
    %98 = tt.broadcast %96 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc64)
    %99 = tt.broadcast %97 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc64)
    %100 = arith.addi %98, %99 : tensor<16x16xi32> loc(#loc64)
    %101 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc65)
    %102 = tt.addptr %101, %100 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc65)
    %103 = tt.load %102 : tensor<16x16x!tt.ptr<f16>> loc(#loc66)
    %104 = arith.addf %91, %103 : tensor<16x16xf16> loc(#loc67)
    %105 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc68)
    %106 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc69)
    %107 = arith.addi %105, %106 : tensor<16x1xi32> loc(#loc69)
    %108 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc70)
    %109 = arith.muli %107, %108 : tensor<16x1xi32> loc(#loc70)
    %110 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc71)
    %111 = tt.broadcast %109 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc71)
    %112 = tt.broadcast %110 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc71)
    %113 = arith.addi %111, %112 : tensor<16x16xi32> loc(#loc71)
    %114 = arith.addi %113, %cst_2 : tensor<16x16xi32> loc(#loc72)
    %115 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc73)
    %116 = tt.addptr %115, %114 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc73)
    %117 = tt.load %116 : tensor<16x16x!tt.ptr<f16>> loc(#loc74)
    %118 = arith.addf %104, %117 : tensor<16x16xf16> loc(#loc75)
    %119 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc76)
    %120 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc77)
    %121 = arith.addi %119, %120 : tensor<16x1xi32> loc(#loc77)
    %122 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc78)
    %123 = arith.muli %121, %122 : tensor<16x1xi32> loc(#loc78)
    %124 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc79)
    %125 = tt.broadcast %123 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc79)
    %126 = tt.broadcast %124 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc79)
    %127 = arith.addi %125, %126 : tensor<16x16xi32> loc(#loc79)
    %128 = arith.addi %127, %cst_1 : tensor<16x16xi32> loc(#loc80)
    %129 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc81)
    %130 = tt.addptr %129, %128 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc81)
    %131 = tt.load %130 : tensor<16x16x!tt.ptr<f16>> loc(#loc82)
    %132 = arith.addf %118, %131 : tensor<16x16xf16> loc(#loc83)
    %133 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc84)
    %134 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc85)
    %135 = arith.addi %133, %134 : tensor<16x1xi32> loc(#loc85)
    %136 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc86)
    %137 = arith.muli %135, %136 : tensor<16x1xi32> loc(#loc86)
    %138 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc87)
    %139 = tt.broadcast %137 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc87)
    %140 = tt.broadcast %138 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc87)
    %141 = arith.addi %139, %140 : tensor<16x16xi32> loc(#loc87)
    %142 = arith.addi %141, %cst_0 : tensor<16x16xi32> loc(#loc88)
    %143 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc89)
    %144 = tt.addptr %143, %142 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc89)
    %145 = tt.load %144 : tensor<16x16x!tt.ptr<f16>> loc(#loc90)
    %146 = arith.addf %132, %145 : tensor<16x16xf16> loc(#loc91)
    %147 = tt.expand_dims %10 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc92)
    %148 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc93)
    %149 = arith.addi %147, %148 : tensor<16x1xi32> loc(#loc93)
    %150 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc94)
    %151 = arith.muli %149, %150 : tensor<16x1xi32> loc(#loc94)
    %152 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc95)
    %153 = tt.broadcast %151 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc95)
    %154 = tt.broadcast %152 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc95)
    %155 = arith.addi %153, %154 : tensor<16x16xi32> loc(#loc95)
    %156 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc96)
    %157 = arith.addi %155, %156 : tensor<16x16xi32> loc(#loc96)
    %158 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc97)
    %159 = tt.addptr %158, %157 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc97)
    tt.store %159, %146 : tensor<16x16x!tt.ptr<f16>> loc(#loc98)
    tt.return loc(#loc99)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:50)
#loc15 = loc("2d9pt_naive.py":40:37)
#loc16 = loc("2d9pt_naive.py":42:22)
#loc17 = loc("2d9pt_naive.py":42:50)
#loc18 = loc("2d9pt_naive.py":42:37)
#loc19 = loc("2d9pt_naive.py":43:22)
#loc20 = loc("2d9pt_naive.py":43:50)
#loc21 = loc("2d9pt_naive.py":43:37)
#loc22 = loc("2d9pt_naive.py":50:19)
#loc23 = loc("2d9pt_naive.py":50:36)
#loc24 = loc("2d9pt_naive.py":50:40)
#loc25 = loc("2d9pt_naive.py":50:56)
#loc26 = loc("2d9pt_naive.py":50:18)
#loc27 = loc("2d9pt_naive.py":51:21)
#loc28 = loc("2d9pt_naive.py":52:22)
#loc29 = loc("2d9pt_naive.py":54:20)
#loc30 = loc("2d9pt_naive.py":54:37)
#loc31 = loc("2d9pt_naive.py":54:40)
#loc32 = loc("2d9pt_naive.py":54:44)
#loc33 = loc("2d9pt_naive.py":54:60)
#loc34 = loc("2d9pt_naive.py":54:18)
#loc35 = loc("2d9pt_naive.py":55:21)
#loc36 = loc("2d9pt_naive.py":56:22)
#loc37 = loc("2d9pt_naive.py":58:20)
#loc38 = loc("2d9pt_naive.py":58:37)
#loc39 = loc("2d9pt_naive.py":58:40)
#loc40 = loc("2d9pt_naive.py":58:44)
#loc41 = loc("2d9pt_naive.py":58:60)
#loc42 = loc("2d9pt_naive.py":58:18)
#loc43 = loc("2d9pt_naive.py":59:21)
#loc44 = loc("2d9pt_naive.py":60:22)
#loc45 = loc("2d9pt_naive.py":62:20)
#loc46 = loc("2d9pt_naive.py":62:37)
#loc47 = loc("2d9pt_naive.py":62:40)
#loc48 = loc("2d9pt_naive.py":62:44)
#loc49 = loc("2d9pt_naive.py":62:60)
#loc50 = loc("2d9pt_naive.py":62:18)
#loc51 = loc("2d9pt_naive.py":63:21)
#loc52 = loc("2d9pt_naive.py":64:22)
#loc53 = loc("2d9pt_naive.py":66:20)
#loc54 = loc("2d9pt_naive.py":66:37)
#loc55 = loc("2d9pt_naive.py":66:40)
#loc56 = loc("2d9pt_naive.py":66:44)
#loc57 = loc("2d9pt_naive.py":66:60)
#loc58 = loc("2d9pt_naive.py":66:18)
#loc59 = loc("2d9pt_naive.py":67:21)
#loc60 = loc("2d9pt_naive.py":68:22)
#loc61 = loc("2d9pt_naive.py":71:20)
#loc62 = loc("2d9pt_naive.py":71:37)
#loc63 = loc("2d9pt_naive.py":71:40)
#loc64 = loc("2d9pt_naive.py":71:44)
#loc65 = loc("2d9pt_naive.py":71:18)
#loc66 = loc("2d9pt_naive.py":72:21)
#loc67 = loc("2d9pt_naive.py":73:22)
#loc68 = loc("2d9pt_naive.py":75:20)
#loc69 = loc("2d9pt_naive.py":75:37)
#loc70 = loc("2d9pt_naive.py":75:40)
#loc71 = loc("2d9pt_naive.py":75:44)
#loc72 = loc("2d9pt_naive.py":75:62)
#loc73 = loc("2d9pt_naive.py":75:18)
#loc74 = loc("2d9pt_naive.py":76:21)
#loc75 = loc("2d9pt_naive.py":77:22)
#loc76 = loc("2d9pt_naive.py":79:20)
#loc77 = loc("2d9pt_naive.py":79:37)
#loc78 = loc("2d9pt_naive.py":79:40)
#loc79 = loc("2d9pt_naive.py":79:44)
#loc80 = loc("2d9pt_naive.py":79:62)
#loc81 = loc("2d9pt_naive.py":79:18)
#loc82 = loc("2d9pt_naive.py":80:21)
#loc83 = loc("2d9pt_naive.py":81:22)
#loc84 = loc("2d9pt_naive.py":83:20)
#loc85 = loc("2d9pt_naive.py":83:37)
#loc86 = loc("2d9pt_naive.py":83:40)
#loc87 = loc("2d9pt_naive.py":83:44)
#loc88 = loc("2d9pt_naive.py":83:62)
#loc89 = loc("2d9pt_naive.py":83:18)
#loc90 = loc("2d9pt_naive.py":84:21)
#loc91 = loc("2d9pt_naive.py":85:22)
#loc92 = loc("2d9pt_naive.py":87:19)
#loc93 = loc("2d9pt_naive.py":87:35)
#loc94 = loc("2d9pt_naive.py":87:38)
#loc95 = loc("2d9pt_naive.py":87:42)
#loc96 = loc("2d9pt_naive.py":87:60)
#loc97 = loc("2d9pt_naive.py":87:18)
#loc98 = loc("2d9pt_naive.py":88:21)
#loc99 = loc("2d9pt_naive.py":88:4)
#loc100 = loc(callsite(#loc5 at #loc6))
#loc101 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("2d9pt_naive.py":18:0)
module {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc100)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc101)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc11)
    %9 = tt.splat %7 : i32 -> tensor<16xi32> loc(#loc12)
    %10 = arith.addi %9, %8 : tensor<16xi32> loc(#loc12)
    %11 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %12 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc14)
    %13 = tt.splat %11 : i32 -> tensor<16xi32> loc(#loc15)
    %14 = arith.addi %13, %12 : tensor<16xi32> loc(#loc15)
    %15 = arith.muli %5, %c16_i32 : i32 loc(#loc16)
    %16 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc17)
    %17 = tt.splat %15 : i32 -> tensor<16xi32> loc(#loc18)
    %18 = arith.addi %17, %16 : tensor<16xi32> loc(#loc18)
    %19 = arith.muli %6, %c16_i32 : i32 loc(#loc19)
    %20 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc20)
    %21 = tt.splat %19 : i32 -> tensor<16xi32> loc(#loc21)
    %22 = arith.addi %21, %20 : tensor<16xi32> loc(#loc21)
    %23 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc22)
    %24 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc23)
    %25 = arith.muli %23, %24 : tensor<16x1xi32> loc(#loc23)
    %26 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc24)
    %27 = tt.broadcast %25 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc24)
    %28 = tt.broadcast %26 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc24)
    %29 = arith.addi %27, %28 : tensor<16x16xi32> loc(#loc24)
    %30 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc25)
    %31 = arith.addi %29, %30 : tensor<16x16xi32> loc(#loc25)
    %32 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc26)
    %33 = tt.addptr %32, %31 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>> loc(#loc27)
    %35 = arith.addf %34, %cst : tensor<16x16xf16> loc(#loc28)
    %36 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc29)
    %37 = arith.addi %36, %cst_6 : tensor<16x1xi32> loc(#loc30)
    %38 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc31)
    %39 = arith.muli %37, %38 : tensor<16x1xi32> loc(#loc31)
    %40 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc32)
    %41 = tt.broadcast %39 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc32)
    %42 = tt.broadcast %40 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc32)
    %43 = arith.addi %41, %42 : tensor<16x16xi32> loc(#loc32)
    %44 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc33)
    %45 = arith.addi %43, %44 : tensor<16x16xi32> loc(#loc33)
    %46 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc34)
    %47 = tt.addptr %46, %45 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc34)
    %48 = tt.load %47 : tensor<16x16x!tt.ptr<f16>> loc(#loc35)
    %49 = arith.addf %35, %48 : tensor<16x16xf16> loc(#loc36)
    %50 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc37)
    %51 = arith.addi %50, %cst_5 : tensor<16x1xi32> loc(#loc38)
    %52 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc39)
    %53 = arith.muli %51, %52 : tensor<16x1xi32> loc(#loc39)
    %54 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc40)
    %55 = tt.broadcast %53 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc40)
    %56 = tt.broadcast %54 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc40)
    %57 = arith.addi %55, %56 : tensor<16x16xi32> loc(#loc40)
    %58 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc41)
    %59 = arith.addi %57, %58 : tensor<16x16xi32> loc(#loc41)
    %60 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc42)
    %61 = tt.addptr %60, %59 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc42)
    %62 = tt.load %61 : tensor<16x16x!tt.ptr<f16>> loc(#loc43)
    %63 = arith.addf %49, %62 : tensor<16x16xf16> loc(#loc44)
    %64 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc45)
    %65 = arith.addi %64, %cst_4 : tensor<16x1xi32> loc(#loc46)
    %66 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc47)
    %67 = arith.muli %65, %66 : tensor<16x1xi32> loc(#loc47)
    %68 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc48)
    %69 = tt.broadcast %67 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc48)
    %70 = tt.broadcast %68 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc48)
    %71 = arith.addi %69, %70 : tensor<16x16xi32> loc(#loc48)
    %72 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc49)
    %73 = arith.addi %71, %72 : tensor<16x16xi32> loc(#loc49)
    %74 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc50)
    %75 = tt.addptr %74, %73 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc50)
    %76 = tt.load %75 : tensor<16x16x!tt.ptr<f16>> loc(#loc51)
    %77 = arith.addf %63, %76 : tensor<16x16xf16> loc(#loc52)
    %78 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc53)
    %79 = arith.addi %78, %cst_3 : tensor<16x1xi32> loc(#loc54)
    %80 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc55)
    %81 = arith.muli %79, %80 : tensor<16x1xi32> loc(#loc55)
    %82 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc56)
    %83 = tt.broadcast %81 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc56)
    %84 = tt.broadcast %82 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc56)
    %85 = arith.addi %83, %84 : tensor<16x16xi32> loc(#loc56)
    %86 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc57)
    %87 = arith.addi %85, %86 : tensor<16x16xi32> loc(#loc57)
    %88 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc58)
    %89 = tt.addptr %88, %87 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc58)
    %90 = tt.load %89 : tensor<16x16x!tt.ptr<f16>> loc(#loc59)
    %91 = arith.addf %77, %90 : tensor<16x16xf16> loc(#loc60)
    %92 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc61)
    %93 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc62)
    %94 = arith.addi %92, %93 : tensor<16x1xi32> loc(#loc62)
    %95 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc63)
    %96 = arith.muli %94, %95 : tensor<16x1xi32> loc(#loc63)
    %97 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc64)
    %98 = tt.broadcast %96 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc64)
    %99 = tt.broadcast %97 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc64)
    %100 = arith.addi %98, %99 : tensor<16x16xi32> loc(#loc64)
    %101 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc65)
    %102 = tt.addptr %101, %100 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc65)
    %103 = tt.load %102 : tensor<16x16x!tt.ptr<f16>> loc(#loc66)
    %104 = arith.addf %91, %103 : tensor<16x16xf16> loc(#loc67)
    %105 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc68)
    %106 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc69)
    %107 = arith.addi %105, %106 : tensor<16x1xi32> loc(#loc69)
    %108 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc70)
    %109 = arith.muli %107, %108 : tensor<16x1xi32> loc(#loc70)
    %110 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc71)
    %111 = tt.broadcast %109 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc71)
    %112 = tt.broadcast %110 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc71)
    %113 = arith.addi %111, %112 : tensor<16x16xi32> loc(#loc71)
    %114 = arith.addi %113, %cst_2 : tensor<16x16xi32> loc(#loc72)
    %115 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc73)
    %116 = tt.addptr %115, %114 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc73)
    %117 = tt.load %116 : tensor<16x16x!tt.ptr<f16>> loc(#loc74)
    %118 = arith.addf %104, %117 : tensor<16x16xf16> loc(#loc75)
    %119 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc76)
    %120 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc77)
    %121 = arith.addi %119, %120 : tensor<16x1xi32> loc(#loc77)
    %122 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc78)
    %123 = arith.muli %121, %122 : tensor<16x1xi32> loc(#loc78)
    %124 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc79)
    %125 = tt.broadcast %123 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc79)
    %126 = tt.broadcast %124 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc79)
    %127 = arith.addi %125, %126 : tensor<16x16xi32> loc(#loc79)
    %128 = arith.addi %127, %cst_1 : tensor<16x16xi32> loc(#loc80)
    %129 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc81)
    %130 = tt.addptr %129, %128 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc81)
    %131 = tt.load %130 : tensor<16x16x!tt.ptr<f16>> loc(#loc82)
    %132 = arith.addf %118, %131 : tensor<16x16xf16> loc(#loc83)
    %133 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc84)
    %134 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc85)
    %135 = arith.addi %133, %134 : tensor<16x1xi32> loc(#loc85)
    %136 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc86)
    %137 = arith.muli %135, %136 : tensor<16x1xi32> loc(#loc86)
    %138 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc87)
    %139 = tt.broadcast %137 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc87)
    %140 = tt.broadcast %138 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc87)
    %141 = arith.addi %139, %140 : tensor<16x16xi32> loc(#loc87)
    %142 = arith.addi %141, %cst_0 : tensor<16x16xi32> loc(#loc88)
    %143 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc89)
    %144 = tt.addptr %143, %142 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc89)
    %145 = tt.load %144 : tensor<16x16x!tt.ptr<f16>> loc(#loc90)
    %146 = arith.addf %132, %145 : tensor<16x16xf16> loc(#loc91)
    %147 = tt.expand_dims %10 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc92)
    %148 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc93)
    %149 = arith.addi %147, %148 : tensor<16x1xi32> loc(#loc93)
    %150 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc94)
    %151 = arith.muli %149, %150 : tensor<16x1xi32> loc(#loc94)
    %152 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc95)
    %153 = tt.broadcast %151 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc95)
    %154 = tt.broadcast %152 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc95)
    %155 = arith.addi %153, %154 : tensor<16x16xi32> loc(#loc95)
    %156 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc96)
    %157 = arith.addi %155, %156 : tensor<16x16xi32> loc(#loc96)
    %158 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc97)
    %159 = tt.addptr %158, %157 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc97)
    tt.store %159, %146 : tensor<16x16x!tt.ptr<f16>> loc(#loc98)
    tt.return loc(#loc99)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:50)
#loc15 = loc("2d9pt_naive.py":40:37)
#loc16 = loc("2d9pt_naive.py":42:22)
#loc17 = loc("2d9pt_naive.py":42:50)
#loc18 = loc("2d9pt_naive.py":42:37)
#loc19 = loc("2d9pt_naive.py":43:22)
#loc20 = loc("2d9pt_naive.py":43:50)
#loc21 = loc("2d9pt_naive.py":43:37)
#loc22 = loc("2d9pt_naive.py":50:19)
#loc23 = loc("2d9pt_naive.py":50:36)
#loc24 = loc("2d9pt_naive.py":50:40)
#loc25 = loc("2d9pt_naive.py":50:56)
#loc26 = loc("2d9pt_naive.py":50:18)
#loc27 = loc("2d9pt_naive.py":51:21)
#loc28 = loc("2d9pt_naive.py":52:22)
#loc29 = loc("2d9pt_naive.py":54:20)
#loc30 = loc("2d9pt_naive.py":54:37)
#loc31 = loc("2d9pt_naive.py":54:40)
#loc32 = loc("2d9pt_naive.py":54:44)
#loc33 = loc("2d9pt_naive.py":54:60)
#loc34 = loc("2d9pt_naive.py":54:18)
#loc35 = loc("2d9pt_naive.py":55:21)
#loc36 = loc("2d9pt_naive.py":56:22)
#loc37 = loc("2d9pt_naive.py":58:20)
#loc38 = loc("2d9pt_naive.py":58:37)
#loc39 = loc("2d9pt_naive.py":58:40)
#loc40 = loc("2d9pt_naive.py":58:44)
#loc41 = loc("2d9pt_naive.py":58:60)
#loc42 = loc("2d9pt_naive.py":58:18)
#loc43 = loc("2d9pt_naive.py":59:21)
#loc44 = loc("2d9pt_naive.py":60:22)
#loc45 = loc("2d9pt_naive.py":62:20)
#loc46 = loc("2d9pt_naive.py":62:37)
#loc47 = loc("2d9pt_naive.py":62:40)
#loc48 = loc("2d9pt_naive.py":62:44)
#loc49 = loc("2d9pt_naive.py":62:60)
#loc50 = loc("2d9pt_naive.py":62:18)
#loc51 = loc("2d9pt_naive.py":63:21)
#loc52 = loc("2d9pt_naive.py":64:22)
#loc53 = loc("2d9pt_naive.py":66:20)
#loc54 = loc("2d9pt_naive.py":66:37)
#loc55 = loc("2d9pt_naive.py":66:40)
#loc56 = loc("2d9pt_naive.py":66:44)
#loc57 = loc("2d9pt_naive.py":66:60)
#loc58 = loc("2d9pt_naive.py":66:18)
#loc59 = loc("2d9pt_naive.py":67:21)
#loc60 = loc("2d9pt_naive.py":68:22)
#loc61 = loc("2d9pt_naive.py":71:20)
#loc62 = loc("2d9pt_naive.py":71:37)
#loc63 = loc("2d9pt_naive.py":71:40)
#loc64 = loc("2d9pt_naive.py":71:44)
#loc65 = loc("2d9pt_naive.py":71:18)
#loc66 = loc("2d9pt_naive.py":72:21)
#loc67 = loc("2d9pt_naive.py":73:22)
#loc68 = loc("2d9pt_naive.py":75:20)
#loc69 = loc("2d9pt_naive.py":75:37)
#loc70 = loc("2d9pt_naive.py":75:40)
#loc71 = loc("2d9pt_naive.py":75:44)
#loc72 = loc("2d9pt_naive.py":75:62)
#loc73 = loc("2d9pt_naive.py":75:18)
#loc74 = loc("2d9pt_naive.py":76:21)
#loc75 = loc("2d9pt_naive.py":77:22)
#loc76 = loc("2d9pt_naive.py":79:20)
#loc77 = loc("2d9pt_naive.py":79:37)
#loc78 = loc("2d9pt_naive.py":79:40)
#loc79 = loc("2d9pt_naive.py":79:44)
#loc80 = loc("2d9pt_naive.py":79:62)
#loc81 = loc("2d9pt_naive.py":79:18)
#loc82 = loc("2d9pt_naive.py":80:21)
#loc83 = loc("2d9pt_naive.py":81:22)
#loc84 = loc("2d9pt_naive.py":83:20)
#loc85 = loc("2d9pt_naive.py":83:37)
#loc86 = loc("2d9pt_naive.py":83:40)
#loc87 = loc("2d9pt_naive.py":83:44)
#loc88 = loc("2d9pt_naive.py":83:62)
#loc89 = loc("2d9pt_naive.py":83:18)
#loc90 = loc("2d9pt_naive.py":84:21)
#loc91 = loc("2d9pt_naive.py":85:22)
#loc92 = loc("2d9pt_naive.py":87:19)
#loc93 = loc("2d9pt_naive.py":87:35)
#loc94 = loc("2d9pt_naive.py":87:38)
#loc95 = loc("2d9pt_naive.py":87:42)
#loc96 = loc("2d9pt_naive.py":87:60)
#loc97 = loc("2d9pt_naive.py":87:18)
#loc98 = loc("2d9pt_naive.py":88:21)
#loc99 = loc("2d9pt_naive.py":88:4)
#loc100 = loc(callsite(#loc5 at #loc6))
#loc101 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before TritonReorderBroadcast (triton-reorder-broadcast) ('builtin.module' operation) //----- //
#loc = loc("2d9pt_naive.py":18:0)
module {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc100)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc101)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc11)
    %9 = tt.splat %7 : i32 -> tensor<16xi32> loc(#loc12)
    %10 = arith.addi %9, %8 : tensor<16xi32> loc(#loc12)
    %11 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %12 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc14)
    %13 = tt.splat %11 : i32 -> tensor<16xi32> loc(#loc15)
    %14 = arith.addi %13, %12 : tensor<16xi32> loc(#loc15)
    %15 = arith.muli %5, %c16_i32 : i32 loc(#loc16)
    %16 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc17)
    %17 = tt.splat %15 : i32 -> tensor<16xi32> loc(#loc18)
    %18 = arith.addi %17, %16 : tensor<16xi32> loc(#loc18)
    %19 = arith.muli %6, %c16_i32 : i32 loc(#loc19)
    %20 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc20)
    %21 = tt.splat %19 : i32 -> tensor<16xi32> loc(#loc21)
    %22 = arith.addi %21, %20 : tensor<16xi32> loc(#loc21)
    %23 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc22)
    %24 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc23)
    %25 = arith.muli %23, %24 : tensor<16x1xi32> loc(#loc23)
    %26 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc24)
    %27 = tt.broadcast %25 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc24)
    %28 = tt.broadcast %26 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc24)
    %29 = arith.addi %27, %28 : tensor<16x16xi32> loc(#loc24)
    %30 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc25)
    %31 = arith.addi %29, %30 : tensor<16x16xi32> loc(#loc25)
    %32 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc26)
    %33 = tt.addptr %32, %31 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>> loc(#loc27)
    %35 = arith.addf %34, %cst : tensor<16x16xf16> loc(#loc28)
    %36 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc29)
    %37 = arith.addi %36, %cst_6 : tensor<16x1xi32> loc(#loc30)
    %38 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc31)
    %39 = arith.muli %37, %38 : tensor<16x1xi32> loc(#loc31)
    %40 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc32)
    %41 = tt.broadcast %39 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc32)
    %42 = tt.broadcast %40 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc32)
    %43 = arith.addi %41, %42 : tensor<16x16xi32> loc(#loc32)
    %44 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc33)
    %45 = arith.addi %43, %44 : tensor<16x16xi32> loc(#loc33)
    %46 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc34)
    %47 = tt.addptr %46, %45 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc34)
    %48 = tt.load %47 : tensor<16x16x!tt.ptr<f16>> loc(#loc35)
    %49 = arith.addf %35, %48 : tensor<16x16xf16> loc(#loc36)
    %50 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc37)
    %51 = arith.addi %50, %cst_5 : tensor<16x1xi32> loc(#loc38)
    %52 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc39)
    %53 = arith.muli %51, %52 : tensor<16x1xi32> loc(#loc39)
    %54 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc40)
    %55 = tt.broadcast %53 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc40)
    %56 = tt.broadcast %54 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc40)
    %57 = arith.addi %55, %56 : tensor<16x16xi32> loc(#loc40)
    %58 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc41)
    %59 = arith.addi %57, %58 : tensor<16x16xi32> loc(#loc41)
    %60 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc42)
    %61 = tt.addptr %60, %59 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc42)
    %62 = tt.load %61 : tensor<16x16x!tt.ptr<f16>> loc(#loc43)
    %63 = arith.addf %49, %62 : tensor<16x16xf16> loc(#loc44)
    %64 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc45)
    %65 = arith.addi %64, %cst_4 : tensor<16x1xi32> loc(#loc46)
    %66 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc47)
    %67 = arith.muli %65, %66 : tensor<16x1xi32> loc(#loc47)
    %68 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc48)
    %69 = tt.broadcast %67 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc48)
    %70 = tt.broadcast %68 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc48)
    %71 = arith.addi %69, %70 : tensor<16x16xi32> loc(#loc48)
    %72 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc49)
    %73 = arith.addi %71, %72 : tensor<16x16xi32> loc(#loc49)
    %74 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc50)
    %75 = tt.addptr %74, %73 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc50)
    %76 = tt.load %75 : tensor<16x16x!tt.ptr<f16>> loc(#loc51)
    %77 = arith.addf %63, %76 : tensor<16x16xf16> loc(#loc52)
    %78 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc53)
    %79 = arith.addi %78, %cst_3 : tensor<16x1xi32> loc(#loc54)
    %80 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc55)
    %81 = arith.muli %79, %80 : tensor<16x1xi32> loc(#loc55)
    %82 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc56)
    %83 = tt.broadcast %81 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc56)
    %84 = tt.broadcast %82 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc56)
    %85 = arith.addi %83, %84 : tensor<16x16xi32> loc(#loc56)
    %86 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc57)
    %87 = arith.addi %85, %86 : tensor<16x16xi32> loc(#loc57)
    %88 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc58)
    %89 = tt.addptr %88, %87 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc58)
    %90 = tt.load %89 : tensor<16x16x!tt.ptr<f16>> loc(#loc59)
    %91 = arith.addf %77, %90 : tensor<16x16xf16> loc(#loc60)
    %92 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc61)
    %93 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc62)
    %94 = arith.addi %92, %93 : tensor<16x1xi32> loc(#loc62)
    %95 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc63)
    %96 = arith.muli %94, %95 : tensor<16x1xi32> loc(#loc63)
    %97 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc64)
    %98 = tt.broadcast %96 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc64)
    %99 = tt.broadcast %97 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc64)
    %100 = arith.addi %98, %99 : tensor<16x16xi32> loc(#loc64)
    %101 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc65)
    %102 = tt.addptr %101, %100 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc65)
    %103 = tt.load %102 : tensor<16x16x!tt.ptr<f16>> loc(#loc66)
    %104 = arith.addf %91, %103 : tensor<16x16xf16> loc(#loc67)
    %105 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc68)
    %106 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc69)
    %107 = arith.addi %105, %106 : tensor<16x1xi32> loc(#loc69)
    %108 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc70)
    %109 = arith.muli %107, %108 : tensor<16x1xi32> loc(#loc70)
    %110 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc71)
    %111 = tt.broadcast %109 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc71)
    %112 = tt.broadcast %110 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc71)
    %113 = arith.addi %111, %112 : tensor<16x16xi32> loc(#loc71)
    %114 = arith.addi %113, %cst_2 : tensor<16x16xi32> loc(#loc72)
    %115 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc73)
    %116 = tt.addptr %115, %114 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc73)
    %117 = tt.load %116 : tensor<16x16x!tt.ptr<f16>> loc(#loc74)
    %118 = arith.addf %104, %117 : tensor<16x16xf16> loc(#loc75)
    %119 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc76)
    %120 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc77)
    %121 = arith.addi %119, %120 : tensor<16x1xi32> loc(#loc77)
    %122 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc78)
    %123 = arith.muli %121, %122 : tensor<16x1xi32> loc(#loc78)
    %124 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc79)
    %125 = tt.broadcast %123 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc79)
    %126 = tt.broadcast %124 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc79)
    %127 = arith.addi %125, %126 : tensor<16x16xi32> loc(#loc79)
    %128 = arith.addi %127, %cst_1 : tensor<16x16xi32> loc(#loc80)
    %129 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc81)
    %130 = tt.addptr %129, %128 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc81)
    %131 = tt.load %130 : tensor<16x16x!tt.ptr<f16>> loc(#loc82)
    %132 = arith.addf %118, %131 : tensor<16x16xf16> loc(#loc83)
    %133 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc84)
    %134 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc85)
    %135 = arith.addi %133, %134 : tensor<16x1xi32> loc(#loc85)
    %136 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc86)
    %137 = arith.muli %135, %136 : tensor<16x1xi32> loc(#loc86)
    %138 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc87)
    %139 = tt.broadcast %137 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc87)
    %140 = tt.broadcast %138 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc87)
    %141 = arith.addi %139, %140 : tensor<16x16xi32> loc(#loc87)
    %142 = arith.addi %141, %cst_0 : tensor<16x16xi32> loc(#loc88)
    %143 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc89)
    %144 = tt.addptr %143, %142 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc89)
    %145 = tt.load %144 : tensor<16x16x!tt.ptr<f16>> loc(#loc90)
    %146 = arith.addf %132, %145 : tensor<16x16xf16> loc(#loc91)
    %147 = tt.expand_dims %10 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc92)
    %148 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc93)
    %149 = arith.addi %147, %148 : tensor<16x1xi32> loc(#loc93)
    %150 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc94)
    %151 = arith.muli %149, %150 : tensor<16x1xi32> loc(#loc94)
    %152 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc95)
    %153 = tt.broadcast %151 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc95)
    %154 = tt.broadcast %152 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc95)
    %155 = arith.addi %153, %154 : tensor<16x16xi32> loc(#loc95)
    %156 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc96)
    %157 = arith.addi %155, %156 : tensor<16x16xi32> loc(#loc96)
    %158 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc97)
    %159 = tt.addptr %158, %157 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc97)
    tt.store %159, %146 : tensor<16x16x!tt.ptr<f16>> loc(#loc98)
    tt.return loc(#loc99)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:50)
#loc15 = loc("2d9pt_naive.py":40:37)
#loc16 = loc("2d9pt_naive.py":42:22)
#loc17 = loc("2d9pt_naive.py":42:50)
#loc18 = loc("2d9pt_naive.py":42:37)
#loc19 = loc("2d9pt_naive.py":43:22)
#loc20 = loc("2d9pt_naive.py":43:50)
#loc21 = loc("2d9pt_naive.py":43:37)
#loc22 = loc("2d9pt_naive.py":50:19)
#loc23 = loc("2d9pt_naive.py":50:36)
#loc24 = loc("2d9pt_naive.py":50:40)
#loc25 = loc("2d9pt_naive.py":50:56)
#loc26 = loc("2d9pt_naive.py":50:18)
#loc27 = loc("2d9pt_naive.py":51:21)
#loc28 = loc("2d9pt_naive.py":52:22)
#loc29 = loc("2d9pt_naive.py":54:20)
#loc30 = loc("2d9pt_naive.py":54:37)
#loc31 = loc("2d9pt_naive.py":54:40)
#loc32 = loc("2d9pt_naive.py":54:44)
#loc33 = loc("2d9pt_naive.py":54:60)
#loc34 = loc("2d9pt_naive.py":54:18)
#loc35 = loc("2d9pt_naive.py":55:21)
#loc36 = loc("2d9pt_naive.py":56:22)
#loc37 = loc("2d9pt_naive.py":58:20)
#loc38 = loc("2d9pt_naive.py":58:37)
#loc39 = loc("2d9pt_naive.py":58:40)
#loc40 = loc("2d9pt_naive.py":58:44)
#loc41 = loc("2d9pt_naive.py":58:60)
#loc42 = loc("2d9pt_naive.py":58:18)
#loc43 = loc("2d9pt_naive.py":59:21)
#loc44 = loc("2d9pt_naive.py":60:22)
#loc45 = loc("2d9pt_naive.py":62:20)
#loc46 = loc("2d9pt_naive.py":62:37)
#loc47 = loc("2d9pt_naive.py":62:40)
#loc48 = loc("2d9pt_naive.py":62:44)
#loc49 = loc("2d9pt_naive.py":62:60)
#loc50 = loc("2d9pt_naive.py":62:18)
#loc51 = loc("2d9pt_naive.py":63:21)
#loc52 = loc("2d9pt_naive.py":64:22)
#loc53 = loc("2d9pt_naive.py":66:20)
#loc54 = loc("2d9pt_naive.py":66:37)
#loc55 = loc("2d9pt_naive.py":66:40)
#loc56 = loc("2d9pt_naive.py":66:44)
#loc57 = loc("2d9pt_naive.py":66:60)
#loc58 = loc("2d9pt_naive.py":66:18)
#loc59 = loc("2d9pt_naive.py":67:21)
#loc60 = loc("2d9pt_naive.py":68:22)
#loc61 = loc("2d9pt_naive.py":71:20)
#loc62 = loc("2d9pt_naive.py":71:37)
#loc63 = loc("2d9pt_naive.py":71:40)
#loc64 = loc("2d9pt_naive.py":71:44)
#loc65 = loc("2d9pt_naive.py":71:18)
#loc66 = loc("2d9pt_naive.py":72:21)
#loc67 = loc("2d9pt_naive.py":73:22)
#loc68 = loc("2d9pt_naive.py":75:20)
#loc69 = loc("2d9pt_naive.py":75:37)
#loc70 = loc("2d9pt_naive.py":75:40)
#loc71 = loc("2d9pt_naive.py":75:44)
#loc72 = loc("2d9pt_naive.py":75:62)
#loc73 = loc("2d9pt_naive.py":75:18)
#loc74 = loc("2d9pt_naive.py":76:21)
#loc75 = loc("2d9pt_naive.py":77:22)
#loc76 = loc("2d9pt_naive.py":79:20)
#loc77 = loc("2d9pt_naive.py":79:37)
#loc78 = loc("2d9pt_naive.py":79:40)
#loc79 = loc("2d9pt_naive.py":79:44)
#loc80 = loc("2d9pt_naive.py":79:62)
#loc81 = loc("2d9pt_naive.py":79:18)
#loc82 = loc("2d9pt_naive.py":80:21)
#loc83 = loc("2d9pt_naive.py":81:22)
#loc84 = loc("2d9pt_naive.py":83:20)
#loc85 = loc("2d9pt_naive.py":83:37)
#loc86 = loc("2d9pt_naive.py":83:40)
#loc87 = loc("2d9pt_naive.py":83:44)
#loc88 = loc("2d9pt_naive.py":83:62)
#loc89 = loc("2d9pt_naive.py":83:18)
#loc90 = loc("2d9pt_naive.py":84:21)
#loc91 = loc("2d9pt_naive.py":85:22)
#loc92 = loc("2d9pt_naive.py":87:19)
#loc93 = loc("2d9pt_naive.py":87:35)
#loc94 = loc("2d9pt_naive.py":87:38)
#loc95 = loc("2d9pt_naive.py":87:42)
#loc96 = loc("2d9pt_naive.py":87:60)
#loc97 = loc("2d9pt_naive.py":87:18)
#loc98 = loc("2d9pt_naive.py":88:21)
#loc99 = loc("2d9pt_naive.py":88:4)
#loc100 = loc(callsite(#loc5 at #loc6))
#loc101 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("2d9pt_naive.py":18:0)
module {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc100)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc101)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc11)
    %9 = tt.splat %7 : i32 -> tensor<16xi32> loc(#loc12)
    %10 = arith.addi %9, %8 : tensor<16xi32> loc(#loc12)
    %11 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %12 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc14)
    %13 = tt.splat %11 : i32 -> tensor<16xi32> loc(#loc15)
    %14 = arith.addi %13, %12 : tensor<16xi32> loc(#loc15)
    %15 = arith.muli %5, %c16_i32 : i32 loc(#loc16)
    %16 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc17)
    %17 = tt.splat %15 : i32 -> tensor<16xi32> loc(#loc18)
    %18 = arith.addi %17, %16 : tensor<16xi32> loc(#loc18)
    %19 = arith.muli %6, %c16_i32 : i32 loc(#loc19)
    %20 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc20)
    %21 = tt.splat %19 : i32 -> tensor<16xi32> loc(#loc21)
    %22 = arith.addi %21, %20 : tensor<16xi32> loc(#loc21)
    %23 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc22)
    %24 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc23)
    %25 = arith.muli %23, %24 : tensor<16x1xi32> loc(#loc23)
    %26 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc24)
    %27 = tt.broadcast %25 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc24)
    %28 = tt.broadcast %26 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc24)
    %29 = arith.addi %27, %28 : tensor<16x16xi32> loc(#loc24)
    %30 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc25)
    %31 = arith.addi %29, %30 : tensor<16x16xi32> loc(#loc25)
    %32 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc26)
    %33 = tt.addptr %32, %31 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>> loc(#loc27)
    %35 = arith.addf %34, %cst : tensor<16x16xf16> loc(#loc28)
    %36 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc29)
    %37 = arith.addi %36, %cst_6 : tensor<16x1xi32> loc(#loc30)
    %38 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc31)
    %39 = arith.muli %37, %38 : tensor<16x1xi32> loc(#loc31)
    %40 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc32)
    %41 = tt.broadcast %39 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc32)
    %42 = tt.broadcast %40 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc32)
    %43 = arith.addi %41, %42 : tensor<16x16xi32> loc(#loc32)
    %44 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc33)
    %45 = arith.addi %43, %44 : tensor<16x16xi32> loc(#loc33)
    %46 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc34)
    %47 = tt.addptr %46, %45 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc34)
    %48 = tt.load %47 : tensor<16x16x!tt.ptr<f16>> loc(#loc35)
    %49 = arith.addf %35, %48 : tensor<16x16xf16> loc(#loc36)
    %50 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc37)
    %51 = arith.addi %50, %cst_5 : tensor<16x1xi32> loc(#loc38)
    %52 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc39)
    %53 = arith.muli %51, %52 : tensor<16x1xi32> loc(#loc39)
    %54 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc40)
    %55 = tt.broadcast %53 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc40)
    %56 = tt.broadcast %54 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc40)
    %57 = arith.addi %55, %56 : tensor<16x16xi32> loc(#loc40)
    %58 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc41)
    %59 = arith.addi %57, %58 : tensor<16x16xi32> loc(#loc41)
    %60 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc42)
    %61 = tt.addptr %60, %59 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc42)
    %62 = tt.load %61 : tensor<16x16x!tt.ptr<f16>> loc(#loc43)
    %63 = arith.addf %49, %62 : tensor<16x16xf16> loc(#loc44)
    %64 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc45)
    %65 = arith.addi %64, %cst_4 : tensor<16x1xi32> loc(#loc46)
    %66 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc47)
    %67 = arith.muli %65, %66 : tensor<16x1xi32> loc(#loc47)
    %68 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc48)
    %69 = tt.broadcast %67 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc48)
    %70 = tt.broadcast %68 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc48)
    %71 = arith.addi %69, %70 : tensor<16x16xi32> loc(#loc48)
    %72 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc49)
    %73 = arith.addi %71, %72 : tensor<16x16xi32> loc(#loc49)
    %74 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc50)
    %75 = tt.addptr %74, %73 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc50)
    %76 = tt.load %75 : tensor<16x16x!tt.ptr<f16>> loc(#loc51)
    %77 = arith.addf %63, %76 : tensor<16x16xf16> loc(#loc52)
    %78 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc53)
    %79 = arith.addi %78, %cst_3 : tensor<16x1xi32> loc(#loc54)
    %80 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc55)
    %81 = arith.muli %79, %80 : tensor<16x1xi32> loc(#loc55)
    %82 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc56)
    %83 = tt.broadcast %81 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc56)
    %84 = tt.broadcast %82 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc56)
    %85 = arith.addi %83, %84 : tensor<16x16xi32> loc(#loc56)
    %86 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc57)
    %87 = arith.addi %85, %86 : tensor<16x16xi32> loc(#loc57)
    %88 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc58)
    %89 = tt.addptr %88, %87 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc58)
    %90 = tt.load %89 : tensor<16x16x!tt.ptr<f16>> loc(#loc59)
    %91 = arith.addf %77, %90 : tensor<16x16xf16> loc(#loc60)
    %92 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc61)
    %93 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc62)
    %94 = arith.addi %92, %93 : tensor<16x1xi32> loc(#loc62)
    %95 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc63)
    %96 = arith.muli %94, %95 : tensor<16x1xi32> loc(#loc63)
    %97 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc64)
    %98 = tt.broadcast %96 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc64)
    %99 = tt.broadcast %97 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc64)
    %100 = arith.addi %98, %99 : tensor<16x16xi32> loc(#loc64)
    %101 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc65)
    %102 = tt.addptr %101, %100 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc65)
    %103 = tt.load %102 : tensor<16x16x!tt.ptr<f16>> loc(#loc66)
    %104 = arith.addf %91, %103 : tensor<16x16xf16> loc(#loc67)
    %105 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc68)
    %106 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc69)
    %107 = arith.addi %105, %106 : tensor<16x1xi32> loc(#loc69)
    %108 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc70)
    %109 = arith.muli %107, %108 : tensor<16x1xi32> loc(#loc70)
    %110 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc71)
    %111 = tt.broadcast %109 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc71)
    %112 = tt.broadcast %110 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc71)
    %113 = arith.addi %111, %112 : tensor<16x16xi32> loc(#loc71)
    %114 = arith.addi %113, %cst_2 : tensor<16x16xi32> loc(#loc72)
    %115 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc73)
    %116 = tt.addptr %115, %114 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc73)
    %117 = tt.load %116 : tensor<16x16x!tt.ptr<f16>> loc(#loc74)
    %118 = arith.addf %104, %117 : tensor<16x16xf16> loc(#loc75)
    %119 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc76)
    %120 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc77)
    %121 = arith.addi %119, %120 : tensor<16x1xi32> loc(#loc77)
    %122 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc78)
    %123 = arith.muli %121, %122 : tensor<16x1xi32> loc(#loc78)
    %124 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc79)
    %125 = tt.broadcast %123 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc79)
    %126 = tt.broadcast %124 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc79)
    %127 = arith.addi %125, %126 : tensor<16x16xi32> loc(#loc79)
    %128 = arith.addi %127, %cst_1 : tensor<16x16xi32> loc(#loc80)
    %129 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc81)
    %130 = tt.addptr %129, %128 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc81)
    %131 = tt.load %130 : tensor<16x16x!tt.ptr<f16>> loc(#loc82)
    %132 = arith.addf %118, %131 : tensor<16x16xf16> loc(#loc83)
    %133 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc84)
    %134 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc85)
    %135 = arith.addi %133, %134 : tensor<16x1xi32> loc(#loc85)
    %136 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc86)
    %137 = arith.muli %135, %136 : tensor<16x1xi32> loc(#loc86)
    %138 = tt.expand_dims %22 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc87)
    %139 = tt.broadcast %137 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc87)
    %140 = tt.broadcast %138 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc87)
    %141 = arith.addi %139, %140 : tensor<16x16xi32> loc(#loc87)
    %142 = arith.addi %141, %cst_0 : tensor<16x16xi32> loc(#loc88)
    %143 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc89)
    %144 = tt.addptr %143, %142 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc89)
    %145 = tt.load %144 : tensor<16x16x!tt.ptr<f16>> loc(#loc90)
    %146 = arith.addf %132, %145 : tensor<16x16xf16> loc(#loc91)
    %147 = tt.expand_dims %10 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc92)
    %148 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc93)
    %149 = arith.addi %147, %148 : tensor<16x1xi32> loc(#loc93)
    %150 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc94)
    %151 = arith.muli %149, %150 : tensor<16x1xi32> loc(#loc94)
    %152 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc95)
    %153 = tt.broadcast %151 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc95)
    %154 = tt.broadcast %152 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc95)
    %155 = arith.addi %153, %154 : tensor<16x16xi32> loc(#loc95)
    %156 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc96)
    %157 = arith.addi %155, %156 : tensor<16x16xi32> loc(#loc96)
    %158 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc97)
    %159 = tt.addptr %158, %157 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc97)
    tt.store %159, %146 : tensor<16x16x!tt.ptr<f16>> loc(#loc98)
    tt.return loc(#loc99)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:50)
#loc15 = loc("2d9pt_naive.py":40:37)
#loc16 = loc("2d9pt_naive.py":42:22)
#loc17 = loc("2d9pt_naive.py":42:50)
#loc18 = loc("2d9pt_naive.py":42:37)
#loc19 = loc("2d9pt_naive.py":43:22)
#loc20 = loc("2d9pt_naive.py":43:50)
#loc21 = loc("2d9pt_naive.py":43:37)
#loc22 = loc("2d9pt_naive.py":50:19)
#loc23 = loc("2d9pt_naive.py":50:36)
#loc24 = loc("2d9pt_naive.py":50:40)
#loc25 = loc("2d9pt_naive.py":50:56)
#loc26 = loc("2d9pt_naive.py":50:18)
#loc27 = loc("2d9pt_naive.py":51:21)
#loc28 = loc("2d9pt_naive.py":52:22)
#loc29 = loc("2d9pt_naive.py":54:20)
#loc30 = loc("2d9pt_naive.py":54:37)
#loc31 = loc("2d9pt_naive.py":54:40)
#loc32 = loc("2d9pt_naive.py":54:44)
#loc33 = loc("2d9pt_naive.py":54:60)
#loc34 = loc("2d9pt_naive.py":54:18)
#loc35 = loc("2d9pt_naive.py":55:21)
#loc36 = loc("2d9pt_naive.py":56:22)
#loc37 = loc("2d9pt_naive.py":58:20)
#loc38 = loc("2d9pt_naive.py":58:37)
#loc39 = loc("2d9pt_naive.py":58:40)
#loc40 = loc("2d9pt_naive.py":58:44)
#loc41 = loc("2d9pt_naive.py":58:60)
#loc42 = loc("2d9pt_naive.py":58:18)
#loc43 = loc("2d9pt_naive.py":59:21)
#loc44 = loc("2d9pt_naive.py":60:22)
#loc45 = loc("2d9pt_naive.py":62:20)
#loc46 = loc("2d9pt_naive.py":62:37)
#loc47 = loc("2d9pt_naive.py":62:40)
#loc48 = loc("2d9pt_naive.py":62:44)
#loc49 = loc("2d9pt_naive.py":62:60)
#loc50 = loc("2d9pt_naive.py":62:18)
#loc51 = loc("2d9pt_naive.py":63:21)
#loc52 = loc("2d9pt_naive.py":64:22)
#loc53 = loc("2d9pt_naive.py":66:20)
#loc54 = loc("2d9pt_naive.py":66:37)
#loc55 = loc("2d9pt_naive.py":66:40)
#loc56 = loc("2d9pt_naive.py":66:44)
#loc57 = loc("2d9pt_naive.py":66:60)
#loc58 = loc("2d9pt_naive.py":66:18)
#loc59 = loc("2d9pt_naive.py":67:21)
#loc60 = loc("2d9pt_naive.py":68:22)
#loc61 = loc("2d9pt_naive.py":71:20)
#loc62 = loc("2d9pt_naive.py":71:37)
#loc63 = loc("2d9pt_naive.py":71:40)
#loc64 = loc("2d9pt_naive.py":71:44)
#loc65 = loc("2d9pt_naive.py":71:18)
#loc66 = loc("2d9pt_naive.py":72:21)
#loc67 = loc("2d9pt_naive.py":73:22)
#loc68 = loc("2d9pt_naive.py":75:20)
#loc69 = loc("2d9pt_naive.py":75:37)
#loc70 = loc("2d9pt_naive.py":75:40)
#loc71 = loc("2d9pt_naive.py":75:44)
#loc72 = loc("2d9pt_naive.py":75:62)
#loc73 = loc("2d9pt_naive.py":75:18)
#loc74 = loc("2d9pt_naive.py":76:21)
#loc75 = loc("2d9pt_naive.py":77:22)
#loc76 = loc("2d9pt_naive.py":79:20)
#loc77 = loc("2d9pt_naive.py":79:37)
#loc78 = loc("2d9pt_naive.py":79:40)
#loc79 = loc("2d9pt_naive.py":79:44)
#loc80 = loc("2d9pt_naive.py":79:62)
#loc81 = loc("2d9pt_naive.py":79:18)
#loc82 = loc("2d9pt_naive.py":80:21)
#loc83 = loc("2d9pt_naive.py":81:22)
#loc84 = loc("2d9pt_naive.py":83:20)
#loc85 = loc("2d9pt_naive.py":83:37)
#loc86 = loc("2d9pt_naive.py":83:40)
#loc87 = loc("2d9pt_naive.py":83:44)
#loc88 = loc("2d9pt_naive.py":83:62)
#loc89 = loc("2d9pt_naive.py":83:18)
#loc90 = loc("2d9pt_naive.py":84:21)
#loc91 = loc("2d9pt_naive.py":85:22)
#loc92 = loc("2d9pt_naive.py":87:19)
#loc93 = loc("2d9pt_naive.py":87:35)
#loc94 = loc("2d9pt_naive.py":87:38)
#loc95 = loc("2d9pt_naive.py":87:42)
#loc96 = loc("2d9pt_naive.py":87:60)
#loc97 = loc("2d9pt_naive.py":87:18)
#loc98 = loc("2d9pt_naive.py":88:21)
#loc99 = loc("2d9pt_naive.py":88:4)
#loc100 = loc(callsite(#loc5 at #loc6))
#loc101 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before LoopInvariantCodeMotion (loop-invariant-code-motion) ('builtin.module' operation) //----- //
#loc = loc("2d9pt_naive.py":18:0)
module {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc11)
    %9 = tt.splat %7 : i32 -> tensor<16xi32> loc(#loc12)
    %10 = arith.addi %9, %8 : tensor<16xi32> loc(#loc12)
    %11 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %12 = tt.splat %11 : i32 -> tensor<16xi32> loc(#loc14)
    %13 = arith.addi %12, %8 : tensor<16xi32> loc(#loc14)
    %14 = tt.expand_dims %10 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc15)
    %15 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc16)
    %16 = arith.muli %14, %15 : tensor<16x1xi32> loc(#loc16)
    %17 = tt.expand_dims %13 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc17)
    %18 = tt.broadcast %16 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc17)
    %19 = tt.broadcast %17 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc17)
    %20 = arith.addi %18, %19 : tensor<16x16xi32> loc(#loc17)
    %21 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc18)
    %22 = arith.addi %20, %21 : tensor<16x16xi32> loc(#loc18)
    %23 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc19)
    %24 = tt.addptr %23, %22 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc19)
    %25 = tt.load %24 : tensor<16x16x!tt.ptr<f16>> loc(#loc20)
    %26 = arith.addf %25, %cst : tensor<16x16xf16> loc(#loc21)
    %27 = arith.addi %14, %cst_6 : tensor<16x1xi32> loc(#loc22)
    %28 = arith.muli %27, %15 : tensor<16x1xi32> loc(#loc23)
    %29 = tt.broadcast %28 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc24)
    %30 = arith.addi %29, %19 : tensor<16x16xi32> loc(#loc24)
    %31 = arith.addi %30, %21 : tensor<16x16xi32> loc(#loc25)
    %32 = tt.addptr %23, %31 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc26)
    %33 = tt.load %32 : tensor<16x16x!tt.ptr<f16>> loc(#loc27)
    %34 = arith.addf %26, %33 : tensor<16x16xf16> loc(#loc28)
    %35 = arith.addi %14, %cst_5 : tensor<16x1xi32> loc(#loc29)
    %36 = arith.muli %35, %15 : tensor<16x1xi32> loc(#loc30)
    %37 = tt.broadcast %36 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc31)
    %38 = arith.addi %37, %19 : tensor<16x16xi32> loc(#loc31)
    %39 = arith.addi %38, %21 : tensor<16x16xi32> loc(#loc32)
    %40 = tt.addptr %23, %39 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc33)
    %41 = tt.load %40 : tensor<16x16x!tt.ptr<f16>> loc(#loc34)
    %42 = arith.addf %34, %41 : tensor<16x16xf16> loc(#loc35)
    %43 = arith.addi %14, %cst_4 : tensor<16x1xi32> loc(#loc36)
    %44 = arith.muli %43, %15 : tensor<16x1xi32> loc(#loc37)
    %45 = tt.broadcast %44 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc38)
    %46 = arith.addi %45, %19 : tensor<16x16xi32> loc(#loc38)
    %47 = arith.addi %46, %21 : tensor<16x16xi32> loc(#loc39)
    %48 = tt.addptr %23, %47 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc40)
    %49 = tt.load %48 : tensor<16x16x!tt.ptr<f16>> loc(#loc41)
    %50 = arith.addf %42, %49 : tensor<16x16xf16> loc(#loc42)
    %51 = arith.addi %14, %cst_3 : tensor<16x1xi32> loc(#loc43)
    %52 = arith.muli %51, %15 : tensor<16x1xi32> loc(#loc44)
    %53 = tt.broadcast %52 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc45)
    %54 = arith.addi %53, %19 : tensor<16x16xi32> loc(#loc45)
    %55 = arith.addi %54, %21 : tensor<16x16xi32> loc(#loc46)
    %56 = tt.addptr %23, %55 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc47)
    %57 = tt.load %56 : tensor<16x16x!tt.ptr<f16>> loc(#loc48)
    %58 = arith.addf %50, %57 : tensor<16x16xf16> loc(#loc49)
    %59 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc50)
    %60 = arith.addi %14, %59 : tensor<16x1xi32> loc(#loc50)
    %61 = arith.muli %60, %15 : tensor<16x1xi32> loc(#loc51)
    %62 = tt.broadcast %61 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc52)
    %63 = arith.addi %62, %19 : tensor<16x16xi32> loc(#loc52)
    %64 = tt.addptr %23, %63 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc53)
    %65 = tt.load %64 : tensor<16x16x!tt.ptr<f16>> loc(#loc54)
    %66 = arith.addf %58, %65 : tensor<16x16xf16> loc(#loc55)
    %67 = arith.addi %63, %cst_2 : tensor<16x16xi32> loc(#loc56)
    %68 = tt.addptr %23, %67 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc57)
    %69 = tt.load %68 : tensor<16x16x!tt.ptr<f16>> loc(#loc58)
    %70 = arith.addf %66, %69 : tensor<16x16xf16> loc(#loc59)
    %71 = arith.addi %63, %cst_1 : tensor<16x16xi32> loc(#loc60)
    %72 = tt.addptr %23, %71 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc61)
    %73 = tt.load %72 : tensor<16x16x!tt.ptr<f16>> loc(#loc62)
    %74 = arith.addf %70, %73 : tensor<16x16xf16> loc(#loc63)
    %75 = arith.addi %63, %cst_0 : tensor<16x16xi32> loc(#loc64)
    %76 = tt.addptr %23, %75 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc65)
    %77 = tt.load %76 : tensor<16x16x!tt.ptr<f16>> loc(#loc66)
    %78 = arith.addf %74, %77 : tensor<16x16xf16> loc(#loc67)
    %79 = arith.addi %63, %21 : tensor<16x16xi32> loc(#loc68)
    %80 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc69)
    %81 = tt.addptr %80, %79 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc69)
    tt.store %81, %78 : tensor<16x16x!tt.ptr<f16>> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("2d9pt_naive.py":18:0)
module {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc11)
    %9 = tt.splat %7 : i32 -> tensor<16xi32> loc(#loc12)
    %10 = arith.addi %9, %8 : tensor<16xi32> loc(#loc12)
    %11 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %12 = tt.splat %11 : i32 -> tensor<16xi32> loc(#loc14)
    %13 = arith.addi %12, %8 : tensor<16xi32> loc(#loc14)
    %14 = tt.expand_dims %10 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc15)
    %15 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc16)
    %16 = arith.muli %14, %15 : tensor<16x1xi32> loc(#loc16)
    %17 = tt.expand_dims %13 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc17)
    %18 = tt.broadcast %16 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc17)
    %19 = tt.broadcast %17 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc17)
    %20 = arith.addi %18, %19 : tensor<16x16xi32> loc(#loc17)
    %21 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc18)
    %22 = arith.addi %20, %21 : tensor<16x16xi32> loc(#loc18)
    %23 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc19)
    %24 = tt.addptr %23, %22 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc19)
    %25 = tt.load %24 : tensor<16x16x!tt.ptr<f16>> loc(#loc20)
    %26 = arith.addf %25, %cst : tensor<16x16xf16> loc(#loc21)
    %27 = arith.addi %14, %cst_6 : tensor<16x1xi32> loc(#loc22)
    %28 = arith.muli %27, %15 : tensor<16x1xi32> loc(#loc23)
    %29 = tt.broadcast %28 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc24)
    %30 = arith.addi %29, %19 : tensor<16x16xi32> loc(#loc24)
    %31 = arith.addi %30, %21 : tensor<16x16xi32> loc(#loc25)
    %32 = tt.addptr %23, %31 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc26)
    %33 = tt.load %32 : tensor<16x16x!tt.ptr<f16>> loc(#loc27)
    %34 = arith.addf %26, %33 : tensor<16x16xf16> loc(#loc28)
    %35 = arith.addi %14, %cst_5 : tensor<16x1xi32> loc(#loc29)
    %36 = arith.muli %35, %15 : tensor<16x1xi32> loc(#loc30)
    %37 = tt.broadcast %36 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc31)
    %38 = arith.addi %37, %19 : tensor<16x16xi32> loc(#loc31)
    %39 = arith.addi %38, %21 : tensor<16x16xi32> loc(#loc32)
    %40 = tt.addptr %23, %39 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc33)
    %41 = tt.load %40 : tensor<16x16x!tt.ptr<f16>> loc(#loc34)
    %42 = arith.addf %34, %41 : tensor<16x16xf16> loc(#loc35)
    %43 = arith.addi %14, %cst_4 : tensor<16x1xi32> loc(#loc36)
    %44 = arith.muli %43, %15 : tensor<16x1xi32> loc(#loc37)
    %45 = tt.broadcast %44 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc38)
    %46 = arith.addi %45, %19 : tensor<16x16xi32> loc(#loc38)
    %47 = arith.addi %46, %21 : tensor<16x16xi32> loc(#loc39)
    %48 = tt.addptr %23, %47 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc40)
    %49 = tt.load %48 : tensor<16x16x!tt.ptr<f16>> loc(#loc41)
    %50 = arith.addf %42, %49 : tensor<16x16xf16> loc(#loc42)
    %51 = arith.addi %14, %cst_3 : tensor<16x1xi32> loc(#loc43)
    %52 = arith.muli %51, %15 : tensor<16x1xi32> loc(#loc44)
    %53 = tt.broadcast %52 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc45)
    %54 = arith.addi %53, %19 : tensor<16x16xi32> loc(#loc45)
    %55 = arith.addi %54, %21 : tensor<16x16xi32> loc(#loc46)
    %56 = tt.addptr %23, %55 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc47)
    %57 = tt.load %56 : tensor<16x16x!tt.ptr<f16>> loc(#loc48)
    %58 = arith.addf %50, %57 : tensor<16x16xf16> loc(#loc49)
    %59 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc50)
    %60 = arith.addi %14, %59 : tensor<16x1xi32> loc(#loc50)
    %61 = arith.muli %60, %15 : tensor<16x1xi32> loc(#loc51)
    %62 = tt.broadcast %61 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc52)
    %63 = arith.addi %62, %19 : tensor<16x16xi32> loc(#loc52)
    %64 = tt.addptr %23, %63 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc53)
    %65 = tt.load %64 : tensor<16x16x!tt.ptr<f16>> loc(#loc54)
    %66 = arith.addf %58, %65 : tensor<16x16xf16> loc(#loc55)
    %67 = arith.addi %63, %cst_2 : tensor<16x16xi32> loc(#loc56)
    %68 = tt.addptr %23, %67 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc57)
    %69 = tt.load %68 : tensor<16x16x!tt.ptr<f16>> loc(#loc58)
    %70 = arith.addf %66, %69 : tensor<16x16xf16> loc(#loc59)
    %71 = arith.addi %63, %cst_1 : tensor<16x16xi32> loc(#loc60)
    %72 = tt.addptr %23, %71 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc61)
    %73 = tt.load %72 : tensor<16x16x!tt.ptr<f16>> loc(#loc62)
    %74 = arith.addf %70, %73 : tensor<16x16xf16> loc(#loc63)
    %75 = arith.addi %63, %cst_0 : tensor<16x16xi32> loc(#loc64)
    %76 = tt.addptr %23, %75 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc65)
    %77 = tt.load %76 : tensor<16x16x!tt.ptr<f16>> loc(#loc66)
    %78 = arith.addf %74, %77 : tensor<16x16xf16> loc(#loc67)
    %79 = arith.addi %63, %21 : tensor<16x16xi32> loc(#loc68)
    %80 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc69)
    %81 = tt.addptr %80, %79 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc69)
    tt.store %81, %78 : tensor<16x16x!tt.ptr<f16>> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before ConvertTritonToTritonGPU (convert-triton-to-tritongpu) ('builtin.module' operation) //----- //
#loc = loc("2d9pt_naive.py":18:0)
module {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc11)
    %9 = tt.splat %7 : i32 -> tensor<16xi32> loc(#loc12)
    %10 = arith.addi %9, %8 : tensor<16xi32> loc(#loc12)
    %11 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %12 = tt.splat %11 : i32 -> tensor<16xi32> loc(#loc14)
    %13 = arith.addi %12, %8 : tensor<16xi32> loc(#loc14)
    %14 = tt.expand_dims %10 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc15)
    %15 = tt.splat %arg3 : i32 -> tensor<16x1xi32> loc(#loc16)
    %16 = arith.muli %14, %15 : tensor<16x1xi32> loc(#loc16)
    %17 = tt.expand_dims %13 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc17)
    %18 = tt.broadcast %16 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc17)
    %19 = tt.broadcast %17 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc17)
    %20 = arith.addi %18, %19 : tensor<16x16xi32> loc(#loc17)
    %21 = tt.splat %arg4 : i32 -> tensor<16x16xi32> loc(#loc18)
    %22 = arith.addi %20, %21 : tensor<16x16xi32> loc(#loc18)
    %23 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc19)
    %24 = tt.addptr %23, %22 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc19)
    %25 = tt.load %24 : tensor<16x16x!tt.ptr<f16>> loc(#loc20)
    %26 = arith.addf %25, %cst : tensor<16x16xf16> loc(#loc21)
    %27 = arith.addi %14, %cst_6 : tensor<16x1xi32> loc(#loc22)
    %28 = arith.muli %27, %15 : tensor<16x1xi32> loc(#loc23)
    %29 = tt.broadcast %28 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc24)
    %30 = arith.addi %29, %19 : tensor<16x16xi32> loc(#loc24)
    %31 = arith.addi %30, %21 : tensor<16x16xi32> loc(#loc25)
    %32 = tt.addptr %23, %31 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc26)
    %33 = tt.load %32 : tensor<16x16x!tt.ptr<f16>> loc(#loc27)
    %34 = arith.addf %26, %33 : tensor<16x16xf16> loc(#loc28)
    %35 = arith.addi %14, %cst_5 : tensor<16x1xi32> loc(#loc29)
    %36 = arith.muli %35, %15 : tensor<16x1xi32> loc(#loc30)
    %37 = tt.broadcast %36 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc31)
    %38 = arith.addi %37, %19 : tensor<16x16xi32> loc(#loc31)
    %39 = arith.addi %38, %21 : tensor<16x16xi32> loc(#loc32)
    %40 = tt.addptr %23, %39 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc33)
    %41 = tt.load %40 : tensor<16x16x!tt.ptr<f16>> loc(#loc34)
    %42 = arith.addf %34, %41 : tensor<16x16xf16> loc(#loc35)
    %43 = arith.addi %14, %cst_4 : tensor<16x1xi32> loc(#loc36)
    %44 = arith.muli %43, %15 : tensor<16x1xi32> loc(#loc37)
    %45 = tt.broadcast %44 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc38)
    %46 = arith.addi %45, %19 : tensor<16x16xi32> loc(#loc38)
    %47 = arith.addi %46, %21 : tensor<16x16xi32> loc(#loc39)
    %48 = tt.addptr %23, %47 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc40)
    %49 = tt.load %48 : tensor<16x16x!tt.ptr<f16>> loc(#loc41)
    %50 = arith.addf %42, %49 : tensor<16x16xf16> loc(#loc42)
    %51 = arith.addi %14, %cst_3 : tensor<16x1xi32> loc(#loc43)
    %52 = arith.muli %51, %15 : tensor<16x1xi32> loc(#loc44)
    %53 = tt.broadcast %52 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc45)
    %54 = arith.addi %53, %19 : tensor<16x16xi32> loc(#loc45)
    %55 = arith.addi %54, %21 : tensor<16x16xi32> loc(#loc46)
    %56 = tt.addptr %23, %55 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc47)
    %57 = tt.load %56 : tensor<16x16x!tt.ptr<f16>> loc(#loc48)
    %58 = arith.addf %50, %57 : tensor<16x16xf16> loc(#loc49)
    %59 = tt.splat %arg4 : i32 -> tensor<16x1xi32> loc(#loc50)
    %60 = arith.addi %14, %59 : tensor<16x1xi32> loc(#loc50)
    %61 = arith.muli %60, %15 : tensor<16x1xi32> loc(#loc51)
    %62 = tt.broadcast %61 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc52)
    %63 = arith.addi %62, %19 : tensor<16x16xi32> loc(#loc52)
    %64 = tt.addptr %23, %63 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc53)
    %65 = tt.load %64 : tensor<16x16x!tt.ptr<f16>> loc(#loc54)
    %66 = arith.addf %58, %65 : tensor<16x16xf16> loc(#loc55)
    %67 = arith.addi %63, %cst_2 : tensor<16x16xi32> loc(#loc56)
    %68 = tt.addptr %23, %67 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc57)
    %69 = tt.load %68 : tensor<16x16x!tt.ptr<f16>> loc(#loc58)
    %70 = arith.addf %66, %69 : tensor<16x16xf16> loc(#loc59)
    %71 = arith.addi %63, %cst_1 : tensor<16x16xi32> loc(#loc60)
    %72 = tt.addptr %23, %71 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc61)
    %73 = tt.load %72 : tensor<16x16x!tt.ptr<f16>> loc(#loc62)
    %74 = arith.addf %70, %73 : tensor<16x16xf16> loc(#loc63)
    %75 = arith.addi %63, %cst_0 : tensor<16x16xi32> loc(#loc64)
    %76 = tt.addptr %23, %75 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc65)
    %77 = tt.load %76 : tensor<16x16x!tt.ptr<f16>> loc(#loc66)
    %78 = arith.addf %74, %77 : tensor<16x16xf16> loc(#loc67)
    %79 = arith.addi %63, %21 : tensor<16x16xi32> loc(#loc68)
    %80 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>> loc(#loc69)
    %81 = tt.addptr %80, %79 : tensor<16x16x!tt.ptr<f16>>, tensor<16x16xi32> loc(#loc69)
    tt.store %81, %78 : tensor<16x16x!tt.ptr<f16>> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before TritonGPUCoalesce (tritongpu-coalesce) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked4 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16, #blocked> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #blocked2> loc(#loc11)
    %9 = tt.splat %7 : i32 -> tensor<16xi32, #blocked2> loc(#loc12)
    %10 = arith.addi %9, %8 : tensor<16xi32, #blocked2> loc(#loc12)
    %11 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %12 = tt.splat %11 : i32 -> tensor<16xi32, #blocked2> loc(#loc14)
    %13 = arith.addi %12, %8 : tensor<16xi32, #blocked2> loc(#loc14)
    %14 = triton_gpu.convert_layout %10 : tensor<16xi32, #blocked2> -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> loc(#loc15)
    %15 = tt.expand_dims %14 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> -> tensor<16x1xi32, #blocked3> loc(#loc15)
    %16 = triton_gpu.convert_layout %15 : tensor<16x1xi32, #blocked3> -> tensor<16x1xi32, #blocked1> loc(#loc16)
    %17 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc16)
    %18 = arith.muli %16, %17 : tensor<16x1xi32, #blocked1> loc(#loc16)
    %19 = triton_gpu.convert_layout %13 : tensor<16xi32, #blocked2> -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked4}>> loc(#loc17)
    %20 = tt.expand_dims %19 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x16xi32, #blocked4> loc(#loc17)
    %21 = triton_gpu.convert_layout %20 : tensor<1x16xi32, #blocked4> -> tensor<1x16xi32, #blocked> loc(#loc17)
    %22 = tt.broadcast %18 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc17)
    %23 = triton_gpu.convert_layout %22 : tensor<16x16xi32, #blocked1> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %24 = tt.broadcast %21 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %25 = arith.addi %23, %24 : tensor<16x16xi32, #blocked> loc(#loc17)
    %26 = tt.splat %arg4 : i32 -> tensor<16x16xi32, #blocked> loc(#loc18)
    %27 = arith.addi %25, %26 : tensor<16x16xi32, #blocked> loc(#loc18)
    %28 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc19)
    %29 = tt.addptr %28, %27 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc19)
    %30 = tt.load %29 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %31 = arith.addf %30, %cst : tensor<16x16xf16, #blocked> loc(#loc21)
    %32 = arith.addi %16, %cst_6 : tensor<16x1xi32, #blocked1> loc(#loc22)
    %33 = arith.muli %32, %17 : tensor<16x1xi32, #blocked1> loc(#loc23)
    %34 = tt.broadcast %33 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc24)
    %35 = triton_gpu.convert_layout %34 : tensor<16x16xi32, #blocked1> -> tensor<16x16xi32, #blocked> loc(#loc24)
    %36 = arith.addi %35, %24 : tensor<16x16xi32, #blocked> loc(#loc24)
    %37 = arith.addi %36, %26 : tensor<16x16xi32, #blocked> loc(#loc25)
    %38 = tt.addptr %28, %37 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc26)
    %39 = tt.load %38 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %40 = arith.addf %31, %39 : tensor<16x16xf16, #blocked> loc(#loc28)
    %41 = arith.addi %16, %cst_5 : tensor<16x1xi32, #blocked1> loc(#loc29)
    %42 = arith.muli %41, %17 : tensor<16x1xi32, #blocked1> loc(#loc30)
    %43 = tt.broadcast %42 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc31)
    %44 = triton_gpu.convert_layout %43 : tensor<16x16xi32, #blocked1> -> tensor<16x16xi32, #blocked> loc(#loc31)
    %45 = arith.addi %44, %24 : tensor<16x16xi32, #blocked> loc(#loc31)
    %46 = arith.addi %45, %26 : tensor<16x16xi32, #blocked> loc(#loc32)
    %47 = tt.addptr %28, %46 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc33)
    %48 = tt.load %47 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %49 = arith.addf %40, %48 : tensor<16x16xf16, #blocked> loc(#loc35)
    %50 = arith.addi %16, %cst_4 : tensor<16x1xi32, #blocked1> loc(#loc36)
    %51 = arith.muli %50, %17 : tensor<16x1xi32, #blocked1> loc(#loc37)
    %52 = tt.broadcast %51 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc38)
    %53 = triton_gpu.convert_layout %52 : tensor<16x16xi32, #blocked1> -> tensor<16x16xi32, #blocked> loc(#loc38)
    %54 = arith.addi %53, %24 : tensor<16x16xi32, #blocked> loc(#loc38)
    %55 = arith.addi %54, %26 : tensor<16x16xi32, #blocked> loc(#loc39)
    %56 = tt.addptr %28, %55 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc40)
    %57 = tt.load %56 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %58 = arith.addf %49, %57 : tensor<16x16xf16, #blocked> loc(#loc42)
    %59 = arith.addi %16, %cst_3 : tensor<16x1xi32, #blocked1> loc(#loc43)
    %60 = arith.muli %59, %17 : tensor<16x1xi32, #blocked1> loc(#loc44)
    %61 = tt.broadcast %60 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc45)
    %62 = triton_gpu.convert_layout %61 : tensor<16x16xi32, #blocked1> -> tensor<16x16xi32, #blocked> loc(#loc45)
    %63 = arith.addi %62, %24 : tensor<16x16xi32, #blocked> loc(#loc45)
    %64 = arith.addi %63, %26 : tensor<16x16xi32, #blocked> loc(#loc46)
    %65 = tt.addptr %28, %64 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc47)
    %66 = tt.load %65 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %67 = arith.addf %58, %66 : tensor<16x16xf16, #blocked> loc(#loc49)
    %68 = tt.splat %arg4 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc50)
    %69 = arith.addi %16, %68 : tensor<16x1xi32, #blocked1> loc(#loc50)
    %70 = arith.muli %69, %17 : tensor<16x1xi32, #blocked1> loc(#loc51)
    %71 = tt.broadcast %70 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc52)
    %72 = triton_gpu.convert_layout %71 : tensor<16x16xi32, #blocked1> -> tensor<16x16xi32, #blocked> loc(#loc52)
    %73 = arith.addi %72, %24 : tensor<16x16xi32, #blocked> loc(#loc52)
    %74 = tt.addptr %28, %73 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc53)
    %75 = tt.load %74 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %76 = arith.addf %67, %75 : tensor<16x16xf16, #blocked> loc(#loc55)
    %77 = arith.addi %73, %cst_2 : tensor<16x16xi32, #blocked> loc(#loc56)
    %78 = tt.addptr %28, %77 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc57)
    %79 = tt.load %78 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %80 = arith.addf %76, %79 : tensor<16x16xf16, #blocked> loc(#loc59)
    %81 = arith.addi %73, %cst_1 : tensor<16x16xi32, #blocked> loc(#loc60)
    %82 = tt.addptr %28, %81 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc61)
    %83 = tt.load %82 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %84 = arith.addf %80, %83 : tensor<16x16xf16, #blocked> loc(#loc63)
    %85 = arith.addi %73, %cst_0 : tensor<16x16xi32, #blocked> loc(#loc64)
    %86 = tt.addptr %28, %85 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc65)
    %87 = tt.load %86 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %88 = arith.addf %84, %87 : tensor<16x16xf16, #blocked> loc(#loc67)
    %89 = arith.addi %73, %26 : tensor<16x16xi32, #blocked> loc(#loc68)
    %90 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc69)
    %91 = tt.addptr %90, %89 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc69)
    tt.store %91, %88 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before TritonGPUPlanCTAPass (triton-nvidia-gpu-plan-cta) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked4 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16, #blocked> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #blocked2> loc(#loc11)
    %9 = tt.splat %7 : i32 -> tensor<16xi32, #blocked2> loc(#loc12)
    %10 = arith.addi %9, %8 : tensor<16xi32, #blocked2> loc(#loc12)
    %11 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %12 = tt.splat %11 : i32 -> tensor<16xi32, #blocked2> loc(#loc14)
    %13 = arith.addi %12, %8 : tensor<16xi32, #blocked2> loc(#loc14)
    %14 = triton_gpu.convert_layout %10 : tensor<16xi32, #blocked2> -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> loc(#loc15)
    %15 = tt.expand_dims %14 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> -> tensor<16x1xi32, #blocked3> loc(#loc15)
    %16 = triton_gpu.convert_layout %15 : tensor<16x1xi32, #blocked3> -> tensor<16x1xi32, #blocked1> loc(#loc16)
    %17 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc16)
    %18 = arith.muli %16, %17 : tensor<16x1xi32, #blocked1> loc(#loc16)
    %19 = triton_gpu.convert_layout %13 : tensor<16xi32, #blocked2> -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked4}>> loc(#loc17)
    %20 = tt.expand_dims %19 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x16xi32, #blocked4> loc(#loc17)
    %21 = triton_gpu.convert_layout %20 : tensor<1x16xi32, #blocked4> -> tensor<1x16xi32, #blocked> loc(#loc17)
    %22 = tt.broadcast %18 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc17)
    %23 = triton_gpu.convert_layout %22 : tensor<16x16xi32, #blocked1> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %24 = tt.broadcast %21 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %25 = arith.addi %23, %24 : tensor<16x16xi32, #blocked> loc(#loc17)
    %26 = tt.splat %arg4 : i32 -> tensor<16x16xi32, #blocked> loc(#loc18)
    %27 = arith.addi %25, %26 : tensor<16x16xi32, #blocked> loc(#loc18)
    %28 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc19)
    %29 = tt.addptr %28, %27 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc19)
    %30 = triton_gpu.convert_layout %29 : tensor<16x16x!tt.ptr<f16>, #blocked> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %31 = tt.load %30 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %32 = arith.addf %31, %cst : tensor<16x16xf16, #blocked> loc(#loc21)
    %33 = arith.addi %16, %cst_6 : tensor<16x1xi32, #blocked1> loc(#loc22)
    %34 = arith.muli %33, %17 : tensor<16x1xi32, #blocked1> loc(#loc23)
    %35 = tt.broadcast %34 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc24)
    %36 = triton_gpu.convert_layout %35 : tensor<16x16xi32, #blocked1> -> tensor<16x16xi32, #blocked> loc(#loc24)
    %37 = arith.addi %36, %24 : tensor<16x16xi32, #blocked> loc(#loc24)
    %38 = arith.addi %37, %26 : tensor<16x16xi32, #blocked> loc(#loc25)
    %39 = tt.addptr %28, %38 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc26)
    %40 = triton_gpu.convert_layout %39 : tensor<16x16x!tt.ptr<f16>, #blocked> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %41 = tt.load %40 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %42 = arith.addf %32, %41 : tensor<16x16xf16, #blocked> loc(#loc28)
    %43 = arith.addi %16, %cst_5 : tensor<16x1xi32, #blocked1> loc(#loc29)
    %44 = arith.muli %43, %17 : tensor<16x1xi32, #blocked1> loc(#loc30)
    %45 = tt.broadcast %44 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc31)
    %46 = triton_gpu.convert_layout %45 : tensor<16x16xi32, #blocked1> -> tensor<16x16xi32, #blocked> loc(#loc31)
    %47 = arith.addi %46, %24 : tensor<16x16xi32, #blocked> loc(#loc31)
    %48 = arith.addi %47, %26 : tensor<16x16xi32, #blocked> loc(#loc32)
    %49 = tt.addptr %28, %48 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc33)
    %50 = triton_gpu.convert_layout %49 : tensor<16x16x!tt.ptr<f16>, #blocked> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %51 = tt.load %50 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %52 = arith.addf %42, %51 : tensor<16x16xf16, #blocked> loc(#loc35)
    %53 = arith.addi %16, %cst_4 : tensor<16x1xi32, #blocked1> loc(#loc36)
    %54 = arith.muli %53, %17 : tensor<16x1xi32, #blocked1> loc(#loc37)
    %55 = tt.broadcast %54 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc38)
    %56 = triton_gpu.convert_layout %55 : tensor<16x16xi32, #blocked1> -> tensor<16x16xi32, #blocked> loc(#loc38)
    %57 = arith.addi %56, %24 : tensor<16x16xi32, #blocked> loc(#loc38)
    %58 = arith.addi %57, %26 : tensor<16x16xi32, #blocked> loc(#loc39)
    %59 = tt.addptr %28, %58 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc40)
    %60 = triton_gpu.convert_layout %59 : tensor<16x16x!tt.ptr<f16>, #blocked> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %61 = tt.load %60 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %62 = arith.addf %52, %61 : tensor<16x16xf16, #blocked> loc(#loc42)
    %63 = arith.addi %16, %cst_3 : tensor<16x1xi32, #blocked1> loc(#loc43)
    %64 = arith.muli %63, %17 : tensor<16x1xi32, #blocked1> loc(#loc44)
    %65 = tt.broadcast %64 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc45)
    %66 = triton_gpu.convert_layout %65 : tensor<16x16xi32, #blocked1> -> tensor<16x16xi32, #blocked> loc(#loc45)
    %67 = arith.addi %66, %24 : tensor<16x16xi32, #blocked> loc(#loc45)
    %68 = arith.addi %67, %26 : tensor<16x16xi32, #blocked> loc(#loc46)
    %69 = tt.addptr %28, %68 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc47)
    %70 = triton_gpu.convert_layout %69 : tensor<16x16x!tt.ptr<f16>, #blocked> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %71 = tt.load %70 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %72 = arith.addf %62, %71 : tensor<16x16xf16, #blocked> loc(#loc49)
    %73 = tt.splat %arg4 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc50)
    %74 = arith.addi %16, %73 : tensor<16x1xi32, #blocked1> loc(#loc50)
    %75 = arith.muli %74, %17 : tensor<16x1xi32, #blocked1> loc(#loc51)
    %76 = tt.broadcast %75 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc52)
    %77 = triton_gpu.convert_layout %76 : tensor<16x16xi32, #blocked1> -> tensor<16x16xi32, #blocked> loc(#loc52)
    %78 = arith.addi %77, %24 : tensor<16x16xi32, #blocked> loc(#loc52)
    %79 = tt.addptr %28, %78 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc53)
    %80 = triton_gpu.convert_layout %79 : tensor<16x16x!tt.ptr<f16>, #blocked> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %81 = tt.load %80 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %82 = arith.addf %72, %81 : tensor<16x16xf16, #blocked> loc(#loc55)
    %83 = arith.addi %78, %cst_2 : tensor<16x16xi32, #blocked> loc(#loc56)
    %84 = tt.addptr %28, %83 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc57)
    %85 = triton_gpu.convert_layout %84 : tensor<16x16x!tt.ptr<f16>, #blocked> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %86 = tt.load %85 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %87 = arith.addf %82, %86 : tensor<16x16xf16, #blocked> loc(#loc59)
    %88 = arith.addi %78, %cst_1 : tensor<16x16xi32, #blocked> loc(#loc60)
    %89 = tt.addptr %28, %88 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc61)
    %90 = triton_gpu.convert_layout %89 : tensor<16x16x!tt.ptr<f16>, #blocked> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %91 = tt.load %90 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %92 = arith.addf %87, %91 : tensor<16x16xf16, #blocked> loc(#loc63)
    %93 = arith.addi %78, %cst_0 : tensor<16x16xi32, #blocked> loc(#loc64)
    %94 = tt.addptr %28, %93 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc65)
    %95 = triton_gpu.convert_layout %94 : tensor<16x16x!tt.ptr<f16>, #blocked> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %96 = tt.load %95 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %97 = arith.addf %92, %96 : tensor<16x16xf16, #blocked> loc(#loc67)
    %98 = arith.addi %78, %26 : tensor<16x16xi32, #blocked> loc(#loc68)
    %99 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc69)
    %100 = tt.addptr %99, %98 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc69)
    %101 = triton_gpu.convert_layout %100 : tensor<16x16x!tt.ptr<f16>, #blocked> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    %102 = triton_gpu.convert_layout %97 : tensor<16x16xf16, #blocked> -> tensor<16x16xf16, #blocked> loc(#loc70)
    tt.store %101, %102 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked4 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16, #blocked> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #blocked2> loc(#loc11)
    %9 = tt.splat %7 : i32 -> tensor<16xi32, #blocked2> loc(#loc12)
    %10 = arith.addi %9, %8 : tensor<16xi32, #blocked2> loc(#loc12)
    %11 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %12 = tt.splat %11 : i32 -> tensor<16xi32, #blocked2> loc(#loc14)
    %13 = arith.addi %12, %8 : tensor<16xi32, #blocked2> loc(#loc14)
    %14 = triton_gpu.convert_layout %10 : tensor<16xi32, #blocked2> -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> loc(#loc15)
    %15 = tt.expand_dims %14 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> -> tensor<16x1xi32, #blocked3> loc(#loc15)
    %16 = triton_gpu.convert_layout %15 : tensor<16x1xi32, #blocked3> -> tensor<16x1xi32, #blocked1> loc(#loc16)
    %17 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc16)
    %18 = arith.muli %16, %17 : tensor<16x1xi32, #blocked1> loc(#loc16)
    %19 = triton_gpu.convert_layout %13 : tensor<16xi32, #blocked2> -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked4}>> loc(#loc17)
    %20 = tt.expand_dims %19 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x16xi32, #blocked4> loc(#loc17)
    %21 = triton_gpu.convert_layout %20 : tensor<1x16xi32, #blocked4> -> tensor<1x16xi32, #blocked> loc(#loc17)
    %22 = tt.broadcast %18 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc17)
    %23 = triton_gpu.convert_layout %22 : tensor<16x16xi32, #blocked1> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %24 = tt.broadcast %21 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %25 = arith.addi %23, %24 : tensor<16x16xi32, #blocked> loc(#loc17)
    %26 = tt.splat %arg4 : i32 -> tensor<16x16xi32, #blocked> loc(#loc18)
    %27 = arith.addi %25, %26 : tensor<16x16xi32, #blocked> loc(#loc18)
    %28 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc19)
    %29 = tt.addptr %28, %27 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc19)
    %30 = triton_gpu.convert_layout %29 : tensor<16x16x!tt.ptr<f16>, #blocked> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %31 = tt.load %30 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %32 = arith.addf %31, %cst : tensor<16x16xf16, #blocked> loc(#loc21)
    %33 = arith.addi %16, %cst_6 : tensor<16x1xi32, #blocked1> loc(#loc22)
    %34 = arith.muli %33, %17 : tensor<16x1xi32, #blocked1> loc(#loc23)
    %35 = tt.broadcast %34 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc24)
    %36 = triton_gpu.convert_layout %35 : tensor<16x16xi32, #blocked1> -> tensor<16x16xi32, #blocked> loc(#loc24)
    %37 = arith.addi %36, %24 : tensor<16x16xi32, #blocked> loc(#loc24)
    %38 = arith.addi %37, %26 : tensor<16x16xi32, #blocked> loc(#loc25)
    %39 = tt.addptr %28, %38 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc26)
    %40 = triton_gpu.convert_layout %39 : tensor<16x16x!tt.ptr<f16>, #blocked> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %41 = tt.load %40 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %42 = arith.addf %32, %41 : tensor<16x16xf16, #blocked> loc(#loc28)
    %43 = arith.addi %16, %cst_5 : tensor<16x1xi32, #blocked1> loc(#loc29)
    %44 = arith.muli %43, %17 : tensor<16x1xi32, #blocked1> loc(#loc30)
    %45 = tt.broadcast %44 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc31)
    %46 = triton_gpu.convert_layout %45 : tensor<16x16xi32, #blocked1> -> tensor<16x16xi32, #blocked> loc(#loc31)
    %47 = arith.addi %46, %24 : tensor<16x16xi32, #blocked> loc(#loc31)
    %48 = arith.addi %47, %26 : tensor<16x16xi32, #blocked> loc(#loc32)
    %49 = tt.addptr %28, %48 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc33)
    %50 = triton_gpu.convert_layout %49 : tensor<16x16x!tt.ptr<f16>, #blocked> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %51 = tt.load %50 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %52 = arith.addf %42, %51 : tensor<16x16xf16, #blocked> loc(#loc35)
    %53 = arith.addi %16, %cst_4 : tensor<16x1xi32, #blocked1> loc(#loc36)
    %54 = arith.muli %53, %17 : tensor<16x1xi32, #blocked1> loc(#loc37)
    %55 = tt.broadcast %54 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc38)
    %56 = triton_gpu.convert_layout %55 : tensor<16x16xi32, #blocked1> -> tensor<16x16xi32, #blocked> loc(#loc38)
    %57 = arith.addi %56, %24 : tensor<16x16xi32, #blocked> loc(#loc38)
    %58 = arith.addi %57, %26 : tensor<16x16xi32, #blocked> loc(#loc39)
    %59 = tt.addptr %28, %58 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc40)
    %60 = triton_gpu.convert_layout %59 : tensor<16x16x!tt.ptr<f16>, #blocked> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %61 = tt.load %60 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %62 = arith.addf %52, %61 : tensor<16x16xf16, #blocked> loc(#loc42)
    %63 = arith.addi %16, %cst_3 : tensor<16x1xi32, #blocked1> loc(#loc43)
    %64 = arith.muli %63, %17 : tensor<16x1xi32, #blocked1> loc(#loc44)
    %65 = tt.broadcast %64 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc45)
    %66 = triton_gpu.convert_layout %65 : tensor<16x16xi32, #blocked1> -> tensor<16x16xi32, #blocked> loc(#loc45)
    %67 = arith.addi %66, %24 : tensor<16x16xi32, #blocked> loc(#loc45)
    %68 = arith.addi %67, %26 : tensor<16x16xi32, #blocked> loc(#loc46)
    %69 = tt.addptr %28, %68 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc47)
    %70 = triton_gpu.convert_layout %69 : tensor<16x16x!tt.ptr<f16>, #blocked> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %71 = tt.load %70 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %72 = arith.addf %62, %71 : tensor<16x16xf16, #blocked> loc(#loc49)
    %73 = tt.splat %arg4 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc50)
    %74 = arith.addi %16, %73 : tensor<16x1xi32, #blocked1> loc(#loc50)
    %75 = arith.muli %74, %17 : tensor<16x1xi32, #blocked1> loc(#loc51)
    %76 = tt.broadcast %75 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc52)
    %77 = triton_gpu.convert_layout %76 : tensor<16x16xi32, #blocked1> -> tensor<16x16xi32, #blocked> loc(#loc52)
    %78 = arith.addi %77, %24 : tensor<16x16xi32, #blocked> loc(#loc52)
    %79 = tt.addptr %28, %78 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc53)
    %80 = triton_gpu.convert_layout %79 : tensor<16x16x!tt.ptr<f16>, #blocked> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %81 = tt.load %80 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %82 = arith.addf %72, %81 : tensor<16x16xf16, #blocked> loc(#loc55)
    %83 = arith.addi %78, %cst_2 : tensor<16x16xi32, #blocked> loc(#loc56)
    %84 = tt.addptr %28, %83 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc57)
    %85 = triton_gpu.convert_layout %84 : tensor<16x16x!tt.ptr<f16>, #blocked> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %86 = tt.load %85 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %87 = arith.addf %82, %86 : tensor<16x16xf16, #blocked> loc(#loc59)
    %88 = arith.addi %78, %cst_1 : tensor<16x16xi32, #blocked> loc(#loc60)
    %89 = tt.addptr %28, %88 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc61)
    %90 = triton_gpu.convert_layout %89 : tensor<16x16x!tt.ptr<f16>, #blocked> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %91 = tt.load %90 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %92 = arith.addf %87, %91 : tensor<16x16xf16, #blocked> loc(#loc63)
    %93 = arith.addi %78, %cst_0 : tensor<16x16xi32, #blocked> loc(#loc64)
    %94 = tt.addptr %28, %93 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc65)
    %95 = triton_gpu.convert_layout %94 : tensor<16x16x!tt.ptr<f16>, #blocked> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %96 = tt.load %95 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %97 = arith.addf %92, %96 : tensor<16x16xf16, #blocked> loc(#loc67)
    %98 = arith.addi %78, %26 : tensor<16x16xi32, #blocked> loc(#loc68)
    %99 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc69)
    %100 = tt.addptr %99, %98 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc69)
    %101 = triton_gpu.convert_layout %100 : tensor<16x16x!tt.ptr<f16>, #blocked> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    %102 = triton_gpu.convert_layout %97 : tensor<16x16xf16, #blocked> -> tensor<16x16xf16, #blocked> loc(#loc70)
    tt.store %101, %102 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before TritonGPUOptimizeThreadLocality (tritongpu-optimize-thread-locality) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16, #blocked> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc11)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc11)
    %10 = tt.splat %7 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %11 = arith.addi %10, %8 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %12 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %13 = tt.splat %12 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %14 = arith.addi %13, %9 : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %15 = tt.expand_dims %11 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc15)
    %16 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked> loc(#loc16)
    %17 = arith.muli %15, %16 : tensor<16x1xi32, #blocked> loc(#loc16)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc17)
    %19 = tt.broadcast %17 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %20 = tt.broadcast %18 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %21 = arith.addi %19, %20 : tensor<16x16xi32, #blocked> loc(#loc17)
    %22 = tt.splat %arg4 : i32 -> tensor<16x16xi32, #blocked> loc(#loc18)
    %23 = arith.addi %21, %22 : tensor<16x16xi32, #blocked> loc(#loc18)
    %24 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc19)
    %25 = tt.addptr %24, %23 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc19)
    %26 = tt.load %25 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %27 = arith.addf %26, %cst : tensor<16x16xf16, #blocked> loc(#loc21)
    %28 = arith.addi %15, %cst_6 : tensor<16x1xi32, #blocked> loc(#loc22)
    %29 = arith.muli %28, %16 : tensor<16x1xi32, #blocked> loc(#loc23)
    %30 = tt.broadcast %29 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc24)
    %31 = arith.addi %30, %20 : tensor<16x16xi32, #blocked> loc(#loc24)
    %32 = arith.addi %31, %22 : tensor<16x16xi32, #blocked> loc(#loc25)
    %33 = tt.addptr %24, %32 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %35 = arith.addf %27, %34 : tensor<16x16xf16, #blocked> loc(#loc28)
    %36 = arith.addi %15, %cst_5 : tensor<16x1xi32, #blocked> loc(#loc29)
    %37 = arith.muli %36, %16 : tensor<16x1xi32, #blocked> loc(#loc30)
    %38 = tt.broadcast %37 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc31)
    %39 = arith.addi %38, %20 : tensor<16x16xi32, #blocked> loc(#loc31)
    %40 = arith.addi %39, %22 : tensor<16x16xi32, #blocked> loc(#loc32)
    %41 = tt.addptr %24, %40 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc33)
    %42 = tt.load %41 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %43 = arith.addf %35, %42 : tensor<16x16xf16, #blocked> loc(#loc35)
    %44 = arith.addi %15, %cst_4 : tensor<16x1xi32, #blocked> loc(#loc36)
    %45 = arith.muli %44, %16 : tensor<16x1xi32, #blocked> loc(#loc37)
    %46 = tt.broadcast %45 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc38)
    %47 = arith.addi %46, %20 : tensor<16x16xi32, #blocked> loc(#loc38)
    %48 = arith.addi %47, %22 : tensor<16x16xi32, #blocked> loc(#loc39)
    %49 = tt.addptr %24, %48 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc40)
    %50 = tt.load %49 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %51 = arith.addf %43, %50 : tensor<16x16xf16, #blocked> loc(#loc42)
    %52 = arith.addi %15, %cst_3 : tensor<16x1xi32, #blocked> loc(#loc43)
    %53 = arith.muli %52, %16 : tensor<16x1xi32, #blocked> loc(#loc44)
    %54 = tt.broadcast %53 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc45)
    %55 = arith.addi %54, %20 : tensor<16x16xi32, #blocked> loc(#loc45)
    %56 = arith.addi %55, %22 : tensor<16x16xi32, #blocked> loc(#loc46)
    %57 = tt.addptr %24, %56 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc47)
    %58 = tt.load %57 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %59 = arith.addf %51, %58 : tensor<16x16xf16, #blocked> loc(#loc49)
    %60 = tt.splat %arg4 : i32 -> tensor<16x1xi32, #blocked> loc(#loc50)
    %61 = arith.addi %15, %60 : tensor<16x1xi32, #blocked> loc(#loc50)
    %62 = arith.muli %61, %16 : tensor<16x1xi32, #blocked> loc(#loc51)
    %63 = tt.broadcast %62 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc52)
    %64 = arith.addi %63, %20 : tensor<16x16xi32, #blocked> loc(#loc52)
    %65 = tt.addptr %24, %64 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc53)
    %66 = tt.load %65 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %67 = arith.addf %59, %66 : tensor<16x16xf16, #blocked> loc(#loc55)
    %68 = arith.addi %64, %cst_2 : tensor<16x16xi32, #blocked> loc(#loc56)
    %69 = tt.addptr %24, %68 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc57)
    %70 = tt.load %69 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %71 = arith.addf %67, %70 : tensor<16x16xf16, #blocked> loc(#loc59)
    %72 = arith.addi %64, %cst_1 : tensor<16x16xi32, #blocked> loc(#loc60)
    %73 = tt.addptr %24, %72 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc61)
    %74 = tt.load %73 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %75 = arith.addf %71, %74 : tensor<16x16xf16, #blocked> loc(#loc63)
    %76 = arith.addi %64, %cst_0 : tensor<16x16xi32, #blocked> loc(#loc64)
    %77 = tt.addptr %24, %76 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc65)
    %78 = tt.load %77 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %79 = arith.addf %75, %78 : tensor<16x16xf16, #blocked> loc(#loc67)
    %80 = arith.addi %64, %22 : tensor<16x16xi32, #blocked> loc(#loc68)
    %81 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc69)
    %82 = tt.addptr %81, %80 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc69)
    tt.store %82, %79 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before TritonGPUAccelerateMatmul (tritongpu-accelerate-matmul) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16, #blocked> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc11)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc11)
    %10 = tt.splat %7 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %11 = arith.addi %10, %8 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %12 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %13 = tt.splat %12 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %14 = arith.addi %13, %9 : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %15 = tt.expand_dims %11 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc15)
    %16 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked> loc(#loc16)
    %17 = arith.muli %15, %16 : tensor<16x1xi32, #blocked> loc(#loc16)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc17)
    %19 = tt.broadcast %17 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %20 = tt.broadcast %18 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %21 = arith.addi %19, %20 : tensor<16x16xi32, #blocked> loc(#loc17)
    %22 = tt.splat %arg4 : i32 -> tensor<16x16xi32, #blocked> loc(#loc18)
    %23 = arith.addi %21, %22 : tensor<16x16xi32, #blocked> loc(#loc18)
    %24 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc19)
    %25 = tt.addptr %24, %23 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc19)
    %26 = tt.load %25 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %27 = arith.addf %26, %cst : tensor<16x16xf16, #blocked> loc(#loc21)
    %28 = arith.addi %15, %cst_6 : tensor<16x1xi32, #blocked> loc(#loc22)
    %29 = arith.muli %28, %16 : tensor<16x1xi32, #blocked> loc(#loc23)
    %30 = tt.broadcast %29 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc24)
    %31 = arith.addi %30, %20 : tensor<16x16xi32, #blocked> loc(#loc24)
    %32 = arith.addi %31, %22 : tensor<16x16xi32, #blocked> loc(#loc25)
    %33 = tt.addptr %24, %32 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %35 = arith.addf %27, %34 : tensor<16x16xf16, #blocked> loc(#loc28)
    %36 = arith.addi %15, %cst_5 : tensor<16x1xi32, #blocked> loc(#loc29)
    %37 = arith.muli %36, %16 : tensor<16x1xi32, #blocked> loc(#loc30)
    %38 = tt.broadcast %37 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc31)
    %39 = arith.addi %38, %20 : tensor<16x16xi32, #blocked> loc(#loc31)
    %40 = arith.addi %39, %22 : tensor<16x16xi32, #blocked> loc(#loc32)
    %41 = tt.addptr %24, %40 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc33)
    %42 = tt.load %41 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %43 = arith.addf %35, %42 : tensor<16x16xf16, #blocked> loc(#loc35)
    %44 = arith.addi %15, %cst_4 : tensor<16x1xi32, #blocked> loc(#loc36)
    %45 = arith.muli %44, %16 : tensor<16x1xi32, #blocked> loc(#loc37)
    %46 = tt.broadcast %45 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc38)
    %47 = arith.addi %46, %20 : tensor<16x16xi32, #blocked> loc(#loc38)
    %48 = arith.addi %47, %22 : tensor<16x16xi32, #blocked> loc(#loc39)
    %49 = tt.addptr %24, %48 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc40)
    %50 = tt.load %49 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %51 = arith.addf %43, %50 : tensor<16x16xf16, #blocked> loc(#loc42)
    %52 = arith.addi %15, %cst_3 : tensor<16x1xi32, #blocked> loc(#loc43)
    %53 = arith.muli %52, %16 : tensor<16x1xi32, #blocked> loc(#loc44)
    %54 = tt.broadcast %53 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc45)
    %55 = arith.addi %54, %20 : tensor<16x16xi32, #blocked> loc(#loc45)
    %56 = arith.addi %55, %22 : tensor<16x16xi32, #blocked> loc(#loc46)
    %57 = tt.addptr %24, %56 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc47)
    %58 = tt.load %57 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %59 = arith.addf %51, %58 : tensor<16x16xf16, #blocked> loc(#loc49)
    %60 = tt.splat %arg4 : i32 -> tensor<16x1xi32, #blocked> loc(#loc50)
    %61 = arith.addi %15, %60 : tensor<16x1xi32, #blocked> loc(#loc50)
    %62 = arith.muli %61, %16 : tensor<16x1xi32, #blocked> loc(#loc51)
    %63 = tt.broadcast %62 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc52)
    %64 = arith.addi %63, %20 : tensor<16x16xi32, #blocked> loc(#loc52)
    %65 = tt.addptr %24, %64 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc53)
    %66 = tt.load %65 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %67 = arith.addf %59, %66 : tensor<16x16xf16, #blocked> loc(#loc55)
    %68 = arith.addi %64, %cst_2 : tensor<16x16xi32, #blocked> loc(#loc56)
    %69 = tt.addptr %24, %68 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc57)
    %70 = tt.load %69 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %71 = arith.addf %67, %70 : tensor<16x16xf16, #blocked> loc(#loc59)
    %72 = arith.addi %64, %cst_1 : tensor<16x16xi32, #blocked> loc(#loc60)
    %73 = tt.addptr %24, %72 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc61)
    %74 = tt.load %73 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %75 = arith.addf %71, %74 : tensor<16x16xf16, #blocked> loc(#loc63)
    %76 = arith.addi %64, %cst_0 : tensor<16x16xi32, #blocked> loc(#loc64)
    %77 = tt.addptr %24, %76 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc65)
    %78 = tt.load %77 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %79 = arith.addf %75, %78 : tensor<16x16xf16, #blocked> loc(#loc67)
    %80 = arith.addi %64, %22 : tensor<16x16xi32, #blocked> loc(#loc68)
    %81 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc69)
    %82 = tt.addptr %81, %80 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc69)
    tt.store %82, %79 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16, #blocked> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc11)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc11)
    %10 = tt.splat %7 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %11 = arith.addi %10, %8 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %12 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %13 = tt.splat %12 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %14 = arith.addi %13, %9 : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %15 = tt.expand_dims %11 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc15)
    %16 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked> loc(#loc16)
    %17 = arith.muli %15, %16 : tensor<16x1xi32, #blocked> loc(#loc16)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc17)
    %19 = tt.broadcast %17 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %20 = tt.broadcast %18 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %21 = arith.addi %19, %20 : tensor<16x16xi32, #blocked> loc(#loc17)
    %22 = tt.splat %arg4 : i32 -> tensor<16x16xi32, #blocked> loc(#loc18)
    %23 = arith.addi %21, %22 : tensor<16x16xi32, #blocked> loc(#loc18)
    %24 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc19)
    %25 = tt.addptr %24, %23 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc19)
    %26 = tt.load %25 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %27 = arith.addf %26, %cst : tensor<16x16xf16, #blocked> loc(#loc21)
    %28 = arith.addi %15, %cst_6 : tensor<16x1xi32, #blocked> loc(#loc22)
    %29 = arith.muli %28, %16 : tensor<16x1xi32, #blocked> loc(#loc23)
    %30 = tt.broadcast %29 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc24)
    %31 = arith.addi %30, %20 : tensor<16x16xi32, #blocked> loc(#loc24)
    %32 = arith.addi %31, %22 : tensor<16x16xi32, #blocked> loc(#loc25)
    %33 = tt.addptr %24, %32 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %35 = arith.addf %27, %34 : tensor<16x16xf16, #blocked> loc(#loc28)
    %36 = arith.addi %15, %cst_5 : tensor<16x1xi32, #blocked> loc(#loc29)
    %37 = arith.muli %36, %16 : tensor<16x1xi32, #blocked> loc(#loc30)
    %38 = tt.broadcast %37 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc31)
    %39 = arith.addi %38, %20 : tensor<16x16xi32, #blocked> loc(#loc31)
    %40 = arith.addi %39, %22 : tensor<16x16xi32, #blocked> loc(#loc32)
    %41 = tt.addptr %24, %40 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc33)
    %42 = tt.load %41 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %43 = arith.addf %35, %42 : tensor<16x16xf16, #blocked> loc(#loc35)
    %44 = arith.addi %15, %cst_4 : tensor<16x1xi32, #blocked> loc(#loc36)
    %45 = arith.muli %44, %16 : tensor<16x1xi32, #blocked> loc(#loc37)
    %46 = tt.broadcast %45 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc38)
    %47 = arith.addi %46, %20 : tensor<16x16xi32, #blocked> loc(#loc38)
    %48 = arith.addi %47, %22 : tensor<16x16xi32, #blocked> loc(#loc39)
    %49 = tt.addptr %24, %48 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc40)
    %50 = tt.load %49 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %51 = arith.addf %43, %50 : tensor<16x16xf16, #blocked> loc(#loc42)
    %52 = arith.addi %15, %cst_3 : tensor<16x1xi32, #blocked> loc(#loc43)
    %53 = arith.muli %52, %16 : tensor<16x1xi32, #blocked> loc(#loc44)
    %54 = tt.broadcast %53 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc45)
    %55 = arith.addi %54, %20 : tensor<16x16xi32, #blocked> loc(#loc45)
    %56 = arith.addi %55, %22 : tensor<16x16xi32, #blocked> loc(#loc46)
    %57 = tt.addptr %24, %56 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc47)
    %58 = tt.load %57 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %59 = arith.addf %51, %58 : tensor<16x16xf16, #blocked> loc(#loc49)
    %60 = tt.splat %arg4 : i32 -> tensor<16x1xi32, #blocked> loc(#loc50)
    %61 = arith.addi %15, %60 : tensor<16x1xi32, #blocked> loc(#loc50)
    %62 = arith.muli %61, %16 : tensor<16x1xi32, #blocked> loc(#loc51)
    %63 = tt.broadcast %62 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc52)
    %64 = arith.addi %63, %20 : tensor<16x16xi32, #blocked> loc(#loc52)
    %65 = tt.addptr %24, %64 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc53)
    %66 = tt.load %65 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %67 = arith.addf %59, %66 : tensor<16x16xf16, #blocked> loc(#loc55)
    %68 = arith.addi %64, %cst_2 : tensor<16x16xi32, #blocked> loc(#loc56)
    %69 = tt.addptr %24, %68 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc57)
    %70 = tt.load %69 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %71 = arith.addf %67, %70 : tensor<16x16xf16, #blocked> loc(#loc59)
    %72 = arith.addi %64, %cst_1 : tensor<16x16xi32, #blocked> loc(#loc60)
    %73 = tt.addptr %24, %72 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc61)
    %74 = tt.load %73 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %75 = arith.addf %71, %74 : tensor<16x16xf16, #blocked> loc(#loc63)
    %76 = arith.addi %64, %cst_0 : tensor<16x16xi32, #blocked> loc(#loc64)
    %77 = tt.addptr %24, %76 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc65)
    %78 = tt.load %77 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %79 = arith.addf %75, %78 : tensor<16x16xf16, #blocked> loc(#loc67)
    %80 = arith.addi %64, %22 : tensor<16x16xi32, #blocked> loc(#loc68)
    %81 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc69)
    %82 = tt.addptr %81, %80 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc69)
    tt.store %82, %79 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16, #blocked> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc11)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc11)
    %10 = tt.splat %7 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %11 = arith.addi %10, %8 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %12 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %13 = tt.splat %12 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %14 = arith.addi %13, %9 : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %15 = tt.expand_dims %11 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc15)
    %16 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked> loc(#loc16)
    %17 = arith.muli %15, %16 : tensor<16x1xi32, #blocked> loc(#loc16)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc17)
    %19 = tt.broadcast %17 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %20 = tt.broadcast %18 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %21 = arith.addi %19, %20 : tensor<16x16xi32, #blocked> loc(#loc17)
    %22 = tt.splat %arg4 : i32 -> tensor<16x16xi32, #blocked> loc(#loc18)
    %23 = arith.addi %21, %22 : tensor<16x16xi32, #blocked> loc(#loc18)
    %24 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc19)
    %25 = tt.addptr %24, %23 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc19)
    %26 = tt.load %25 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %27 = arith.addf %26, %cst : tensor<16x16xf16, #blocked> loc(#loc21)
    %28 = arith.addi %15, %cst_6 : tensor<16x1xi32, #blocked> loc(#loc22)
    %29 = arith.muli %28, %16 : tensor<16x1xi32, #blocked> loc(#loc23)
    %30 = tt.broadcast %29 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc24)
    %31 = arith.addi %30, %20 : tensor<16x16xi32, #blocked> loc(#loc24)
    %32 = arith.addi %31, %22 : tensor<16x16xi32, #blocked> loc(#loc25)
    %33 = tt.addptr %24, %32 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %35 = arith.addf %27, %34 : tensor<16x16xf16, #blocked> loc(#loc28)
    %36 = arith.addi %15, %cst_5 : tensor<16x1xi32, #blocked> loc(#loc29)
    %37 = arith.muli %36, %16 : tensor<16x1xi32, #blocked> loc(#loc30)
    %38 = tt.broadcast %37 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc31)
    %39 = arith.addi %38, %20 : tensor<16x16xi32, #blocked> loc(#loc31)
    %40 = arith.addi %39, %22 : tensor<16x16xi32, #blocked> loc(#loc32)
    %41 = tt.addptr %24, %40 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc33)
    %42 = tt.load %41 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %43 = arith.addf %35, %42 : tensor<16x16xf16, #blocked> loc(#loc35)
    %44 = arith.addi %15, %cst_4 : tensor<16x1xi32, #blocked> loc(#loc36)
    %45 = arith.muli %44, %16 : tensor<16x1xi32, #blocked> loc(#loc37)
    %46 = tt.broadcast %45 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc38)
    %47 = arith.addi %46, %20 : tensor<16x16xi32, #blocked> loc(#loc38)
    %48 = arith.addi %47, %22 : tensor<16x16xi32, #blocked> loc(#loc39)
    %49 = tt.addptr %24, %48 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc40)
    %50 = tt.load %49 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %51 = arith.addf %43, %50 : tensor<16x16xf16, #blocked> loc(#loc42)
    %52 = arith.addi %15, %cst_3 : tensor<16x1xi32, #blocked> loc(#loc43)
    %53 = arith.muli %52, %16 : tensor<16x1xi32, #blocked> loc(#loc44)
    %54 = tt.broadcast %53 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc45)
    %55 = arith.addi %54, %20 : tensor<16x16xi32, #blocked> loc(#loc45)
    %56 = arith.addi %55, %22 : tensor<16x16xi32, #blocked> loc(#loc46)
    %57 = tt.addptr %24, %56 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc47)
    %58 = tt.load %57 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %59 = arith.addf %51, %58 : tensor<16x16xf16, #blocked> loc(#loc49)
    %60 = tt.splat %arg4 : i32 -> tensor<16x1xi32, #blocked> loc(#loc50)
    %61 = arith.addi %15, %60 : tensor<16x1xi32, #blocked> loc(#loc50)
    %62 = arith.muli %61, %16 : tensor<16x1xi32, #blocked> loc(#loc51)
    %63 = tt.broadcast %62 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc52)
    %64 = arith.addi %63, %20 : tensor<16x16xi32, #blocked> loc(#loc52)
    %65 = tt.addptr %24, %64 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc53)
    %66 = tt.load %65 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %67 = arith.addf %59, %66 : tensor<16x16xf16, #blocked> loc(#loc55)
    %68 = arith.addi %64, %cst_2 : tensor<16x16xi32, #blocked> loc(#loc56)
    %69 = tt.addptr %24, %68 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc57)
    %70 = tt.load %69 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %71 = arith.addf %67, %70 : tensor<16x16xf16, #blocked> loc(#loc59)
    %72 = arith.addi %64, %cst_1 : tensor<16x16xi32, #blocked> loc(#loc60)
    %73 = tt.addptr %24, %72 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc61)
    %74 = tt.load %73 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %75 = arith.addf %71, %74 : tensor<16x16xf16, #blocked> loc(#loc63)
    %76 = arith.addi %64, %cst_0 : tensor<16x16xi32, #blocked> loc(#loc64)
    %77 = tt.addptr %24, %76 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc65)
    %78 = tt.load %77 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %79 = arith.addf %75, %78 : tensor<16x16xf16, #blocked> loc(#loc67)
    %80 = arith.addi %64, %22 : tensor<16x16xi32, #blocked> loc(#loc68)
    %81 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc69)
    %82 = tt.addptr %81, %80 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc69)
    tt.store %82, %79 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16, #blocked> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc11)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc11)
    %10 = tt.splat %7 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %11 = arith.addi %10, %8 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %12 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %13 = tt.splat %12 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %14 = arith.addi %13, %9 : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %15 = tt.expand_dims %11 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc15)
    %16 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked> loc(#loc16)
    %17 = arith.muli %15, %16 : tensor<16x1xi32, #blocked> loc(#loc16)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc17)
    %19 = tt.broadcast %17 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %20 = tt.broadcast %18 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %21 = arith.addi %19, %20 : tensor<16x16xi32, #blocked> loc(#loc17)
    %22 = tt.splat %arg4 : i32 -> tensor<16x16xi32, #blocked> loc(#loc18)
    %23 = arith.addi %21, %22 : tensor<16x16xi32, #blocked> loc(#loc18)
    %24 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc19)
    %25 = tt.addptr %24, %23 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc19)
    %26 = tt.load %25 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %27 = arith.addf %26, %cst : tensor<16x16xf16, #blocked> loc(#loc21)
    %28 = arith.addi %15, %cst_6 : tensor<16x1xi32, #blocked> loc(#loc22)
    %29 = arith.muli %28, %16 : tensor<16x1xi32, #blocked> loc(#loc23)
    %30 = tt.broadcast %29 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc24)
    %31 = arith.addi %30, %20 : tensor<16x16xi32, #blocked> loc(#loc24)
    %32 = arith.addi %31, %22 : tensor<16x16xi32, #blocked> loc(#loc25)
    %33 = tt.addptr %24, %32 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %35 = arith.addf %27, %34 : tensor<16x16xf16, #blocked> loc(#loc28)
    %36 = arith.addi %15, %cst_5 : tensor<16x1xi32, #blocked> loc(#loc29)
    %37 = arith.muli %36, %16 : tensor<16x1xi32, #blocked> loc(#loc30)
    %38 = tt.broadcast %37 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc31)
    %39 = arith.addi %38, %20 : tensor<16x16xi32, #blocked> loc(#loc31)
    %40 = arith.addi %39, %22 : tensor<16x16xi32, #blocked> loc(#loc32)
    %41 = tt.addptr %24, %40 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc33)
    %42 = tt.load %41 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %43 = arith.addf %35, %42 : tensor<16x16xf16, #blocked> loc(#loc35)
    %44 = arith.addi %15, %cst_4 : tensor<16x1xi32, #blocked> loc(#loc36)
    %45 = arith.muli %44, %16 : tensor<16x1xi32, #blocked> loc(#loc37)
    %46 = tt.broadcast %45 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc38)
    %47 = arith.addi %46, %20 : tensor<16x16xi32, #blocked> loc(#loc38)
    %48 = arith.addi %47, %22 : tensor<16x16xi32, #blocked> loc(#loc39)
    %49 = tt.addptr %24, %48 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc40)
    %50 = tt.load %49 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %51 = arith.addf %43, %50 : tensor<16x16xf16, #blocked> loc(#loc42)
    %52 = arith.addi %15, %cst_3 : tensor<16x1xi32, #blocked> loc(#loc43)
    %53 = arith.muli %52, %16 : tensor<16x1xi32, #blocked> loc(#loc44)
    %54 = tt.broadcast %53 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc45)
    %55 = arith.addi %54, %20 : tensor<16x16xi32, #blocked> loc(#loc45)
    %56 = arith.addi %55, %22 : tensor<16x16xi32, #blocked> loc(#loc46)
    %57 = tt.addptr %24, %56 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc47)
    %58 = tt.load %57 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %59 = arith.addf %51, %58 : tensor<16x16xf16, #blocked> loc(#loc49)
    %60 = tt.splat %arg4 : i32 -> tensor<16x1xi32, #blocked> loc(#loc50)
    %61 = arith.addi %15, %60 : tensor<16x1xi32, #blocked> loc(#loc50)
    %62 = arith.muli %61, %16 : tensor<16x1xi32, #blocked> loc(#loc51)
    %63 = tt.broadcast %62 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc52)
    %64 = arith.addi %63, %20 : tensor<16x16xi32, #blocked> loc(#loc52)
    %65 = tt.addptr %24, %64 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc53)
    %66 = tt.load %65 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %67 = arith.addf %59, %66 : tensor<16x16xf16, #blocked> loc(#loc55)
    %68 = arith.addi %64, %cst_2 : tensor<16x16xi32, #blocked> loc(#loc56)
    %69 = tt.addptr %24, %68 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc57)
    %70 = tt.load %69 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %71 = arith.addf %67, %70 : tensor<16x16xf16, #blocked> loc(#loc59)
    %72 = arith.addi %64, %cst_1 : tensor<16x16xi32, #blocked> loc(#loc60)
    %73 = tt.addptr %24, %72 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc61)
    %74 = tt.load %73 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %75 = arith.addf %71, %74 : tensor<16x16xf16, #blocked> loc(#loc63)
    %76 = arith.addi %64, %cst_0 : tensor<16x16xi32, #blocked> loc(#loc64)
    %77 = tt.addptr %24, %76 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc65)
    %78 = tt.load %77 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %79 = arith.addf %75, %78 : tensor<16x16xf16, #blocked> loc(#loc67)
    %80 = arith.addi %64, %22 : tensor<16x16xi32, #blocked> loc(#loc68)
    %81 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc69)
    %82 = tt.addptr %81, %80 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc69)
    tt.store %82, %79 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before TritonGPUPrefetch (tritongpu-prefetch) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16, #blocked> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc11)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc11)
    %10 = tt.splat %7 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %11 = arith.addi %10, %8 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %12 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %13 = tt.splat %12 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %14 = arith.addi %13, %9 : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %15 = tt.expand_dims %11 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc15)
    %16 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked> loc(#loc16)
    %17 = arith.muli %15, %16 : tensor<16x1xi32, #blocked> loc(#loc16)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc17)
    %19 = tt.broadcast %17 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %20 = tt.broadcast %18 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %21 = arith.addi %19, %20 : tensor<16x16xi32, #blocked> loc(#loc17)
    %22 = tt.splat %arg4 : i32 -> tensor<16x16xi32, #blocked> loc(#loc18)
    %23 = arith.addi %21, %22 : tensor<16x16xi32, #blocked> loc(#loc18)
    %24 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc19)
    %25 = tt.addptr %24, %23 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc19)
    %26 = tt.load %25 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %27 = arith.addf %26, %cst : tensor<16x16xf16, #blocked> loc(#loc21)
    %28 = arith.addi %15, %cst_6 : tensor<16x1xi32, #blocked> loc(#loc22)
    %29 = arith.muli %28, %16 : tensor<16x1xi32, #blocked> loc(#loc23)
    %30 = tt.broadcast %29 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc24)
    %31 = arith.addi %30, %20 : tensor<16x16xi32, #blocked> loc(#loc24)
    %32 = arith.addi %31, %22 : tensor<16x16xi32, #blocked> loc(#loc25)
    %33 = tt.addptr %24, %32 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %35 = arith.addf %27, %34 : tensor<16x16xf16, #blocked> loc(#loc28)
    %36 = arith.addi %15, %cst_5 : tensor<16x1xi32, #blocked> loc(#loc29)
    %37 = arith.muli %36, %16 : tensor<16x1xi32, #blocked> loc(#loc30)
    %38 = tt.broadcast %37 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc31)
    %39 = arith.addi %38, %20 : tensor<16x16xi32, #blocked> loc(#loc31)
    %40 = arith.addi %39, %22 : tensor<16x16xi32, #blocked> loc(#loc32)
    %41 = tt.addptr %24, %40 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc33)
    %42 = tt.load %41 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %43 = arith.addf %35, %42 : tensor<16x16xf16, #blocked> loc(#loc35)
    %44 = arith.addi %15, %cst_4 : tensor<16x1xi32, #blocked> loc(#loc36)
    %45 = arith.muli %44, %16 : tensor<16x1xi32, #blocked> loc(#loc37)
    %46 = tt.broadcast %45 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc38)
    %47 = arith.addi %46, %20 : tensor<16x16xi32, #blocked> loc(#loc38)
    %48 = arith.addi %47, %22 : tensor<16x16xi32, #blocked> loc(#loc39)
    %49 = tt.addptr %24, %48 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc40)
    %50 = tt.load %49 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %51 = arith.addf %43, %50 : tensor<16x16xf16, #blocked> loc(#loc42)
    %52 = arith.addi %15, %cst_3 : tensor<16x1xi32, #blocked> loc(#loc43)
    %53 = arith.muli %52, %16 : tensor<16x1xi32, #blocked> loc(#loc44)
    %54 = tt.broadcast %53 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc45)
    %55 = arith.addi %54, %20 : tensor<16x16xi32, #blocked> loc(#loc45)
    %56 = arith.addi %55, %22 : tensor<16x16xi32, #blocked> loc(#loc46)
    %57 = tt.addptr %24, %56 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc47)
    %58 = tt.load %57 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %59 = arith.addf %51, %58 : tensor<16x16xf16, #blocked> loc(#loc49)
    %60 = tt.splat %arg4 : i32 -> tensor<16x1xi32, #blocked> loc(#loc50)
    %61 = arith.addi %15, %60 : tensor<16x1xi32, #blocked> loc(#loc50)
    %62 = arith.muli %61, %16 : tensor<16x1xi32, #blocked> loc(#loc51)
    %63 = tt.broadcast %62 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc52)
    %64 = arith.addi %63, %20 : tensor<16x16xi32, #blocked> loc(#loc52)
    %65 = tt.addptr %24, %64 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc53)
    %66 = tt.load %65 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %67 = arith.addf %59, %66 : tensor<16x16xf16, #blocked> loc(#loc55)
    %68 = arith.addi %64, %cst_2 : tensor<16x16xi32, #blocked> loc(#loc56)
    %69 = tt.addptr %24, %68 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc57)
    %70 = tt.load %69 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %71 = arith.addf %67, %70 : tensor<16x16xf16, #blocked> loc(#loc59)
    %72 = arith.addi %64, %cst_1 : tensor<16x16xi32, #blocked> loc(#loc60)
    %73 = tt.addptr %24, %72 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc61)
    %74 = tt.load %73 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %75 = arith.addf %71, %74 : tensor<16x16xf16, #blocked> loc(#loc63)
    %76 = arith.addi %64, %cst_0 : tensor<16x16xi32, #blocked> loc(#loc64)
    %77 = tt.addptr %24, %76 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc65)
    %78 = tt.load %77 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %79 = arith.addf %75, %78 : tensor<16x16xf16, #blocked> loc(#loc67)
    %80 = arith.addi %64, %22 : tensor<16x16xi32, #blocked> loc(#loc68)
    %81 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc69)
    %82 = tt.addptr %81, %80 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc69)
    tt.store %82, %79 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16, #blocked> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc11)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc11)
    %10 = tt.splat %7 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %11 = arith.addi %10, %8 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %12 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %13 = tt.splat %12 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %14 = arith.addi %13, %9 : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %15 = tt.expand_dims %11 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc15)
    %16 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked> loc(#loc16)
    %17 = arith.muli %15, %16 : tensor<16x1xi32, #blocked> loc(#loc16)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc17)
    %19 = tt.broadcast %17 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %20 = tt.broadcast %18 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %21 = arith.addi %19, %20 : tensor<16x16xi32, #blocked> loc(#loc17)
    %22 = tt.splat %arg4 : i32 -> tensor<16x16xi32, #blocked> loc(#loc18)
    %23 = arith.addi %21, %22 : tensor<16x16xi32, #blocked> loc(#loc18)
    %24 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc19)
    %25 = tt.addptr %24, %23 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc19)
    %26 = tt.load %25 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %27 = arith.addf %26, %cst : tensor<16x16xf16, #blocked> loc(#loc21)
    %28 = arith.addi %15, %cst_6 : tensor<16x1xi32, #blocked> loc(#loc22)
    %29 = arith.muli %28, %16 : tensor<16x1xi32, #blocked> loc(#loc23)
    %30 = tt.broadcast %29 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc24)
    %31 = arith.addi %30, %20 : tensor<16x16xi32, #blocked> loc(#loc24)
    %32 = arith.addi %31, %22 : tensor<16x16xi32, #blocked> loc(#loc25)
    %33 = tt.addptr %24, %32 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %35 = arith.addf %27, %34 : tensor<16x16xf16, #blocked> loc(#loc28)
    %36 = arith.addi %15, %cst_5 : tensor<16x1xi32, #blocked> loc(#loc29)
    %37 = arith.muli %36, %16 : tensor<16x1xi32, #blocked> loc(#loc30)
    %38 = tt.broadcast %37 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc31)
    %39 = arith.addi %38, %20 : tensor<16x16xi32, #blocked> loc(#loc31)
    %40 = arith.addi %39, %22 : tensor<16x16xi32, #blocked> loc(#loc32)
    %41 = tt.addptr %24, %40 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc33)
    %42 = tt.load %41 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %43 = arith.addf %35, %42 : tensor<16x16xf16, #blocked> loc(#loc35)
    %44 = arith.addi %15, %cst_4 : tensor<16x1xi32, #blocked> loc(#loc36)
    %45 = arith.muli %44, %16 : tensor<16x1xi32, #blocked> loc(#loc37)
    %46 = tt.broadcast %45 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc38)
    %47 = arith.addi %46, %20 : tensor<16x16xi32, #blocked> loc(#loc38)
    %48 = arith.addi %47, %22 : tensor<16x16xi32, #blocked> loc(#loc39)
    %49 = tt.addptr %24, %48 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc40)
    %50 = tt.load %49 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %51 = arith.addf %43, %50 : tensor<16x16xf16, #blocked> loc(#loc42)
    %52 = arith.addi %15, %cst_3 : tensor<16x1xi32, #blocked> loc(#loc43)
    %53 = arith.muli %52, %16 : tensor<16x1xi32, #blocked> loc(#loc44)
    %54 = tt.broadcast %53 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc45)
    %55 = arith.addi %54, %20 : tensor<16x16xi32, #blocked> loc(#loc45)
    %56 = arith.addi %55, %22 : tensor<16x16xi32, #blocked> loc(#loc46)
    %57 = tt.addptr %24, %56 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc47)
    %58 = tt.load %57 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %59 = arith.addf %51, %58 : tensor<16x16xf16, #blocked> loc(#loc49)
    %60 = tt.splat %arg4 : i32 -> tensor<16x1xi32, #blocked> loc(#loc50)
    %61 = arith.addi %15, %60 : tensor<16x1xi32, #blocked> loc(#loc50)
    %62 = arith.muli %61, %16 : tensor<16x1xi32, #blocked> loc(#loc51)
    %63 = tt.broadcast %62 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc52)
    %64 = arith.addi %63, %20 : tensor<16x16xi32, #blocked> loc(#loc52)
    %65 = tt.addptr %24, %64 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc53)
    %66 = tt.load %65 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %67 = arith.addf %59, %66 : tensor<16x16xf16, #blocked> loc(#loc55)
    %68 = arith.addi %64, %cst_2 : tensor<16x16xi32, #blocked> loc(#loc56)
    %69 = tt.addptr %24, %68 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc57)
    %70 = tt.load %69 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %71 = arith.addf %67, %70 : tensor<16x16xf16, #blocked> loc(#loc59)
    %72 = arith.addi %64, %cst_1 : tensor<16x16xi32, #blocked> loc(#loc60)
    %73 = tt.addptr %24, %72 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc61)
    %74 = tt.load %73 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %75 = arith.addf %71, %74 : tensor<16x16xf16, #blocked> loc(#loc63)
    %76 = arith.addi %64, %cst_0 : tensor<16x16xi32, #blocked> loc(#loc64)
    %77 = tt.addptr %24, %76 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc65)
    %78 = tt.load %77 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %79 = arith.addf %75, %78 : tensor<16x16xf16, #blocked> loc(#loc67)
    %80 = arith.addi %64, %22 : tensor<16x16xi32, #blocked> loc(#loc68)
    %81 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc69)
    %82 = tt.addptr %81, %80 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc69)
    tt.store %82, %79 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16, #blocked> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc11)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc11)
    %10 = tt.splat %7 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %11 = arith.addi %10, %8 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %12 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %13 = tt.splat %12 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %14 = arith.addi %13, %9 : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %15 = tt.expand_dims %11 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc15)
    %16 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked> loc(#loc16)
    %17 = arith.muli %15, %16 : tensor<16x1xi32, #blocked> loc(#loc16)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc17)
    %19 = tt.broadcast %17 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %20 = tt.broadcast %18 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %21 = arith.addi %19, %20 : tensor<16x16xi32, #blocked> loc(#loc17)
    %22 = tt.splat %arg4 : i32 -> tensor<16x16xi32, #blocked> loc(#loc18)
    %23 = arith.addi %21, %22 : tensor<16x16xi32, #blocked> loc(#loc18)
    %24 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc19)
    %25 = tt.addptr %24, %23 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc19)
    %26 = tt.load %25 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %27 = arith.addf %26, %cst : tensor<16x16xf16, #blocked> loc(#loc21)
    %28 = arith.addi %15, %cst_6 : tensor<16x1xi32, #blocked> loc(#loc22)
    %29 = arith.muli %28, %16 : tensor<16x1xi32, #blocked> loc(#loc23)
    %30 = tt.broadcast %29 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc24)
    %31 = arith.addi %30, %20 : tensor<16x16xi32, #blocked> loc(#loc24)
    %32 = arith.addi %31, %22 : tensor<16x16xi32, #blocked> loc(#loc25)
    %33 = tt.addptr %24, %32 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %35 = arith.addf %27, %34 : tensor<16x16xf16, #blocked> loc(#loc28)
    %36 = arith.addi %15, %cst_5 : tensor<16x1xi32, #blocked> loc(#loc29)
    %37 = arith.muli %36, %16 : tensor<16x1xi32, #blocked> loc(#loc30)
    %38 = tt.broadcast %37 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc31)
    %39 = arith.addi %38, %20 : tensor<16x16xi32, #blocked> loc(#loc31)
    %40 = arith.addi %39, %22 : tensor<16x16xi32, #blocked> loc(#loc32)
    %41 = tt.addptr %24, %40 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc33)
    %42 = tt.load %41 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %43 = arith.addf %35, %42 : tensor<16x16xf16, #blocked> loc(#loc35)
    %44 = arith.addi %15, %cst_4 : tensor<16x1xi32, #blocked> loc(#loc36)
    %45 = arith.muli %44, %16 : tensor<16x1xi32, #blocked> loc(#loc37)
    %46 = tt.broadcast %45 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc38)
    %47 = arith.addi %46, %20 : tensor<16x16xi32, #blocked> loc(#loc38)
    %48 = arith.addi %47, %22 : tensor<16x16xi32, #blocked> loc(#loc39)
    %49 = tt.addptr %24, %48 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc40)
    %50 = tt.load %49 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %51 = arith.addf %43, %50 : tensor<16x16xf16, #blocked> loc(#loc42)
    %52 = arith.addi %15, %cst_3 : tensor<16x1xi32, #blocked> loc(#loc43)
    %53 = arith.muli %52, %16 : tensor<16x1xi32, #blocked> loc(#loc44)
    %54 = tt.broadcast %53 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc45)
    %55 = arith.addi %54, %20 : tensor<16x16xi32, #blocked> loc(#loc45)
    %56 = arith.addi %55, %22 : tensor<16x16xi32, #blocked> loc(#loc46)
    %57 = tt.addptr %24, %56 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc47)
    %58 = tt.load %57 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %59 = arith.addf %51, %58 : tensor<16x16xf16, #blocked> loc(#loc49)
    %60 = tt.splat %arg4 : i32 -> tensor<16x1xi32, #blocked> loc(#loc50)
    %61 = arith.addi %15, %60 : tensor<16x1xi32, #blocked> loc(#loc50)
    %62 = arith.muli %61, %16 : tensor<16x1xi32, #blocked> loc(#loc51)
    %63 = tt.broadcast %62 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc52)
    %64 = arith.addi %63, %20 : tensor<16x16xi32, #blocked> loc(#loc52)
    %65 = tt.addptr %24, %64 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc53)
    %66 = tt.load %65 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %67 = arith.addf %59, %66 : tensor<16x16xf16, #blocked> loc(#loc55)
    %68 = arith.addi %64, %cst_2 : tensor<16x16xi32, #blocked> loc(#loc56)
    %69 = tt.addptr %24, %68 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc57)
    %70 = tt.load %69 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %71 = arith.addf %67, %70 : tensor<16x16xf16, #blocked> loc(#loc59)
    %72 = arith.addi %64, %cst_1 : tensor<16x16xi32, #blocked> loc(#loc60)
    %73 = tt.addptr %24, %72 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc61)
    %74 = tt.load %73 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %75 = arith.addf %71, %74 : tensor<16x16xf16, #blocked> loc(#loc63)
    %76 = arith.addi %64, %cst_0 : tensor<16x16xi32, #blocked> loc(#loc64)
    %77 = tt.addptr %24, %76 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc65)
    %78 = tt.load %77 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %79 = arith.addf %75, %78 : tensor<16x16xf16, #blocked> loc(#loc67)
    %80 = arith.addi %64, %22 : tensor<16x16xi32, #blocked> loc(#loc68)
    %81 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc69)
    %82 = tt.addptr %81, %80 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc69)
    tt.store %82, %79 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before TritonGPUReduceDataDuplication (tritongpu-reduce-data-duplication) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16, #blocked> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc11)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc11)
    %10 = tt.splat %7 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %11 = arith.addi %10, %8 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %12 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %13 = tt.splat %12 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %14 = arith.addi %13, %9 : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %15 = tt.expand_dims %11 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc15)
    %16 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked> loc(#loc16)
    %17 = arith.muli %15, %16 : tensor<16x1xi32, #blocked> loc(#loc16)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc17)
    %19 = tt.broadcast %17 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %20 = tt.broadcast %18 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %21 = arith.addi %19, %20 : tensor<16x16xi32, #blocked> loc(#loc17)
    %22 = tt.splat %arg4 : i32 -> tensor<16x16xi32, #blocked> loc(#loc18)
    %23 = arith.addi %21, %22 : tensor<16x16xi32, #blocked> loc(#loc18)
    %24 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc19)
    %25 = tt.addptr %24, %23 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc19)
    %26 = tt.load %25 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %27 = arith.addf %26, %cst : tensor<16x16xf16, #blocked> loc(#loc21)
    %28 = arith.addi %15, %cst_6 : tensor<16x1xi32, #blocked> loc(#loc22)
    %29 = arith.muli %28, %16 : tensor<16x1xi32, #blocked> loc(#loc23)
    %30 = tt.broadcast %29 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc24)
    %31 = arith.addi %30, %20 : tensor<16x16xi32, #blocked> loc(#loc24)
    %32 = arith.addi %31, %22 : tensor<16x16xi32, #blocked> loc(#loc25)
    %33 = tt.addptr %24, %32 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %35 = arith.addf %27, %34 : tensor<16x16xf16, #blocked> loc(#loc28)
    %36 = arith.addi %15, %cst_5 : tensor<16x1xi32, #blocked> loc(#loc29)
    %37 = arith.muli %36, %16 : tensor<16x1xi32, #blocked> loc(#loc30)
    %38 = tt.broadcast %37 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc31)
    %39 = arith.addi %38, %20 : tensor<16x16xi32, #blocked> loc(#loc31)
    %40 = arith.addi %39, %22 : tensor<16x16xi32, #blocked> loc(#loc32)
    %41 = tt.addptr %24, %40 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc33)
    %42 = tt.load %41 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %43 = arith.addf %35, %42 : tensor<16x16xf16, #blocked> loc(#loc35)
    %44 = arith.addi %15, %cst_4 : tensor<16x1xi32, #blocked> loc(#loc36)
    %45 = arith.muli %44, %16 : tensor<16x1xi32, #blocked> loc(#loc37)
    %46 = tt.broadcast %45 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc38)
    %47 = arith.addi %46, %20 : tensor<16x16xi32, #blocked> loc(#loc38)
    %48 = arith.addi %47, %22 : tensor<16x16xi32, #blocked> loc(#loc39)
    %49 = tt.addptr %24, %48 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc40)
    %50 = tt.load %49 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %51 = arith.addf %43, %50 : tensor<16x16xf16, #blocked> loc(#loc42)
    %52 = arith.addi %15, %cst_3 : tensor<16x1xi32, #blocked> loc(#loc43)
    %53 = arith.muli %52, %16 : tensor<16x1xi32, #blocked> loc(#loc44)
    %54 = tt.broadcast %53 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc45)
    %55 = arith.addi %54, %20 : tensor<16x16xi32, #blocked> loc(#loc45)
    %56 = arith.addi %55, %22 : tensor<16x16xi32, #blocked> loc(#loc46)
    %57 = tt.addptr %24, %56 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc47)
    %58 = tt.load %57 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %59 = arith.addf %51, %58 : tensor<16x16xf16, #blocked> loc(#loc49)
    %60 = tt.splat %arg4 : i32 -> tensor<16x1xi32, #blocked> loc(#loc50)
    %61 = arith.addi %15, %60 : tensor<16x1xi32, #blocked> loc(#loc50)
    %62 = arith.muli %61, %16 : tensor<16x1xi32, #blocked> loc(#loc51)
    %63 = tt.broadcast %62 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc52)
    %64 = arith.addi %63, %20 : tensor<16x16xi32, #blocked> loc(#loc52)
    %65 = tt.addptr %24, %64 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc53)
    %66 = tt.load %65 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %67 = arith.addf %59, %66 : tensor<16x16xf16, #blocked> loc(#loc55)
    %68 = arith.addi %64, %cst_2 : tensor<16x16xi32, #blocked> loc(#loc56)
    %69 = tt.addptr %24, %68 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc57)
    %70 = tt.load %69 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %71 = arith.addf %67, %70 : tensor<16x16xf16, #blocked> loc(#loc59)
    %72 = arith.addi %64, %cst_1 : tensor<16x16xi32, #blocked> loc(#loc60)
    %73 = tt.addptr %24, %72 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc61)
    %74 = tt.load %73 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %75 = arith.addf %71, %74 : tensor<16x16xf16, #blocked> loc(#loc63)
    %76 = arith.addi %64, %cst_0 : tensor<16x16xi32, #blocked> loc(#loc64)
    %77 = tt.addptr %24, %76 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc65)
    %78 = tt.load %77 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %79 = arith.addf %75, %78 : tensor<16x16xf16, #blocked> loc(#loc67)
    %80 = arith.addi %64, %22 : tensor<16x16xi32, #blocked> loc(#loc68)
    %81 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc69)
    %82 = tt.addptr %81, %80 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc69)
    tt.store %82, %79 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before TritonGPUReorderInstructions (tritongpu-reorder-instructions) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16, #blocked> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc11)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc11)
    %10 = tt.splat %7 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %11 = arith.addi %10, %8 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %12 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %13 = tt.splat %12 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %14 = arith.addi %13, %9 : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %15 = tt.expand_dims %11 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc15)
    %16 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked> loc(#loc16)
    %17 = arith.muli %15, %16 : tensor<16x1xi32, #blocked> loc(#loc16)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc17)
    %19 = tt.broadcast %17 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %20 = tt.broadcast %18 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %21 = arith.addi %19, %20 : tensor<16x16xi32, #blocked> loc(#loc17)
    %22 = tt.splat %arg4 : i32 -> tensor<16x16xi32, #blocked> loc(#loc18)
    %23 = arith.addi %21, %22 : tensor<16x16xi32, #blocked> loc(#loc18)
    %24 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc19)
    %25 = tt.addptr %24, %23 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc19)
    %26 = tt.load %25 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %27 = arith.addf %26, %cst : tensor<16x16xf16, #blocked> loc(#loc21)
    %28 = arith.addi %15, %cst_6 : tensor<16x1xi32, #blocked> loc(#loc22)
    %29 = arith.muli %28, %16 : tensor<16x1xi32, #blocked> loc(#loc23)
    %30 = tt.broadcast %29 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc24)
    %31 = arith.addi %30, %20 : tensor<16x16xi32, #blocked> loc(#loc24)
    %32 = arith.addi %31, %22 : tensor<16x16xi32, #blocked> loc(#loc25)
    %33 = tt.addptr %24, %32 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %35 = arith.addf %27, %34 : tensor<16x16xf16, #blocked> loc(#loc28)
    %36 = arith.addi %15, %cst_5 : tensor<16x1xi32, #blocked> loc(#loc29)
    %37 = arith.muli %36, %16 : tensor<16x1xi32, #blocked> loc(#loc30)
    %38 = tt.broadcast %37 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc31)
    %39 = arith.addi %38, %20 : tensor<16x16xi32, #blocked> loc(#loc31)
    %40 = arith.addi %39, %22 : tensor<16x16xi32, #blocked> loc(#loc32)
    %41 = tt.addptr %24, %40 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc33)
    %42 = tt.load %41 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %43 = arith.addf %35, %42 : tensor<16x16xf16, #blocked> loc(#loc35)
    %44 = arith.addi %15, %cst_4 : tensor<16x1xi32, #blocked> loc(#loc36)
    %45 = arith.muli %44, %16 : tensor<16x1xi32, #blocked> loc(#loc37)
    %46 = tt.broadcast %45 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc38)
    %47 = arith.addi %46, %20 : tensor<16x16xi32, #blocked> loc(#loc38)
    %48 = arith.addi %47, %22 : tensor<16x16xi32, #blocked> loc(#loc39)
    %49 = tt.addptr %24, %48 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc40)
    %50 = tt.load %49 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %51 = arith.addf %43, %50 : tensor<16x16xf16, #blocked> loc(#loc42)
    %52 = arith.addi %15, %cst_3 : tensor<16x1xi32, #blocked> loc(#loc43)
    %53 = arith.muli %52, %16 : tensor<16x1xi32, #blocked> loc(#loc44)
    %54 = tt.broadcast %53 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc45)
    %55 = arith.addi %54, %20 : tensor<16x16xi32, #blocked> loc(#loc45)
    %56 = arith.addi %55, %22 : tensor<16x16xi32, #blocked> loc(#loc46)
    %57 = tt.addptr %24, %56 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc47)
    %58 = tt.load %57 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %59 = arith.addf %51, %58 : tensor<16x16xf16, #blocked> loc(#loc49)
    %60 = tt.splat %arg4 : i32 -> tensor<16x1xi32, #blocked> loc(#loc50)
    %61 = arith.addi %15, %60 : tensor<16x1xi32, #blocked> loc(#loc50)
    %62 = arith.muli %61, %16 : tensor<16x1xi32, #blocked> loc(#loc51)
    %63 = tt.broadcast %62 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc52)
    %64 = arith.addi %63, %20 : tensor<16x16xi32, #blocked> loc(#loc52)
    %65 = tt.addptr %24, %64 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc53)
    %66 = tt.load %65 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %67 = arith.addf %59, %66 : tensor<16x16xf16, #blocked> loc(#loc55)
    %68 = arith.addi %64, %cst_2 : tensor<16x16xi32, #blocked> loc(#loc56)
    %69 = tt.addptr %24, %68 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc57)
    %70 = tt.load %69 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %71 = arith.addf %67, %70 : tensor<16x16xf16, #blocked> loc(#loc59)
    %72 = arith.addi %64, %cst_1 : tensor<16x16xi32, #blocked> loc(#loc60)
    %73 = tt.addptr %24, %72 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc61)
    %74 = tt.load %73 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %75 = arith.addf %71, %74 : tensor<16x16xf16, #blocked> loc(#loc63)
    %76 = arith.addi %64, %cst_0 : tensor<16x16xi32, #blocked> loc(#loc64)
    %77 = tt.addptr %24, %76 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc65)
    %78 = tt.load %77 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %79 = arith.addf %75, %78 : tensor<16x16xf16, #blocked> loc(#loc67)
    %80 = arith.addi %64, %22 : tensor<16x16xi32, #blocked> loc(#loc68)
    %81 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc69)
    %82 = tt.addptr %81, %80 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc69)
    tt.store %82, %79 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16, #blocked> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc11)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc11)
    %10 = tt.splat %7 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %11 = arith.addi %10, %8 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %12 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %13 = tt.splat %12 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %14 = arith.addi %13, %9 : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %15 = tt.expand_dims %11 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc15)
    %16 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked> loc(#loc16)
    %17 = arith.muli %15, %16 : tensor<16x1xi32, #blocked> loc(#loc16)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc17)
    %19 = tt.broadcast %17 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %20 = tt.broadcast %18 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %21 = arith.addi %19, %20 : tensor<16x16xi32, #blocked> loc(#loc17)
    %22 = tt.splat %arg4 : i32 -> tensor<16x16xi32, #blocked> loc(#loc18)
    %23 = arith.addi %21, %22 : tensor<16x16xi32, #blocked> loc(#loc18)
    %24 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc19)
    %25 = tt.addptr %24, %23 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc19)
    %26 = tt.load %25 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %27 = arith.addf %26, %cst : tensor<16x16xf16, #blocked> loc(#loc21)
    %28 = arith.addi %15, %cst_6 : tensor<16x1xi32, #blocked> loc(#loc22)
    %29 = arith.muli %28, %16 : tensor<16x1xi32, #blocked> loc(#loc23)
    %30 = tt.broadcast %29 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc24)
    %31 = arith.addi %30, %20 : tensor<16x16xi32, #blocked> loc(#loc24)
    %32 = arith.addi %31, %22 : tensor<16x16xi32, #blocked> loc(#loc25)
    %33 = tt.addptr %24, %32 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %35 = arith.addf %27, %34 : tensor<16x16xf16, #blocked> loc(#loc28)
    %36 = arith.addi %15, %cst_5 : tensor<16x1xi32, #blocked> loc(#loc29)
    %37 = arith.muli %36, %16 : tensor<16x1xi32, #blocked> loc(#loc30)
    %38 = tt.broadcast %37 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc31)
    %39 = arith.addi %38, %20 : tensor<16x16xi32, #blocked> loc(#loc31)
    %40 = arith.addi %39, %22 : tensor<16x16xi32, #blocked> loc(#loc32)
    %41 = tt.addptr %24, %40 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc33)
    %42 = tt.load %41 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %43 = arith.addf %35, %42 : tensor<16x16xf16, #blocked> loc(#loc35)
    %44 = arith.addi %15, %cst_4 : tensor<16x1xi32, #blocked> loc(#loc36)
    %45 = arith.muli %44, %16 : tensor<16x1xi32, #blocked> loc(#loc37)
    %46 = tt.broadcast %45 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc38)
    %47 = arith.addi %46, %20 : tensor<16x16xi32, #blocked> loc(#loc38)
    %48 = arith.addi %47, %22 : tensor<16x16xi32, #blocked> loc(#loc39)
    %49 = tt.addptr %24, %48 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc40)
    %50 = tt.load %49 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %51 = arith.addf %43, %50 : tensor<16x16xf16, #blocked> loc(#loc42)
    %52 = arith.addi %15, %cst_3 : tensor<16x1xi32, #blocked> loc(#loc43)
    %53 = arith.muli %52, %16 : tensor<16x1xi32, #blocked> loc(#loc44)
    %54 = tt.broadcast %53 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc45)
    %55 = arith.addi %54, %20 : tensor<16x16xi32, #blocked> loc(#loc45)
    %56 = arith.addi %55, %22 : tensor<16x16xi32, #blocked> loc(#loc46)
    %57 = tt.addptr %24, %56 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc47)
    %58 = tt.load %57 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %59 = arith.addf %51, %58 : tensor<16x16xf16, #blocked> loc(#loc49)
    %60 = tt.splat %arg4 : i32 -> tensor<16x1xi32, #blocked> loc(#loc50)
    %61 = arith.addi %15, %60 : tensor<16x1xi32, #blocked> loc(#loc50)
    %62 = arith.muli %61, %16 : tensor<16x1xi32, #blocked> loc(#loc51)
    %63 = tt.broadcast %62 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc52)
    %64 = arith.addi %63, %20 : tensor<16x16xi32, #blocked> loc(#loc52)
    %65 = tt.addptr %24, %64 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc53)
    %66 = tt.load %65 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %67 = arith.addf %59, %66 : tensor<16x16xf16, #blocked> loc(#loc55)
    %68 = arith.addi %64, %cst_2 : tensor<16x16xi32, #blocked> loc(#loc56)
    %69 = tt.addptr %24, %68 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc57)
    %70 = tt.load %69 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %71 = arith.addf %67, %70 : tensor<16x16xf16, #blocked> loc(#loc59)
    %72 = arith.addi %64, %cst_1 : tensor<16x16xi32, #blocked> loc(#loc60)
    %73 = tt.addptr %24, %72 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc61)
    %74 = tt.load %73 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %75 = arith.addf %71, %74 : tensor<16x16xf16, #blocked> loc(#loc63)
    %76 = arith.addi %64, %cst_0 : tensor<16x16xi32, #blocked> loc(#loc64)
    %77 = tt.addptr %24, %76 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc65)
    %78 = tt.load %77 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %79 = arith.addf %75, %78 : tensor<16x16xf16, #blocked> loc(#loc67)
    %80 = arith.addi %64, %22 : tensor<16x16xi32, #blocked> loc(#loc68)
    %81 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc69)
    %82 = tt.addptr %81, %80 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc69)
    tt.store %82, %79 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16, #blocked> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc11)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc11)
    %10 = tt.splat %7 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %11 = arith.addi %10, %8 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %12 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %13 = tt.splat %12 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %14 = arith.addi %13, %9 : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %15 = tt.expand_dims %11 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc15)
    %16 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked> loc(#loc16)
    %17 = arith.muli %15, %16 : tensor<16x1xi32, #blocked> loc(#loc16)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc17)
    %19 = tt.broadcast %17 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %20 = tt.broadcast %18 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %21 = arith.addi %19, %20 : tensor<16x16xi32, #blocked> loc(#loc17)
    %22 = tt.splat %arg4 : i32 -> tensor<16x16xi32, #blocked> loc(#loc18)
    %23 = arith.addi %21, %22 : tensor<16x16xi32, #blocked> loc(#loc18)
    %24 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc19)
    %25 = tt.addptr %24, %23 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc19)
    %26 = tt.load %25 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %27 = arith.addf %26, %cst : tensor<16x16xf16, #blocked> loc(#loc21)
    %28 = arith.addi %15, %cst_6 : tensor<16x1xi32, #blocked> loc(#loc22)
    %29 = arith.muli %28, %16 : tensor<16x1xi32, #blocked> loc(#loc23)
    %30 = tt.broadcast %29 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc24)
    %31 = arith.addi %30, %20 : tensor<16x16xi32, #blocked> loc(#loc24)
    %32 = arith.addi %31, %22 : tensor<16x16xi32, #blocked> loc(#loc25)
    %33 = tt.addptr %24, %32 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %35 = arith.addf %27, %34 : tensor<16x16xf16, #blocked> loc(#loc28)
    %36 = arith.addi %15, %cst_5 : tensor<16x1xi32, #blocked> loc(#loc29)
    %37 = arith.muli %36, %16 : tensor<16x1xi32, #blocked> loc(#loc30)
    %38 = tt.broadcast %37 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc31)
    %39 = arith.addi %38, %20 : tensor<16x16xi32, #blocked> loc(#loc31)
    %40 = arith.addi %39, %22 : tensor<16x16xi32, #blocked> loc(#loc32)
    %41 = tt.addptr %24, %40 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc33)
    %42 = tt.load %41 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %43 = arith.addf %35, %42 : tensor<16x16xf16, #blocked> loc(#loc35)
    %44 = arith.addi %15, %cst_4 : tensor<16x1xi32, #blocked> loc(#loc36)
    %45 = arith.muli %44, %16 : tensor<16x1xi32, #blocked> loc(#loc37)
    %46 = tt.broadcast %45 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc38)
    %47 = arith.addi %46, %20 : tensor<16x16xi32, #blocked> loc(#loc38)
    %48 = arith.addi %47, %22 : tensor<16x16xi32, #blocked> loc(#loc39)
    %49 = tt.addptr %24, %48 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc40)
    %50 = tt.load %49 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %51 = arith.addf %43, %50 : tensor<16x16xf16, #blocked> loc(#loc42)
    %52 = arith.addi %15, %cst_3 : tensor<16x1xi32, #blocked> loc(#loc43)
    %53 = arith.muli %52, %16 : tensor<16x1xi32, #blocked> loc(#loc44)
    %54 = tt.broadcast %53 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc45)
    %55 = arith.addi %54, %20 : tensor<16x16xi32, #blocked> loc(#loc45)
    %56 = arith.addi %55, %22 : tensor<16x16xi32, #blocked> loc(#loc46)
    %57 = tt.addptr %24, %56 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc47)
    %58 = tt.load %57 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %59 = arith.addf %51, %58 : tensor<16x16xf16, #blocked> loc(#loc49)
    %60 = tt.splat %arg4 : i32 -> tensor<16x1xi32, #blocked> loc(#loc50)
    %61 = arith.addi %15, %60 : tensor<16x1xi32, #blocked> loc(#loc50)
    %62 = arith.muli %61, %16 : tensor<16x1xi32, #blocked> loc(#loc51)
    %63 = tt.broadcast %62 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc52)
    %64 = arith.addi %63, %20 : tensor<16x16xi32, #blocked> loc(#loc52)
    %65 = tt.addptr %24, %64 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc53)
    %66 = tt.load %65 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %67 = arith.addf %59, %66 : tensor<16x16xf16, #blocked> loc(#loc55)
    %68 = arith.addi %64, %cst_2 : tensor<16x16xi32, #blocked> loc(#loc56)
    %69 = tt.addptr %24, %68 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc57)
    %70 = tt.load %69 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %71 = arith.addf %67, %70 : tensor<16x16xf16, #blocked> loc(#loc59)
    %72 = arith.addi %64, %cst_1 : tensor<16x16xi32, #blocked> loc(#loc60)
    %73 = tt.addptr %24, %72 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc61)
    %74 = tt.load %73 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %75 = arith.addf %71, %74 : tensor<16x16xf16, #blocked> loc(#loc63)
    %76 = arith.addi %64, %cst_0 : tensor<16x16xi32, #blocked> loc(#loc64)
    %77 = tt.addptr %24, %76 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc65)
    %78 = tt.load %77 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %79 = arith.addf %75, %78 : tensor<16x16xf16, #blocked> loc(#loc67)
    %80 = arith.addi %64, %22 : tensor<16x16xi32, #blocked> loc(#loc68)
    %81 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc69)
    %82 = tt.addptr %81, %80 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc69)
    tt.store %82, %79 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16, #blocked> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc11)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc11)
    %10 = tt.splat %7 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %11 = arith.addi %10, %8 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %12 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %13 = tt.splat %12 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %14 = arith.addi %13, %9 : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %15 = tt.expand_dims %11 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc15)
    %16 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked> loc(#loc16)
    %17 = arith.muli %15, %16 : tensor<16x1xi32, #blocked> loc(#loc16)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc17)
    %19 = tt.broadcast %17 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %20 = tt.broadcast %18 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %21 = arith.addi %19, %20 : tensor<16x16xi32, #blocked> loc(#loc17)
    %22 = tt.splat %arg4 : i32 -> tensor<16x16xi32, #blocked> loc(#loc18)
    %23 = arith.addi %21, %22 : tensor<16x16xi32, #blocked> loc(#loc18)
    %24 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc19)
    %25 = tt.addptr %24, %23 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc19)
    %26 = tt.load %25 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %27 = arith.addf %26, %cst : tensor<16x16xf16, #blocked> loc(#loc21)
    %28 = arith.addi %15, %cst_6 : tensor<16x1xi32, #blocked> loc(#loc22)
    %29 = arith.muli %28, %16 : tensor<16x1xi32, #blocked> loc(#loc23)
    %30 = tt.broadcast %29 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc24)
    %31 = arith.addi %30, %20 : tensor<16x16xi32, #blocked> loc(#loc24)
    %32 = arith.addi %31, %22 : tensor<16x16xi32, #blocked> loc(#loc25)
    %33 = tt.addptr %24, %32 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %35 = arith.addf %27, %34 : tensor<16x16xf16, #blocked> loc(#loc28)
    %36 = arith.addi %15, %cst_5 : tensor<16x1xi32, #blocked> loc(#loc29)
    %37 = arith.muli %36, %16 : tensor<16x1xi32, #blocked> loc(#loc30)
    %38 = tt.broadcast %37 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc31)
    %39 = arith.addi %38, %20 : tensor<16x16xi32, #blocked> loc(#loc31)
    %40 = arith.addi %39, %22 : tensor<16x16xi32, #blocked> loc(#loc32)
    %41 = tt.addptr %24, %40 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc33)
    %42 = tt.load %41 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %43 = arith.addf %35, %42 : tensor<16x16xf16, #blocked> loc(#loc35)
    %44 = arith.addi %15, %cst_4 : tensor<16x1xi32, #blocked> loc(#loc36)
    %45 = arith.muli %44, %16 : tensor<16x1xi32, #blocked> loc(#loc37)
    %46 = tt.broadcast %45 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc38)
    %47 = arith.addi %46, %20 : tensor<16x16xi32, #blocked> loc(#loc38)
    %48 = arith.addi %47, %22 : tensor<16x16xi32, #blocked> loc(#loc39)
    %49 = tt.addptr %24, %48 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc40)
    %50 = tt.load %49 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %51 = arith.addf %43, %50 : tensor<16x16xf16, #blocked> loc(#loc42)
    %52 = arith.addi %15, %cst_3 : tensor<16x1xi32, #blocked> loc(#loc43)
    %53 = arith.muli %52, %16 : tensor<16x1xi32, #blocked> loc(#loc44)
    %54 = tt.broadcast %53 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc45)
    %55 = arith.addi %54, %20 : tensor<16x16xi32, #blocked> loc(#loc45)
    %56 = arith.addi %55, %22 : tensor<16x16xi32, #blocked> loc(#loc46)
    %57 = tt.addptr %24, %56 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc47)
    %58 = tt.load %57 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %59 = arith.addf %51, %58 : tensor<16x16xf16, #blocked> loc(#loc49)
    %60 = tt.splat %arg4 : i32 -> tensor<16x1xi32, #blocked> loc(#loc50)
    %61 = arith.addi %15, %60 : tensor<16x1xi32, #blocked> loc(#loc50)
    %62 = arith.muli %61, %16 : tensor<16x1xi32, #blocked> loc(#loc51)
    %63 = tt.broadcast %62 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc52)
    %64 = arith.addi %63, %20 : tensor<16x16xi32, #blocked> loc(#loc52)
    %65 = tt.addptr %24, %64 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc53)
    %66 = tt.load %65 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %67 = arith.addf %59, %66 : tensor<16x16xf16, #blocked> loc(#loc55)
    %68 = arith.addi %64, %cst_2 : tensor<16x16xi32, #blocked> loc(#loc56)
    %69 = tt.addptr %24, %68 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc57)
    %70 = tt.load %69 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %71 = arith.addf %67, %70 : tensor<16x16xf16, #blocked> loc(#loc59)
    %72 = arith.addi %64, %cst_1 : tensor<16x16xi32, #blocked> loc(#loc60)
    %73 = tt.addptr %24, %72 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc61)
    %74 = tt.load %73 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %75 = arith.addf %71, %74 : tensor<16x16xf16, #blocked> loc(#loc63)
    %76 = arith.addi %64, %cst_0 : tensor<16x16xi32, #blocked> loc(#loc64)
    %77 = tt.addptr %24, %76 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc65)
    %78 = tt.load %77 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %79 = arith.addf %75, %78 : tensor<16x16xf16, #blocked> loc(#loc67)
    %80 = arith.addi %64, %22 : tensor<16x16xi32, #blocked> loc(#loc68)
    %81 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc69)
    %82 = tt.addptr %81, %80 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc69)
    tt.store %82, %79 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before DecomposeUnsupportedNVIDIAConversions (decompose-unsupported-nvidia-conversions) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16, #blocked> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc11)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc11)
    %10 = tt.splat %7 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %11 = arith.addi %10, %8 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %12 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %13 = tt.splat %12 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %14 = arith.addi %13, %9 : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %15 = tt.expand_dims %11 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc15)
    %16 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked> loc(#loc16)
    %17 = arith.muli %15, %16 : tensor<16x1xi32, #blocked> loc(#loc16)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc17)
    %19 = tt.broadcast %17 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %20 = tt.broadcast %18 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %21 = arith.addi %19, %20 : tensor<16x16xi32, #blocked> loc(#loc17)
    %22 = tt.splat %arg4 : i32 -> tensor<16x16xi32, #blocked> loc(#loc18)
    %23 = arith.addi %21, %22 : tensor<16x16xi32, #blocked> loc(#loc18)
    %24 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc19)
    %25 = tt.addptr %24, %23 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc19)
    %26 = tt.load %25 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %27 = arith.addf %26, %cst : tensor<16x16xf16, #blocked> loc(#loc21)
    %28 = arith.addi %15, %cst_6 : tensor<16x1xi32, #blocked> loc(#loc22)
    %29 = arith.muli %28, %16 : tensor<16x1xi32, #blocked> loc(#loc23)
    %30 = tt.broadcast %29 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc24)
    %31 = arith.addi %30, %20 : tensor<16x16xi32, #blocked> loc(#loc24)
    %32 = arith.addi %31, %22 : tensor<16x16xi32, #blocked> loc(#loc25)
    %33 = tt.addptr %24, %32 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %35 = arith.addf %27, %34 : tensor<16x16xf16, #blocked> loc(#loc28)
    %36 = arith.addi %15, %cst_5 : tensor<16x1xi32, #blocked> loc(#loc29)
    %37 = arith.muli %36, %16 : tensor<16x1xi32, #blocked> loc(#loc30)
    %38 = tt.broadcast %37 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc31)
    %39 = arith.addi %38, %20 : tensor<16x16xi32, #blocked> loc(#loc31)
    %40 = arith.addi %39, %22 : tensor<16x16xi32, #blocked> loc(#loc32)
    %41 = tt.addptr %24, %40 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc33)
    %42 = tt.load %41 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %43 = arith.addf %35, %42 : tensor<16x16xf16, #blocked> loc(#loc35)
    %44 = arith.addi %15, %cst_4 : tensor<16x1xi32, #blocked> loc(#loc36)
    %45 = arith.muli %44, %16 : tensor<16x1xi32, #blocked> loc(#loc37)
    %46 = tt.broadcast %45 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc38)
    %47 = arith.addi %46, %20 : tensor<16x16xi32, #blocked> loc(#loc38)
    %48 = arith.addi %47, %22 : tensor<16x16xi32, #blocked> loc(#loc39)
    %49 = tt.addptr %24, %48 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc40)
    %50 = tt.load %49 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %51 = arith.addf %43, %50 : tensor<16x16xf16, #blocked> loc(#loc42)
    %52 = arith.addi %15, %cst_3 : tensor<16x1xi32, #blocked> loc(#loc43)
    %53 = arith.muli %52, %16 : tensor<16x1xi32, #blocked> loc(#loc44)
    %54 = tt.broadcast %53 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc45)
    %55 = arith.addi %54, %20 : tensor<16x16xi32, #blocked> loc(#loc45)
    %56 = arith.addi %55, %22 : tensor<16x16xi32, #blocked> loc(#loc46)
    %57 = tt.addptr %24, %56 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc47)
    %58 = tt.load %57 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %59 = arith.addf %51, %58 : tensor<16x16xf16, #blocked> loc(#loc49)
    %60 = tt.splat %arg4 : i32 -> tensor<16x1xi32, #blocked> loc(#loc50)
    %61 = arith.addi %15, %60 : tensor<16x1xi32, #blocked> loc(#loc50)
    %62 = arith.muli %61, %16 : tensor<16x1xi32, #blocked> loc(#loc51)
    %63 = tt.broadcast %62 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc52)
    %64 = arith.addi %63, %20 : tensor<16x16xi32, #blocked> loc(#loc52)
    %65 = tt.addptr %24, %64 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc53)
    %66 = tt.load %65 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %67 = arith.addf %59, %66 : tensor<16x16xf16, #blocked> loc(#loc55)
    %68 = arith.addi %64, %cst_2 : tensor<16x16xi32, #blocked> loc(#loc56)
    %69 = tt.addptr %24, %68 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc57)
    %70 = tt.load %69 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %71 = arith.addf %67, %70 : tensor<16x16xf16, #blocked> loc(#loc59)
    %72 = arith.addi %64, %cst_1 : tensor<16x16xi32, #blocked> loc(#loc60)
    %73 = tt.addptr %24, %72 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc61)
    %74 = tt.load %73 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %75 = arith.addf %71, %74 : tensor<16x16xf16, #blocked> loc(#loc63)
    %76 = arith.addi %64, %cst_0 : tensor<16x16xi32, #blocked> loc(#loc64)
    %77 = tt.addptr %24, %76 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc65)
    %78 = tt.load %77 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %79 = arith.addf %75, %78 : tensor<16x16xf16, #blocked> loc(#loc67)
    %80 = arith.addi %64, %22 : tensor<16x16xi32, #blocked> loc(#loc68)
    %81 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc69)
    %82 = tt.addptr %81, %80 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc69)
    tt.store %82, %79 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before TritonGPUCombineTensorSelectAndIf (tritongpu-combine-tensor-select-and-if) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16, #blocked> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc11)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc11)
    %10 = tt.splat %7 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %11 = arith.addi %10, %8 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %12 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %13 = tt.splat %12 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %14 = arith.addi %13, %9 : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %15 = tt.expand_dims %11 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc15)
    %16 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked> loc(#loc16)
    %17 = arith.muli %15, %16 : tensor<16x1xi32, #blocked> loc(#loc16)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc17)
    %19 = tt.broadcast %17 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %20 = tt.broadcast %18 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %21 = arith.addi %19, %20 : tensor<16x16xi32, #blocked> loc(#loc17)
    %22 = tt.splat %arg4 : i32 -> tensor<16x16xi32, #blocked> loc(#loc18)
    %23 = arith.addi %21, %22 : tensor<16x16xi32, #blocked> loc(#loc18)
    %24 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc19)
    %25 = tt.addptr %24, %23 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc19)
    %26 = tt.load %25 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %27 = arith.addf %26, %cst : tensor<16x16xf16, #blocked> loc(#loc21)
    %28 = arith.addi %15, %cst_6 : tensor<16x1xi32, #blocked> loc(#loc22)
    %29 = arith.muli %28, %16 : tensor<16x1xi32, #blocked> loc(#loc23)
    %30 = tt.broadcast %29 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc24)
    %31 = arith.addi %30, %20 : tensor<16x16xi32, #blocked> loc(#loc24)
    %32 = arith.addi %31, %22 : tensor<16x16xi32, #blocked> loc(#loc25)
    %33 = tt.addptr %24, %32 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %35 = arith.addf %27, %34 : tensor<16x16xf16, #blocked> loc(#loc28)
    %36 = arith.addi %15, %cst_5 : tensor<16x1xi32, #blocked> loc(#loc29)
    %37 = arith.muli %36, %16 : tensor<16x1xi32, #blocked> loc(#loc30)
    %38 = tt.broadcast %37 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc31)
    %39 = arith.addi %38, %20 : tensor<16x16xi32, #blocked> loc(#loc31)
    %40 = arith.addi %39, %22 : tensor<16x16xi32, #blocked> loc(#loc32)
    %41 = tt.addptr %24, %40 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc33)
    %42 = tt.load %41 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %43 = arith.addf %35, %42 : tensor<16x16xf16, #blocked> loc(#loc35)
    %44 = arith.addi %15, %cst_4 : tensor<16x1xi32, #blocked> loc(#loc36)
    %45 = arith.muli %44, %16 : tensor<16x1xi32, #blocked> loc(#loc37)
    %46 = tt.broadcast %45 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc38)
    %47 = arith.addi %46, %20 : tensor<16x16xi32, #blocked> loc(#loc38)
    %48 = arith.addi %47, %22 : tensor<16x16xi32, #blocked> loc(#loc39)
    %49 = tt.addptr %24, %48 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc40)
    %50 = tt.load %49 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %51 = arith.addf %43, %50 : tensor<16x16xf16, #blocked> loc(#loc42)
    %52 = arith.addi %15, %cst_3 : tensor<16x1xi32, #blocked> loc(#loc43)
    %53 = arith.muli %52, %16 : tensor<16x1xi32, #blocked> loc(#loc44)
    %54 = tt.broadcast %53 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc45)
    %55 = arith.addi %54, %20 : tensor<16x16xi32, #blocked> loc(#loc45)
    %56 = arith.addi %55, %22 : tensor<16x16xi32, #blocked> loc(#loc46)
    %57 = tt.addptr %24, %56 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc47)
    %58 = tt.load %57 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %59 = arith.addf %51, %58 : tensor<16x16xf16, #blocked> loc(#loc49)
    %60 = tt.splat %arg4 : i32 -> tensor<16x1xi32, #blocked> loc(#loc50)
    %61 = arith.addi %15, %60 : tensor<16x1xi32, #blocked> loc(#loc50)
    %62 = arith.muli %61, %16 : tensor<16x1xi32, #blocked> loc(#loc51)
    %63 = tt.broadcast %62 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc52)
    %64 = arith.addi %63, %20 : tensor<16x16xi32, #blocked> loc(#loc52)
    %65 = tt.addptr %24, %64 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc53)
    %66 = tt.load %65 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %67 = arith.addf %59, %66 : tensor<16x16xf16, #blocked> loc(#loc55)
    %68 = arith.addi %64, %cst_2 : tensor<16x16xi32, #blocked> loc(#loc56)
    %69 = tt.addptr %24, %68 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc57)
    %70 = tt.load %69 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %71 = arith.addf %67, %70 : tensor<16x16xf16, #blocked> loc(#loc59)
    %72 = arith.addi %64, %cst_1 : tensor<16x16xi32, #blocked> loc(#loc60)
    %73 = tt.addptr %24, %72 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc61)
    %74 = tt.load %73 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %75 = arith.addf %71, %74 : tensor<16x16xf16, #blocked> loc(#loc63)
    %76 = arith.addi %64, %cst_0 : tensor<16x16xi32, #blocked> loc(#loc64)
    %77 = tt.addptr %24, %76 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc65)
    %78 = tt.load %77 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %79 = arith.addf %75, %78 : tensor<16x16xf16, #blocked> loc(#loc67)
    %80 = arith.addi %64, %22 : tensor<16x16xi32, #blocked> loc(#loc68)
    %81 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc69)
    %82 = tt.addptr %81, %80 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc69)
    tt.store %82, %79 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before SCFToControlFlow (convert-scf-to-cf) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16, #blocked> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc11)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc11)
    %10 = tt.splat %7 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %11 = arith.addi %10, %8 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %12 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %13 = tt.splat %12 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %14 = arith.addi %13, %9 : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %15 = tt.expand_dims %11 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc15)
    %16 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked> loc(#loc16)
    %17 = arith.muli %15, %16 : tensor<16x1xi32, #blocked> loc(#loc16)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc17)
    %19 = tt.broadcast %17 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %20 = tt.broadcast %18 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %21 = arith.addi %19, %20 : tensor<16x16xi32, #blocked> loc(#loc17)
    %22 = tt.splat %arg4 : i32 -> tensor<16x16xi32, #blocked> loc(#loc18)
    %23 = arith.addi %21, %22 : tensor<16x16xi32, #blocked> loc(#loc18)
    %24 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc19)
    %25 = tt.addptr %24, %23 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc19)
    %26 = tt.load %25 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %27 = arith.addf %26, %cst : tensor<16x16xf16, #blocked> loc(#loc21)
    %28 = arith.addi %15, %cst_6 : tensor<16x1xi32, #blocked> loc(#loc22)
    %29 = arith.muli %28, %16 : tensor<16x1xi32, #blocked> loc(#loc23)
    %30 = tt.broadcast %29 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc24)
    %31 = arith.addi %30, %20 : tensor<16x16xi32, #blocked> loc(#loc24)
    %32 = arith.addi %31, %22 : tensor<16x16xi32, #blocked> loc(#loc25)
    %33 = tt.addptr %24, %32 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %35 = arith.addf %27, %34 : tensor<16x16xf16, #blocked> loc(#loc28)
    %36 = arith.addi %15, %cst_5 : tensor<16x1xi32, #blocked> loc(#loc29)
    %37 = arith.muli %36, %16 : tensor<16x1xi32, #blocked> loc(#loc30)
    %38 = tt.broadcast %37 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc31)
    %39 = arith.addi %38, %20 : tensor<16x16xi32, #blocked> loc(#loc31)
    %40 = arith.addi %39, %22 : tensor<16x16xi32, #blocked> loc(#loc32)
    %41 = tt.addptr %24, %40 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc33)
    %42 = tt.load %41 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %43 = arith.addf %35, %42 : tensor<16x16xf16, #blocked> loc(#loc35)
    %44 = arith.addi %15, %cst_4 : tensor<16x1xi32, #blocked> loc(#loc36)
    %45 = arith.muli %44, %16 : tensor<16x1xi32, #blocked> loc(#loc37)
    %46 = tt.broadcast %45 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc38)
    %47 = arith.addi %46, %20 : tensor<16x16xi32, #blocked> loc(#loc38)
    %48 = arith.addi %47, %22 : tensor<16x16xi32, #blocked> loc(#loc39)
    %49 = tt.addptr %24, %48 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc40)
    %50 = tt.load %49 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %51 = arith.addf %43, %50 : tensor<16x16xf16, #blocked> loc(#loc42)
    %52 = arith.addi %15, %cst_3 : tensor<16x1xi32, #blocked> loc(#loc43)
    %53 = arith.muli %52, %16 : tensor<16x1xi32, #blocked> loc(#loc44)
    %54 = tt.broadcast %53 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc45)
    %55 = arith.addi %54, %20 : tensor<16x16xi32, #blocked> loc(#loc45)
    %56 = arith.addi %55, %22 : tensor<16x16xi32, #blocked> loc(#loc46)
    %57 = tt.addptr %24, %56 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc47)
    %58 = tt.load %57 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %59 = arith.addf %51, %58 : tensor<16x16xf16, #blocked> loc(#loc49)
    %60 = tt.splat %arg4 : i32 -> tensor<16x1xi32, #blocked> loc(#loc50)
    %61 = arith.addi %15, %60 : tensor<16x1xi32, #blocked> loc(#loc50)
    %62 = arith.muli %61, %16 : tensor<16x1xi32, #blocked> loc(#loc51)
    %63 = tt.broadcast %62 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc52)
    %64 = arith.addi %63, %20 : tensor<16x16xi32, #blocked> loc(#loc52)
    %65 = tt.addptr %24, %64 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc53)
    %66 = tt.load %65 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %67 = arith.addf %59, %66 : tensor<16x16xf16, #blocked> loc(#loc55)
    %68 = arith.addi %64, %cst_2 : tensor<16x16xi32, #blocked> loc(#loc56)
    %69 = tt.addptr %24, %68 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc57)
    %70 = tt.load %69 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %71 = arith.addf %67, %70 : tensor<16x16xf16, #blocked> loc(#loc59)
    %72 = arith.addi %64, %cst_1 : tensor<16x16xi32, #blocked> loc(#loc60)
    %73 = tt.addptr %24, %72 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc61)
    %74 = tt.load %73 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %75 = arith.addf %71, %74 : tensor<16x16xf16, #blocked> loc(#loc63)
    %76 = arith.addi %64, %cst_0 : tensor<16x16xi32, #blocked> loc(#loc64)
    %77 = tt.addptr %24, %76 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc65)
    %78 = tt.load %77 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %79 = arith.addf %75, %78 : tensor<16x16xf16, #blocked> loc(#loc67)
    %80 = arith.addi %64, %22 : tensor<16x16xi32, #blocked> loc(#loc68)
    %81 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc69)
    %82 = tt.addptr %81, %80 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc69)
    tt.store %82, %79 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before ConvertIndexToLLVMPass (convert-index-to-llvm) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16, #blocked> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc11)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc11)
    %10 = tt.splat %7 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %11 = arith.addi %10, %8 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %12 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %13 = tt.splat %12 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %14 = arith.addi %13, %9 : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %15 = tt.expand_dims %11 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc15)
    %16 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked> loc(#loc16)
    %17 = arith.muli %15, %16 : tensor<16x1xi32, #blocked> loc(#loc16)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc17)
    %19 = tt.broadcast %17 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %20 = tt.broadcast %18 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %21 = arith.addi %19, %20 : tensor<16x16xi32, #blocked> loc(#loc17)
    %22 = tt.splat %arg4 : i32 -> tensor<16x16xi32, #blocked> loc(#loc18)
    %23 = arith.addi %21, %22 : tensor<16x16xi32, #blocked> loc(#loc18)
    %24 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc19)
    %25 = tt.addptr %24, %23 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc19)
    %26 = tt.load %25 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %27 = arith.addf %26, %cst : tensor<16x16xf16, #blocked> loc(#loc21)
    %28 = arith.addi %15, %cst_6 : tensor<16x1xi32, #blocked> loc(#loc22)
    %29 = arith.muli %28, %16 : tensor<16x1xi32, #blocked> loc(#loc23)
    %30 = tt.broadcast %29 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc24)
    %31 = arith.addi %30, %20 : tensor<16x16xi32, #blocked> loc(#loc24)
    %32 = arith.addi %31, %22 : tensor<16x16xi32, #blocked> loc(#loc25)
    %33 = tt.addptr %24, %32 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %35 = arith.addf %27, %34 : tensor<16x16xf16, #blocked> loc(#loc28)
    %36 = arith.addi %15, %cst_5 : tensor<16x1xi32, #blocked> loc(#loc29)
    %37 = arith.muli %36, %16 : tensor<16x1xi32, #blocked> loc(#loc30)
    %38 = tt.broadcast %37 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc31)
    %39 = arith.addi %38, %20 : tensor<16x16xi32, #blocked> loc(#loc31)
    %40 = arith.addi %39, %22 : tensor<16x16xi32, #blocked> loc(#loc32)
    %41 = tt.addptr %24, %40 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc33)
    %42 = tt.load %41 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %43 = arith.addf %35, %42 : tensor<16x16xf16, #blocked> loc(#loc35)
    %44 = arith.addi %15, %cst_4 : tensor<16x1xi32, #blocked> loc(#loc36)
    %45 = arith.muli %44, %16 : tensor<16x1xi32, #blocked> loc(#loc37)
    %46 = tt.broadcast %45 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc38)
    %47 = arith.addi %46, %20 : tensor<16x16xi32, #blocked> loc(#loc38)
    %48 = arith.addi %47, %22 : tensor<16x16xi32, #blocked> loc(#loc39)
    %49 = tt.addptr %24, %48 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc40)
    %50 = tt.load %49 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %51 = arith.addf %43, %50 : tensor<16x16xf16, #blocked> loc(#loc42)
    %52 = arith.addi %15, %cst_3 : tensor<16x1xi32, #blocked> loc(#loc43)
    %53 = arith.muli %52, %16 : tensor<16x1xi32, #blocked> loc(#loc44)
    %54 = tt.broadcast %53 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc45)
    %55 = arith.addi %54, %20 : tensor<16x16xi32, #blocked> loc(#loc45)
    %56 = arith.addi %55, %22 : tensor<16x16xi32, #blocked> loc(#loc46)
    %57 = tt.addptr %24, %56 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc47)
    %58 = tt.load %57 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %59 = arith.addf %51, %58 : tensor<16x16xf16, #blocked> loc(#loc49)
    %60 = tt.splat %arg4 : i32 -> tensor<16x1xi32, #blocked> loc(#loc50)
    %61 = arith.addi %15, %60 : tensor<16x1xi32, #blocked> loc(#loc50)
    %62 = arith.muli %61, %16 : tensor<16x1xi32, #blocked> loc(#loc51)
    %63 = tt.broadcast %62 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc52)
    %64 = arith.addi %63, %20 : tensor<16x16xi32, #blocked> loc(#loc52)
    %65 = tt.addptr %24, %64 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc53)
    %66 = tt.load %65 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %67 = arith.addf %59, %66 : tensor<16x16xf16, #blocked> loc(#loc55)
    %68 = arith.addi %64, %cst_2 : tensor<16x16xi32, #blocked> loc(#loc56)
    %69 = tt.addptr %24, %68 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc57)
    %70 = tt.load %69 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %71 = arith.addf %67, %70 : tensor<16x16xf16, #blocked> loc(#loc59)
    %72 = arith.addi %64, %cst_1 : tensor<16x16xi32, #blocked> loc(#loc60)
    %73 = tt.addptr %24, %72 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc61)
    %74 = tt.load %73 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %75 = arith.addf %71, %74 : tensor<16x16xf16, #blocked> loc(#loc63)
    %76 = arith.addi %64, %cst_0 : tensor<16x16xi32, #blocked> loc(#loc64)
    %77 = tt.addptr %24, %76 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc65)
    %78 = tt.load %77 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %79 = arith.addf %75, %78 : tensor<16x16xf16, #blocked> loc(#loc67)
    %80 = arith.addi %64, %22 : tensor<16x16xi32, #blocked> loc(#loc68)
    %81 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc69)
    %82 = tt.addptr %81, %80 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc69)
    tt.store %82, %79 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before AllocateSharedMemory (allocate-shared-memory) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16, #blocked> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc11)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc11)
    %10 = tt.splat %7 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %11 = arith.addi %10, %8 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %12 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %13 = tt.splat %12 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %14 = arith.addi %13, %9 : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %15 = tt.expand_dims %11 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc15)
    %16 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked> loc(#loc16)
    %17 = arith.muli %15, %16 : tensor<16x1xi32, #blocked> loc(#loc16)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc17)
    %19 = tt.broadcast %17 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %20 = tt.broadcast %18 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %21 = arith.addi %19, %20 : tensor<16x16xi32, #blocked> loc(#loc17)
    %22 = tt.splat %arg4 : i32 -> tensor<16x16xi32, #blocked> loc(#loc18)
    %23 = arith.addi %21, %22 : tensor<16x16xi32, #blocked> loc(#loc18)
    %24 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc19)
    %25 = tt.addptr %24, %23 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc19)
    %26 = tt.load %25 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %27 = arith.addf %26, %cst : tensor<16x16xf16, #blocked> loc(#loc21)
    %28 = arith.addi %15, %cst_6 : tensor<16x1xi32, #blocked> loc(#loc22)
    %29 = arith.muli %28, %16 : tensor<16x1xi32, #blocked> loc(#loc23)
    %30 = tt.broadcast %29 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc24)
    %31 = arith.addi %30, %20 : tensor<16x16xi32, #blocked> loc(#loc24)
    %32 = arith.addi %31, %22 : tensor<16x16xi32, #blocked> loc(#loc25)
    %33 = tt.addptr %24, %32 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %35 = arith.addf %27, %34 : tensor<16x16xf16, #blocked> loc(#loc28)
    %36 = arith.addi %15, %cst_5 : tensor<16x1xi32, #blocked> loc(#loc29)
    %37 = arith.muli %36, %16 : tensor<16x1xi32, #blocked> loc(#loc30)
    %38 = tt.broadcast %37 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc31)
    %39 = arith.addi %38, %20 : tensor<16x16xi32, #blocked> loc(#loc31)
    %40 = arith.addi %39, %22 : tensor<16x16xi32, #blocked> loc(#loc32)
    %41 = tt.addptr %24, %40 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc33)
    %42 = tt.load %41 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %43 = arith.addf %35, %42 : tensor<16x16xf16, #blocked> loc(#loc35)
    %44 = arith.addi %15, %cst_4 : tensor<16x1xi32, #blocked> loc(#loc36)
    %45 = arith.muli %44, %16 : tensor<16x1xi32, #blocked> loc(#loc37)
    %46 = tt.broadcast %45 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc38)
    %47 = arith.addi %46, %20 : tensor<16x16xi32, #blocked> loc(#loc38)
    %48 = arith.addi %47, %22 : tensor<16x16xi32, #blocked> loc(#loc39)
    %49 = tt.addptr %24, %48 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc40)
    %50 = tt.load %49 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %51 = arith.addf %43, %50 : tensor<16x16xf16, #blocked> loc(#loc42)
    %52 = arith.addi %15, %cst_3 : tensor<16x1xi32, #blocked> loc(#loc43)
    %53 = arith.muli %52, %16 : tensor<16x1xi32, #blocked> loc(#loc44)
    %54 = tt.broadcast %53 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc45)
    %55 = arith.addi %54, %20 : tensor<16x16xi32, #blocked> loc(#loc45)
    %56 = arith.addi %55, %22 : tensor<16x16xi32, #blocked> loc(#loc46)
    %57 = tt.addptr %24, %56 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc47)
    %58 = tt.load %57 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %59 = arith.addf %51, %58 : tensor<16x16xf16, #blocked> loc(#loc49)
    %60 = tt.splat %arg4 : i32 -> tensor<16x1xi32, #blocked> loc(#loc50)
    %61 = arith.addi %15, %60 : tensor<16x1xi32, #blocked> loc(#loc50)
    %62 = arith.muli %61, %16 : tensor<16x1xi32, #blocked> loc(#loc51)
    %63 = tt.broadcast %62 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc52)
    %64 = arith.addi %63, %20 : tensor<16x16xi32, #blocked> loc(#loc52)
    %65 = tt.addptr %24, %64 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc53)
    %66 = tt.load %65 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %67 = arith.addf %59, %66 : tensor<16x16xf16, #blocked> loc(#loc55)
    %68 = arith.addi %64, %cst_2 : tensor<16x16xi32, #blocked> loc(#loc56)
    %69 = tt.addptr %24, %68 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc57)
    %70 = tt.load %69 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %71 = arith.addf %67, %70 : tensor<16x16xf16, #blocked> loc(#loc59)
    %72 = arith.addi %64, %cst_1 : tensor<16x16xi32, #blocked> loc(#loc60)
    %73 = tt.addptr %24, %72 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc61)
    %74 = tt.load %73 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %75 = arith.addf %71, %74 : tensor<16x16xf16, #blocked> loc(#loc63)
    %76 = arith.addi %64, %cst_0 : tensor<16x16xi32, #blocked> loc(#loc64)
    %77 = tt.addptr %24, %76 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc65)
    %78 = tt.load %77 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %79 = arith.addf %75, %78 : tensor<16x16xf16, #blocked> loc(#loc67)
    %80 = arith.addi %64, %22 : tensor<16x16xi32, #blocked> loc(#loc68)
    %81 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc69)
    %82 = tt.addptr %81, %80 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc69)
    tt.store %82, %79 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before ConvertTritonGPUToLLVM (convert-triton-gpu-to-llvm) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.shared = 0 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @stencil_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf16, #blocked> loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<16x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %arg4, %c2_i32 : i32 loc(#loc3)
    %2 = arith.subi %arg2, %1 : i32 loc(#loc4)
    %3 = arith.addi %2, %c15_i32 : i32 loc(#loc72)
    %4 = arith.divsi %3, %c16_i32 : i32 loc(#loc73)
    %5 = arith.divsi %0, %4 : i32 loc(#loc8)
    %6 = arith.remsi %0, %4 : i32 loc(#loc9)
    %7 = arith.muli %5, %c16_i32 : i32 loc(#loc10)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc11)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc11)
    %10 = tt.splat %7 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %11 = arith.addi %10, %8 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc12)
    %12 = arith.muli %6, %c16_i32 : i32 loc(#loc13)
    %13 = tt.splat %12 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %14 = arith.addi %13, %9 : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %15 = tt.expand_dims %11 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc15)
    %16 = tt.splat %arg3 : i32 -> tensor<16x1xi32, #blocked> loc(#loc16)
    %17 = arith.muli %15, %16 : tensor<16x1xi32, #blocked> loc(#loc16)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc17)
    %19 = tt.broadcast %17 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %20 = tt.broadcast %18 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc17)
    %21 = arith.addi %19, %20 : tensor<16x16xi32, #blocked> loc(#loc17)
    %22 = tt.splat %arg4 : i32 -> tensor<16x16xi32, #blocked> loc(#loc18)
    %23 = arith.addi %21, %22 : tensor<16x16xi32, #blocked> loc(#loc18)
    %24 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc19)
    %25 = tt.addptr %24, %23 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc19)
    %26 = tt.load %25 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc20)
    %27 = arith.addf %26, %cst : tensor<16x16xf16, #blocked> loc(#loc21)
    %28 = arith.addi %15, %cst_6 : tensor<16x1xi32, #blocked> loc(#loc22)
    %29 = arith.muli %28, %16 : tensor<16x1xi32, #blocked> loc(#loc23)
    %30 = tt.broadcast %29 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc24)
    %31 = arith.addi %30, %20 : tensor<16x16xi32, #blocked> loc(#loc24)
    %32 = arith.addi %31, %22 : tensor<16x16xi32, #blocked> loc(#loc25)
    %33 = tt.addptr %24, %32 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc26)
    %34 = tt.load %33 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc27)
    %35 = arith.addf %27, %34 : tensor<16x16xf16, #blocked> loc(#loc28)
    %36 = arith.addi %15, %cst_5 : tensor<16x1xi32, #blocked> loc(#loc29)
    %37 = arith.muli %36, %16 : tensor<16x1xi32, #blocked> loc(#loc30)
    %38 = tt.broadcast %37 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc31)
    %39 = arith.addi %38, %20 : tensor<16x16xi32, #blocked> loc(#loc31)
    %40 = arith.addi %39, %22 : tensor<16x16xi32, #blocked> loc(#loc32)
    %41 = tt.addptr %24, %40 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc33)
    %42 = tt.load %41 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc34)
    %43 = arith.addf %35, %42 : tensor<16x16xf16, #blocked> loc(#loc35)
    %44 = arith.addi %15, %cst_4 : tensor<16x1xi32, #blocked> loc(#loc36)
    %45 = arith.muli %44, %16 : tensor<16x1xi32, #blocked> loc(#loc37)
    %46 = tt.broadcast %45 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc38)
    %47 = arith.addi %46, %20 : tensor<16x16xi32, #blocked> loc(#loc38)
    %48 = arith.addi %47, %22 : tensor<16x16xi32, #blocked> loc(#loc39)
    %49 = tt.addptr %24, %48 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc40)
    %50 = tt.load %49 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc41)
    %51 = arith.addf %43, %50 : tensor<16x16xf16, #blocked> loc(#loc42)
    %52 = arith.addi %15, %cst_3 : tensor<16x1xi32, #blocked> loc(#loc43)
    %53 = arith.muli %52, %16 : tensor<16x1xi32, #blocked> loc(#loc44)
    %54 = tt.broadcast %53 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc45)
    %55 = arith.addi %54, %20 : tensor<16x16xi32, #blocked> loc(#loc45)
    %56 = arith.addi %55, %22 : tensor<16x16xi32, #blocked> loc(#loc46)
    %57 = tt.addptr %24, %56 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc47)
    %58 = tt.load %57 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc48)
    %59 = arith.addf %51, %58 : tensor<16x16xf16, #blocked> loc(#loc49)
    %60 = tt.splat %arg4 : i32 -> tensor<16x1xi32, #blocked> loc(#loc50)
    %61 = arith.addi %15, %60 : tensor<16x1xi32, #blocked> loc(#loc50)
    %62 = arith.muli %61, %16 : tensor<16x1xi32, #blocked> loc(#loc51)
    %63 = tt.broadcast %62 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc52)
    %64 = arith.addi %63, %20 : tensor<16x16xi32, #blocked> loc(#loc52)
    %65 = tt.addptr %24, %64 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc53)
    %66 = tt.load %65 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc54)
    %67 = arith.addf %59, %66 : tensor<16x16xf16, #blocked> loc(#loc55)
    %68 = arith.addi %64, %cst_2 : tensor<16x16xi32, #blocked> loc(#loc56)
    %69 = tt.addptr %24, %68 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc57)
    %70 = tt.load %69 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc58)
    %71 = arith.addf %67, %70 : tensor<16x16xf16, #blocked> loc(#loc59)
    %72 = arith.addi %64, %cst_1 : tensor<16x16xi32, #blocked> loc(#loc60)
    %73 = tt.addptr %24, %72 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc61)
    %74 = tt.load %73 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc62)
    %75 = arith.addf %71, %74 : tensor<16x16xf16, #blocked> loc(#loc63)
    %76 = arith.addi %64, %cst_0 : tensor<16x16xi32, #blocked> loc(#loc64)
    %77 = tt.addptr %24, %76 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc65)
    %78 = tt.load %77 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc66)
    %79 = arith.addf %75, %78 : tensor<16x16xf16, #blocked> loc(#loc67)
    %80 = arith.addi %64, %22 : tensor<16x16xi32, #blocked> loc(#loc68)
    %81 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc69)
    %82 = tt.addptr %81, %80 : tensor<16x16x!tt.ptr<f16>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc69)
    tt.store %82, %79 : tensor<16x16x!tt.ptr<f16>, #blocked> loc(#loc70)
    tt.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before ConvertNVGPUToLLVM (convert-nv-gpu-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.shared = 0 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @stencil_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.maxntid = array<i32: 128>} {
    %0 = builtin.unrealized_conversion_cast %arg1 : !llvm.ptr<1> to !tt.ptr<f16> loc(#loc)
    %1 = builtin.unrealized_conversion_cast %arg0 : !llvm.ptr<1> to !tt.ptr<f16> loc(#loc)
    %2 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(0.000000e+00 : f16) : f16 loc(#loc1)
    %5 = llvm.bitcast %4 : f16 to f16 loc(#loc1)
    %6 = llvm.mlir.undef : !llvm.struct<(f16, f16)> loc(#loc1)
    %7 = llvm.insertvalue %5, %6[0] : !llvm.struct<(f16, f16)>  loc(#loc1)
    %8 = llvm.insertvalue %5, %7[1] : !llvm.struct<(f16, f16)>  loc(#loc1)
    %9 = llvm.mlir.constant(15 : i32) : i32 loc(#loc1)
    %10 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %11 = llvm.bitcast %10 : i32 to i32 loc(#loc1)
    %12 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc1)
    %13 = llvm.insertvalue %11, %12[0] : !llvm.struct<(i32, i32)>  loc(#loc1)
    %14 = llvm.insertvalue %11, %13[1] : !llvm.struct<(i32, i32)>  loc(#loc1)
    %15 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %16 = llvm.bitcast %15 : i32 to i32 loc(#loc1)
    %17 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc1)
    %18 = llvm.insertvalue %16, %17[0] : !llvm.struct<(i32, i32)>  loc(#loc1)
    %19 = llvm.insertvalue %16, %18[1] : !llvm.struct<(i32, i32)>  loc(#loc1)
    %20 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %21 = llvm.bitcast %20 : i32 to i32 loc(#loc1)
    %22 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc1)
    %23 = llvm.insertvalue %21, %22[0] : !llvm.struct<(i32, i32)>  loc(#loc1)
    %24 = llvm.insertvalue %21, %23[1] : !llvm.struct<(i32, i32)>  loc(#loc1)
    %25 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %26 = llvm.bitcast %25 : i32 to i32 loc(#loc1)
    %27 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc1)
    %28 = llvm.insertvalue %26, %27[0] : !llvm.struct<(i32, i32)>  loc(#loc1)
    %29 = llvm.insertvalue %26, %28[1] : !llvm.struct<(i32, i32)>  loc(#loc1)
    %30 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %31 = llvm.bitcast %30 : i32 to i32 loc(#loc1)
    %32 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc1)
    %33 = llvm.insertvalue %31, %32[0] : !llvm.struct<(i32, i32)>  loc(#loc1)
    %34 = llvm.insertvalue %31, %33[1] : !llvm.struct<(i32, i32)>  loc(#loc1)
    %35 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %36 = llvm.bitcast %35 : i32 to i32 loc(#loc1)
    %37 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc1)
    %38 = llvm.insertvalue %36, %37[0] : !llvm.struct<(i32, i32)>  loc(#loc1)
    %39 = llvm.insertvalue %36, %38[1] : !llvm.struct<(i32, i32)>  loc(#loc1)
    %40 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %41 = llvm.bitcast %40 : i32 to i32 loc(#loc1)
    %42 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc1)
    %43 = llvm.insertvalue %41, %42[0] : !llvm.struct<(i32, i32)>  loc(#loc1)
    %44 = llvm.insertvalue %41, %43[1] : !llvm.struct<(i32, i32)>  loc(#loc1)
    %45 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc2)
    %46 = llvm.mul %arg4, %2 : i32 loc(#loc3)
    %47 = llvm.sub %arg2, %46 : i32 loc(#loc4)
    %48 = llvm.add %47, %9 : i32 loc(#loc72)
    %49 = llvm.sdiv %48, %3  : i32 loc(#loc73)
    %50 = llvm.sdiv %45, %49  : i32 loc(#loc8)
    %51 = llvm.srem %45, %49  : i32 loc(#loc9)
    %52 = llvm.mul %50, %3 : i32 loc(#loc10)
    %53 = llvm.mlir.constant(0 : index) : i32 loc(#loc11)
    %54 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc11)
    %55 = llvm.mlir.constant(32 : i32) : i32 loc(#loc11)
    %56 = llvm.urem %54, %55  : i32 loc(#loc11)
    %57 = llvm.udiv %54, %55  : i32 loc(#loc11)
    %58 = llvm.mlir.constant(0 : i32) : i32 loc(#loc11)
    %59 = nvgpu.cluster_id loc(#loc11)
    %60 = llvm.mlir.constant(0 : i32) : i32 loc(#loc11)
    %61 = llvm.mlir.constant(0 : i32) : i32 loc(#loc11)
    %62 = llvm.mlir.constant(1 : i32) : i32 loc(#loc11)
    %63 = llvm.and %56, %62  : i32 loc(#loc11)
    %64 = llvm.icmp "eq" %63, %61 : i32 loc(#loc11)
    %65 = llvm.mlir.constant(2 : i32) : i32 loc(#loc11)
    %66 = llvm.and %56, %65  : i32 loc(#loc11)
    %67 = llvm.icmp "eq" %66, %61 : i32 loc(#loc11)
    %68 = llvm.mlir.constant(4 : i32) : i32 loc(#loc11)
    %69 = llvm.and %56, %68  : i32 loc(#loc11)
    %70 = llvm.icmp "eq" %69, %61 : i32 loc(#loc11)
    %71 = llvm.mlir.constant(8 : i32) : i32 loc(#loc11)
    %72 = llvm.and %56, %71  : i32 loc(#loc11)
    %73 = llvm.icmp "eq" %72, %61 : i32 loc(#loc11)
    %74 = llvm.mlir.constant(16 : i32) : i32 loc(#loc11)
    %75 = llvm.and %56, %74  : i32 loc(#loc11)
    %76 = llvm.icmp "eq" %75, %61 : i32 loc(#loc11)
    %77 = llvm.mlir.constant(1 : i32) : i32 loc(#loc11)
    %78 = llvm.select %76, %61, %77 : i1, i32 loc(#loc11)
    %79 = llvm.xor %61, %78  : i32 loc(#loc11)
    %80 = llvm.mlir.constant(1 : i32) : i32 loc(#loc11)
    %81 = llvm.and %57, %80  : i32 loc(#loc11)
    %82 = llvm.icmp "eq" %81, %61 : i32 loc(#loc11)
    %83 = llvm.mlir.constant(2 : i32) : i32 loc(#loc11)
    %84 = llvm.select %82, %61, %83 : i1, i32 loc(#loc11)
    %85 = llvm.xor %79, %84  : i32 loc(#loc11)
    %86 = llvm.mlir.constant(2 : i32) : i32 loc(#loc11)
    %87 = llvm.and %57, %86  : i32 loc(#loc11)
    %88 = llvm.icmp "eq" %87, %61 : i32 loc(#loc11)
    %89 = llvm.mlir.constant(4 : i32) : i32 loc(#loc11)
    %90 = llvm.select %88, %61, %89 : i1, i32 loc(#loc11)
    %91 = llvm.xor %85, %90  : i32 loc(#loc11)
    %92 = llvm.mlir.constant(1 : i32) : i32 loc(#loc11)
    %93 = llvm.mlir.constant(0 : i32) : i32 loc(#loc11)
    %94 = llvm.mlir.constant(8 : i32) : i32 loc(#loc11)
    %95 = llvm.mlir.constant(1 : i32) : i32 loc(#loc11)
    %96 = llvm.and %56, %95  : i32 loc(#loc11)
    %97 = llvm.icmp "eq" %96, %93 : i32 loc(#loc11)
    %98 = llvm.mlir.constant(2 : i32) : i32 loc(#loc11)
    %99 = llvm.and %56, %98  : i32 loc(#loc11)
    %100 = llvm.icmp "eq" %99, %93 : i32 loc(#loc11)
    %101 = llvm.mlir.constant(4 : i32) : i32 loc(#loc11)
    %102 = llvm.and %56, %101  : i32 loc(#loc11)
    %103 = llvm.icmp "eq" %102, %93 : i32 loc(#loc11)
    %104 = llvm.mlir.constant(8 : i32) : i32 loc(#loc11)
    %105 = llvm.and %56, %104  : i32 loc(#loc11)
    %106 = llvm.icmp "eq" %105, %93 : i32 loc(#loc11)
    %107 = llvm.mlir.constant(16 : i32) : i32 loc(#loc11)
    %108 = llvm.and %56, %107  : i32 loc(#loc11)
    %109 = llvm.icmp "eq" %108, %93 : i32 loc(#loc11)
    %110 = llvm.mlir.constant(1 : i32) : i32 loc(#loc11)
    %111 = llvm.select %109, %93, %110 : i1, i32 loc(#loc11)
    %112 = llvm.xor %94, %111  : i32 loc(#loc11)
    %113 = llvm.mlir.constant(1 : i32) : i32 loc(#loc11)
    %114 = llvm.and %57, %113  : i32 loc(#loc11)
    %115 = llvm.icmp "eq" %114, %93 : i32 loc(#loc11)
    %116 = llvm.mlir.constant(2 : i32) : i32 loc(#loc11)
    %117 = llvm.select %115, %93, %116 : i1, i32 loc(#loc11)
    %118 = llvm.xor %112, %117  : i32 loc(#loc11)
    %119 = llvm.mlir.constant(2 : i32) : i32 loc(#loc11)
    %120 = llvm.and %57, %119  : i32 loc(#loc11)
    %121 = llvm.icmp "eq" %120, %93 : i32 loc(#loc11)
    %122 = llvm.mlir.constant(4 : i32) : i32 loc(#loc11)
    %123 = llvm.select %121, %93, %122 : i1, i32 loc(#loc11)
    %124 = llvm.xor %118, %123  : i32 loc(#loc11)
    %125 = llvm.add %91, %53 : i32 loc(#loc11)
    %126 = llvm.add %124, %53 : i32 loc(#loc11)
    %127 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc11)
    %128 = llvm.insertvalue %125, %127[0] : !llvm.struct<(i32, i32)>  loc(#loc11)
    %129 = llvm.insertvalue %126, %128[1] : !llvm.struct<(i32, i32)>  loc(#loc11)
    %130 = llvm.mlir.constant(0 : index) : i32 loc(#loc11)
    %131 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc11)
    %132 = llvm.mlir.constant(32 : i32) : i32 loc(#loc11)
    %133 = llvm.urem %131, %132  : i32 loc(#loc11)
    %134 = llvm.udiv %131, %132  : i32 loc(#loc11)
    %135 = llvm.mlir.constant(0 : i32) : i32 loc(#loc11)
    %136 = nvgpu.cluster_id loc(#loc11)
    %137 = llvm.mlir.constant(0 : i32) : i32 loc(#loc11)
    %138 = llvm.mlir.constant(0 : i32) : i32 loc(#loc11)
    %139 = llvm.mlir.constant(1 : i32) : i32 loc(#loc11)
    %140 = llvm.and %133, %139  : i32 loc(#loc11)
    %141 = llvm.icmp "eq" %140, %138 : i32 loc(#loc11)
    %142 = llvm.mlir.constant(1 : i32) : i32 loc(#loc11)
    %143 = llvm.select %141, %138, %142 : i1, i32 loc(#loc11)
    %144 = llvm.xor %138, %143  : i32 loc(#loc11)
    %145 = llvm.mlir.constant(2 : i32) : i32 loc(#loc11)
    %146 = llvm.and %133, %145  : i32 loc(#loc11)
    %147 = llvm.icmp "eq" %146, %138 : i32 loc(#loc11)
    %148 = llvm.mlir.constant(2 : i32) : i32 loc(#loc11)
    %149 = llvm.select %147, %138, %148 : i1, i32 loc(#loc11)
    %150 = llvm.xor %144, %149  : i32 loc(#loc11)
    %151 = llvm.mlir.constant(4 : i32) : i32 loc(#loc11)
    %152 = llvm.and %133, %151  : i32 loc(#loc11)
    %153 = llvm.icmp "eq" %152, %138 : i32 loc(#loc11)
    %154 = llvm.mlir.constant(4 : i32) : i32 loc(#loc11)
    %155 = llvm.select %153, %138, %154 : i1, i32 loc(#loc11)
    %156 = llvm.xor %150, %155  : i32 loc(#loc11)
    %157 = llvm.mlir.constant(8 : i32) : i32 loc(#loc11)
    %158 = llvm.and %133, %157  : i32 loc(#loc11)
    %159 = llvm.icmp "eq" %158, %138 : i32 loc(#loc11)
    %160 = llvm.mlir.constant(8 : i32) : i32 loc(#loc11)
    %161 = llvm.select %159, %138, %160 : i1, i32 loc(#loc11)
    %162 = llvm.xor %156, %161  : i32 loc(#loc11)
    %163 = llvm.mlir.constant(16 : i32) : i32 loc(#loc11)
    %164 = llvm.and %133, %163  : i32 loc(#loc11)
    %165 = llvm.icmp "eq" %164, %138 : i32 loc(#loc11)
    %166 = llvm.mlir.constant(1 : i32) : i32 loc(#loc11)
    %167 = llvm.and %134, %166  : i32 loc(#loc11)
    %168 = llvm.icmp "eq" %167, %138 : i32 loc(#loc11)
    %169 = llvm.mlir.constant(2 : i32) : i32 loc(#loc11)
    %170 = llvm.and %134, %169  : i32 loc(#loc11)
    %171 = llvm.icmp "eq" %170, %138 : i32 loc(#loc11)
    %172 = llvm.add %162, %130 : i32 loc(#loc11)
    %173 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc11)
    %174 = llvm.insertvalue %172, %173[0] : !llvm.struct<(i32)>  loc(#loc11)
    %175 = llvm.bitcast %52 : i32 to i32 loc(#loc12)
    %176 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc12)
    %177 = llvm.insertvalue %175, %176[0] : !llvm.struct<(i32, i32)>  loc(#loc12)
    %178 = llvm.insertvalue %175, %177[1] : !llvm.struct<(i32, i32)>  loc(#loc12)
    %179 = llvm.extractvalue %178[0] : !llvm.struct<(i32, i32)>  loc(#loc12)
    %180 = llvm.extractvalue %178[1] : !llvm.struct<(i32, i32)>  loc(#loc12)
    %181 = llvm.extractvalue %129[0] : !llvm.struct<(i32, i32)>  loc(#loc12)
    %182 = llvm.extractvalue %129[1] : !llvm.struct<(i32, i32)>  loc(#loc12)
    %183 = llvm.add %179, %181 : i32 loc(#loc12)
    %184 = llvm.add %180, %182 : i32 loc(#loc12)
    %185 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc12)
    %186 = llvm.insertvalue %183, %185[0] : !llvm.struct<(i32, i32)>  loc(#loc12)
    %187 = llvm.insertvalue %184, %186[1] : !llvm.struct<(i32, i32)>  loc(#loc12)
    %188 = llvm.mul %51, %3 : i32 loc(#loc13)
    %189 = llvm.bitcast %188 : i32 to i32 loc(#loc14)
    %190 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc14)
    %191 = llvm.insertvalue %189, %190[0] : !llvm.struct<(i32)>  loc(#loc14)
    %192 = llvm.extractvalue %191[0] : !llvm.struct<(i32)>  loc(#loc14)
    %193 = llvm.extractvalue %174[0] : !llvm.struct<(i32)>  loc(#loc14)
    %194 = llvm.add %192, %193 : i32 loc(#loc14)
    %195 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc14)
    %196 = llvm.insertvalue %194, %195[0] : !llvm.struct<(i32)>  loc(#loc14)
    %197 = llvm.extractvalue %187[0] : !llvm.struct<(i32, i32)>  loc(#loc15)
    %198 = llvm.extractvalue %187[1] : !llvm.struct<(i32, i32)>  loc(#loc15)
    %199 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc15)
    %200 = llvm.insertvalue %197, %199[0] : !llvm.struct<(i32, i32)>  loc(#loc15)
    %201 = llvm.insertvalue %198, %200[1] : !llvm.struct<(i32, i32)>  loc(#loc15)
    %202 = llvm.bitcast %arg3 : i32 to i32 loc(#loc16)
    %203 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc16)
    %204 = llvm.insertvalue %202, %203[0] : !llvm.struct<(i32, i32)>  loc(#loc16)
    %205 = llvm.insertvalue %202, %204[1] : !llvm.struct<(i32, i32)>  loc(#loc16)
    %206 = llvm.extractvalue %201[0] : !llvm.struct<(i32, i32)>  loc(#loc16)
    %207 = llvm.extractvalue %201[1] : !llvm.struct<(i32, i32)>  loc(#loc16)
    %208 = llvm.extractvalue %205[0] : !llvm.struct<(i32, i32)>  loc(#loc16)
    %209 = llvm.extractvalue %205[1] : !llvm.struct<(i32, i32)>  loc(#loc16)
    %210 = llvm.mul %206, %208 : i32 loc(#loc16)
    %211 = llvm.mul %207, %209 : i32 loc(#loc16)
    %212 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc16)
    %213 = llvm.insertvalue %210, %212[0] : !llvm.struct<(i32, i32)>  loc(#loc16)
    %214 = llvm.insertvalue %211, %213[1] : !llvm.struct<(i32, i32)>  loc(#loc16)
    %215 = llvm.extractvalue %196[0] : !llvm.struct<(i32)>  loc(#loc17)
    %216 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc17)
    %217 = llvm.insertvalue %215, %216[0] : !llvm.struct<(i32)>  loc(#loc17)
    %218 = llvm.extractvalue %214[0] : !llvm.struct<(i32, i32)>  loc(#loc17)
    %219 = llvm.extractvalue %214[1] : !llvm.struct<(i32, i32)>  loc(#loc17)
    %220 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc17)
    %221 = llvm.insertvalue %218, %220[0] : !llvm.struct<(i32, i32)>  loc(#loc17)
    %222 = llvm.insertvalue %219, %221[1] : !llvm.struct<(i32, i32)>  loc(#loc17)
    %223 = llvm.extractvalue %217[0] : !llvm.struct<(i32)>  loc(#loc17)
    %224 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc17)
    %225 = llvm.insertvalue %223, %224[0] : !llvm.struct<(i32, i32)>  loc(#loc17)
    %226 = llvm.insertvalue %223, %225[1] : !llvm.struct<(i32, i32)>  loc(#loc17)
    %227 = llvm.extractvalue %222[0] : !llvm.struct<(i32, i32)>  loc(#loc17)
    %228 = llvm.extractvalue %222[1] : !llvm.struct<(i32, i32)>  loc(#loc17)
    %229 = llvm.extractvalue %226[0] : !llvm.struct<(i32, i32)>  loc(#loc17)
    %230 = llvm.extractvalue %226[1] : !llvm.struct<(i32, i32)>  loc(#loc17)
    %231 = llvm.add %227, %229 : i32 loc(#loc17)
    %232 = llvm.add %228, %230 : i32 loc(#loc17)
    %233 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc17)
    %234 = llvm.insertvalue %231, %233[0] : !llvm.struct<(i32, i32)>  loc(#loc17)
    %235 = llvm.insertvalue %232, %234[1] : !llvm.struct<(i32, i32)>  loc(#loc17)
    %236 = llvm.bitcast %arg4 : i32 to i32 loc(#loc18)
    %237 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc18)
    %238 = llvm.insertvalue %236, %237[0] : !llvm.struct<(i32, i32)>  loc(#loc18)
    %239 = llvm.insertvalue %236, %238[1] : !llvm.struct<(i32, i32)>  loc(#loc18)
    %240 = llvm.extractvalue %235[0] : !llvm.struct<(i32, i32)>  loc(#loc18)
    %241 = llvm.extractvalue %235[1] : !llvm.struct<(i32, i32)>  loc(#loc18)
    %242 = llvm.extractvalue %239[0] : !llvm.struct<(i32, i32)>  loc(#loc18)
    %243 = llvm.extractvalue %239[1] : !llvm.struct<(i32, i32)>  loc(#loc18)
    %244 = llvm.add %240, %242 : i32 loc(#loc18)
    %245 = llvm.add %241, %243 : i32 loc(#loc18)
    %246 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc18)
    %247 = llvm.insertvalue %244, %246[0] : !llvm.struct<(i32, i32)>  loc(#loc18)
    %248 = llvm.insertvalue %245, %247[1] : !llvm.struct<(i32, i32)>  loc(#loc18)
    %249 = llvm.bitcast %arg0 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc19)
    %250 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>)> loc(#loc19)
    %251 = llvm.insertvalue %249, %250[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc19)
    %252 = llvm.insertvalue %249, %251[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc19)
    %253 = llvm.extractvalue %252[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc19)
    %254 = llvm.extractvalue %252[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc19)
    %255 = llvm.extractvalue %248[0] : !llvm.struct<(i32, i32)>  loc(#loc19)
    %256 = llvm.extractvalue %248[1] : !llvm.struct<(i32, i32)>  loc(#loc19)
    %257 = llvm.getelementptr %253[%255] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc19)
    %258 = llvm.getelementptr %254[%256] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc19)
    %259 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>)> loc(#loc19)
    %260 = llvm.insertvalue %257, %259[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc19)
    %261 = llvm.insertvalue %258, %260[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc19)
    %262 = llvm.extractvalue %261[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc20)
    %263 = llvm.extractvalue %261[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc20)
    %264 = llvm.mlir.constant(true) : i1 loc(#loc20)
    %265 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %262, %264 : (!llvm.ptr<1>, i1) -> i16 loc(#loc20)
    %266 = llvm.bitcast %265 : i16 to vector<1xf16> loc(#loc20)
    %267 = llvm.mlir.constant(0 : index) : i32 loc(#loc20)
    %268 = llvm.extractelement %266[%267 : i32] : vector<1xf16> loc(#loc20)
    %269 = llvm.mlir.constant(true) : i1 loc(#loc20)
    %270 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %263, %269 : (!llvm.ptr<1>, i1) -> i16 loc(#loc20)
    %271 = llvm.bitcast %270 : i16 to vector<1xf16> loc(#loc20)
    %272 = llvm.mlir.constant(0 : index) : i32 loc(#loc20)
    %273 = llvm.extractelement %271[%272 : i32] : vector<1xf16> loc(#loc20)
    %274 = llvm.mlir.undef : !llvm.struct<(f16, f16)> loc(#loc20)
    %275 = llvm.insertvalue %268, %274[0] : !llvm.struct<(f16, f16)>  loc(#loc20)
    %276 = llvm.insertvalue %273, %275[1] : !llvm.struct<(f16, f16)>  loc(#loc20)
    %277 = llvm.extractvalue %276[0] : !llvm.struct<(f16, f16)>  loc(#loc21)
    %278 = llvm.extractvalue %276[1] : !llvm.struct<(f16, f16)>  loc(#loc21)
    %279 = llvm.extractvalue %8[0] : !llvm.struct<(f16, f16)>  loc(#loc21)
    %280 = llvm.extractvalue %8[1] : !llvm.struct<(f16, f16)>  loc(#loc21)
    %281 = llvm.fadd %277, %279  : f16 loc(#loc21)
    %282 = llvm.fadd %278, %280  : f16 loc(#loc21)
    %283 = llvm.mlir.undef : !llvm.struct<(f16, f16)> loc(#loc21)
    %284 = llvm.insertvalue %281, %283[0] : !llvm.struct<(f16, f16)>  loc(#loc21)
    %285 = llvm.insertvalue %282, %284[1] : !llvm.struct<(f16, f16)>  loc(#loc21)
    %286 = llvm.extractvalue %201[0] : !llvm.struct<(i32, i32)>  loc(#loc22)
    %287 = llvm.extractvalue %201[1] : !llvm.struct<(i32, i32)>  loc(#loc22)
    %288 = llvm.extractvalue %44[0] : !llvm.struct<(i32, i32)>  loc(#loc22)
    %289 = llvm.extractvalue %44[1] : !llvm.struct<(i32, i32)>  loc(#loc22)
    %290 = llvm.add %286, %288 : i32 loc(#loc22)
    %291 = llvm.add %287, %289 : i32 loc(#loc22)
    %292 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc22)
    %293 = llvm.insertvalue %290, %292[0] : !llvm.struct<(i32, i32)>  loc(#loc22)
    %294 = llvm.insertvalue %291, %293[1] : !llvm.struct<(i32, i32)>  loc(#loc22)
    %295 = llvm.extractvalue %294[0] : !llvm.struct<(i32, i32)>  loc(#loc23)
    %296 = llvm.extractvalue %294[1] : !llvm.struct<(i32, i32)>  loc(#loc23)
    %297 = llvm.extractvalue %205[0] : !llvm.struct<(i32, i32)>  loc(#loc23)
    %298 = llvm.extractvalue %205[1] : !llvm.struct<(i32, i32)>  loc(#loc23)
    %299 = llvm.mul %295, %297 : i32 loc(#loc23)
    %300 = llvm.mul %296, %298 : i32 loc(#loc23)
    %301 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc23)
    %302 = llvm.insertvalue %299, %301[0] : !llvm.struct<(i32, i32)>  loc(#loc23)
    %303 = llvm.insertvalue %300, %302[1] : !llvm.struct<(i32, i32)>  loc(#loc23)
    %304 = llvm.extractvalue %303[0] : !llvm.struct<(i32, i32)>  loc(#loc24)
    %305 = llvm.extractvalue %303[1] : !llvm.struct<(i32, i32)>  loc(#loc24)
    %306 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc24)
    %307 = llvm.insertvalue %304, %306[0] : !llvm.struct<(i32, i32)>  loc(#loc24)
    %308 = llvm.insertvalue %305, %307[1] : !llvm.struct<(i32, i32)>  loc(#loc24)
    %309 = llvm.extractvalue %308[0] : !llvm.struct<(i32, i32)>  loc(#loc24)
    %310 = llvm.extractvalue %308[1] : !llvm.struct<(i32, i32)>  loc(#loc24)
    %311 = llvm.extractvalue %226[0] : !llvm.struct<(i32, i32)>  loc(#loc24)
    %312 = llvm.extractvalue %226[1] : !llvm.struct<(i32, i32)>  loc(#loc24)
    %313 = llvm.add %309, %311 : i32 loc(#loc24)
    %314 = llvm.add %310, %312 : i32 loc(#loc24)
    %315 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc24)
    %316 = llvm.insertvalue %313, %315[0] : !llvm.struct<(i32, i32)>  loc(#loc24)
    %317 = llvm.insertvalue %314, %316[1] : !llvm.struct<(i32, i32)>  loc(#loc24)
    %318 = llvm.extractvalue %317[0] : !llvm.struct<(i32, i32)>  loc(#loc25)
    %319 = llvm.extractvalue %317[1] : !llvm.struct<(i32, i32)>  loc(#loc25)
    %320 = llvm.extractvalue %239[0] : !llvm.struct<(i32, i32)>  loc(#loc25)
    %321 = llvm.extractvalue %239[1] : !llvm.struct<(i32, i32)>  loc(#loc25)
    %322 = llvm.add %318, %320 : i32 loc(#loc25)
    %323 = llvm.add %319, %321 : i32 loc(#loc25)
    %324 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc25)
    %325 = llvm.insertvalue %322, %324[0] : !llvm.struct<(i32, i32)>  loc(#loc25)
    %326 = llvm.insertvalue %323, %325[1] : !llvm.struct<(i32, i32)>  loc(#loc25)
    %327 = llvm.extractvalue %252[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc26)
    %328 = llvm.extractvalue %252[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc26)
    %329 = llvm.extractvalue %326[0] : !llvm.struct<(i32, i32)>  loc(#loc26)
    %330 = llvm.extractvalue %326[1] : !llvm.struct<(i32, i32)>  loc(#loc26)
    %331 = llvm.getelementptr %327[%329] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc26)
    %332 = llvm.getelementptr %328[%330] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc26)
    %333 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>)> loc(#loc26)
    %334 = llvm.insertvalue %331, %333[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc26)
    %335 = llvm.insertvalue %332, %334[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc26)
    %336 = llvm.extractvalue %335[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc27)
    %337 = llvm.extractvalue %335[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc27)
    %338 = llvm.mlir.constant(true) : i1 loc(#loc27)
    %339 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %336, %338 : (!llvm.ptr<1>, i1) -> i16 loc(#loc27)
    %340 = llvm.bitcast %339 : i16 to vector<1xf16> loc(#loc27)
    %341 = llvm.mlir.constant(0 : index) : i32 loc(#loc27)
    %342 = llvm.extractelement %340[%341 : i32] : vector<1xf16> loc(#loc27)
    %343 = llvm.mlir.constant(true) : i1 loc(#loc27)
    %344 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %337, %343 : (!llvm.ptr<1>, i1) -> i16 loc(#loc27)
    %345 = llvm.bitcast %344 : i16 to vector<1xf16> loc(#loc27)
    %346 = llvm.mlir.constant(0 : index) : i32 loc(#loc27)
    %347 = llvm.extractelement %345[%346 : i32] : vector<1xf16> loc(#loc27)
    %348 = llvm.mlir.undef : !llvm.struct<(f16, f16)> loc(#loc27)
    %349 = llvm.insertvalue %342, %348[0] : !llvm.struct<(f16, f16)>  loc(#loc27)
    %350 = llvm.insertvalue %347, %349[1] : !llvm.struct<(f16, f16)>  loc(#loc27)
    %351 = llvm.extractvalue %285[0] : !llvm.struct<(f16, f16)>  loc(#loc28)
    %352 = llvm.extractvalue %285[1] : !llvm.struct<(f16, f16)>  loc(#loc28)
    %353 = llvm.extractvalue %350[0] : !llvm.struct<(f16, f16)>  loc(#loc28)
    %354 = llvm.extractvalue %350[1] : !llvm.struct<(f16, f16)>  loc(#loc28)
    %355 = llvm.fadd %351, %353  : f16 loc(#loc28)
    %356 = llvm.fadd %352, %354  : f16 loc(#loc28)
    %357 = llvm.mlir.undef : !llvm.struct<(f16, f16)> loc(#loc28)
    %358 = llvm.insertvalue %355, %357[0] : !llvm.struct<(f16, f16)>  loc(#loc28)
    %359 = llvm.insertvalue %356, %358[1] : !llvm.struct<(f16, f16)>  loc(#loc28)
    %360 = llvm.extractvalue %201[0] : !llvm.struct<(i32, i32)>  loc(#loc29)
    %361 = llvm.extractvalue %201[1] : !llvm.struct<(i32, i32)>  loc(#loc29)
    %362 = llvm.extractvalue %39[0] : !llvm.struct<(i32, i32)>  loc(#loc29)
    %363 = llvm.extractvalue %39[1] : !llvm.struct<(i32, i32)>  loc(#loc29)
    %364 = llvm.add %360, %362 : i32 loc(#loc29)
    %365 = llvm.add %361, %363 : i32 loc(#loc29)
    %366 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc29)
    %367 = llvm.insertvalue %364, %366[0] : !llvm.struct<(i32, i32)>  loc(#loc29)
    %368 = llvm.insertvalue %365, %367[1] : !llvm.struct<(i32, i32)>  loc(#loc29)
    %369 = llvm.extractvalue %368[0] : !llvm.struct<(i32, i32)>  loc(#loc30)
    %370 = llvm.extractvalue %368[1] : !llvm.struct<(i32, i32)>  loc(#loc30)
    %371 = llvm.extractvalue %205[0] : !llvm.struct<(i32, i32)>  loc(#loc30)
    %372 = llvm.extractvalue %205[1] : !llvm.struct<(i32, i32)>  loc(#loc30)
    %373 = llvm.mul %369, %371 : i32 loc(#loc30)
    %374 = llvm.mul %370, %372 : i32 loc(#loc30)
    %375 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc30)
    %376 = llvm.insertvalue %373, %375[0] : !llvm.struct<(i32, i32)>  loc(#loc30)
    %377 = llvm.insertvalue %374, %376[1] : !llvm.struct<(i32, i32)>  loc(#loc30)
    %378 = llvm.extractvalue %377[0] : !llvm.struct<(i32, i32)>  loc(#loc31)
    %379 = llvm.extractvalue %377[1] : !llvm.struct<(i32, i32)>  loc(#loc31)
    %380 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc31)
    %381 = llvm.insertvalue %378, %380[0] : !llvm.struct<(i32, i32)>  loc(#loc31)
    %382 = llvm.insertvalue %379, %381[1] : !llvm.struct<(i32, i32)>  loc(#loc31)
    %383 = llvm.extractvalue %382[0] : !llvm.struct<(i32, i32)>  loc(#loc31)
    %384 = llvm.extractvalue %382[1] : !llvm.struct<(i32, i32)>  loc(#loc31)
    %385 = llvm.extractvalue %226[0] : !llvm.struct<(i32, i32)>  loc(#loc31)
    %386 = llvm.extractvalue %226[1] : !llvm.struct<(i32, i32)>  loc(#loc31)
    %387 = llvm.add %383, %385 : i32 loc(#loc31)
    %388 = llvm.add %384, %386 : i32 loc(#loc31)
    %389 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc31)
    %390 = llvm.insertvalue %387, %389[0] : !llvm.struct<(i32, i32)>  loc(#loc31)
    %391 = llvm.insertvalue %388, %390[1] : !llvm.struct<(i32, i32)>  loc(#loc31)
    %392 = llvm.extractvalue %391[0] : !llvm.struct<(i32, i32)>  loc(#loc32)
    %393 = llvm.extractvalue %391[1] : !llvm.struct<(i32, i32)>  loc(#loc32)
    %394 = llvm.extractvalue %239[0] : !llvm.struct<(i32, i32)>  loc(#loc32)
    %395 = llvm.extractvalue %239[1] : !llvm.struct<(i32, i32)>  loc(#loc32)
    %396 = llvm.add %392, %394 : i32 loc(#loc32)
    %397 = llvm.add %393, %395 : i32 loc(#loc32)
    %398 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc32)
    %399 = llvm.insertvalue %396, %398[0] : !llvm.struct<(i32, i32)>  loc(#loc32)
    %400 = llvm.insertvalue %397, %399[1] : !llvm.struct<(i32, i32)>  loc(#loc32)
    %401 = llvm.extractvalue %252[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc33)
    %402 = llvm.extractvalue %252[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc33)
    %403 = llvm.extractvalue %400[0] : !llvm.struct<(i32, i32)>  loc(#loc33)
    %404 = llvm.extractvalue %400[1] : !llvm.struct<(i32, i32)>  loc(#loc33)
    %405 = llvm.getelementptr %401[%403] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc33)
    %406 = llvm.getelementptr %402[%404] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc33)
    %407 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>)> loc(#loc33)
    %408 = llvm.insertvalue %405, %407[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc33)
    %409 = llvm.insertvalue %406, %408[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc33)
    %410 = llvm.extractvalue %409[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc34)
    %411 = llvm.extractvalue %409[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc34)
    %412 = llvm.mlir.constant(true) : i1 loc(#loc34)
    %413 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %410, %412 : (!llvm.ptr<1>, i1) -> i16 loc(#loc34)
    %414 = llvm.bitcast %413 : i16 to vector<1xf16> loc(#loc34)
    %415 = llvm.mlir.constant(0 : index) : i32 loc(#loc34)
    %416 = llvm.extractelement %414[%415 : i32] : vector<1xf16> loc(#loc34)
    %417 = llvm.mlir.constant(true) : i1 loc(#loc34)
    %418 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %411, %417 : (!llvm.ptr<1>, i1) -> i16 loc(#loc34)
    %419 = llvm.bitcast %418 : i16 to vector<1xf16> loc(#loc34)
    %420 = llvm.mlir.constant(0 : index) : i32 loc(#loc34)
    %421 = llvm.extractelement %419[%420 : i32] : vector<1xf16> loc(#loc34)
    %422 = llvm.mlir.undef : !llvm.struct<(f16, f16)> loc(#loc34)
    %423 = llvm.insertvalue %416, %422[0] : !llvm.struct<(f16, f16)>  loc(#loc34)
    %424 = llvm.insertvalue %421, %423[1] : !llvm.struct<(f16, f16)>  loc(#loc34)
    %425 = llvm.extractvalue %359[0] : !llvm.struct<(f16, f16)>  loc(#loc35)
    %426 = llvm.extractvalue %359[1] : !llvm.struct<(f16, f16)>  loc(#loc35)
    %427 = llvm.extractvalue %424[0] : !llvm.struct<(f16, f16)>  loc(#loc35)
    %428 = llvm.extractvalue %424[1] : !llvm.struct<(f16, f16)>  loc(#loc35)
    %429 = llvm.fadd %425, %427  : f16 loc(#loc35)
    %430 = llvm.fadd %426, %428  : f16 loc(#loc35)
    %431 = llvm.mlir.undef : !llvm.struct<(f16, f16)> loc(#loc35)
    %432 = llvm.insertvalue %429, %431[0] : !llvm.struct<(f16, f16)>  loc(#loc35)
    %433 = llvm.insertvalue %430, %432[1] : !llvm.struct<(f16, f16)>  loc(#loc35)
    %434 = llvm.extractvalue %201[0] : !llvm.struct<(i32, i32)>  loc(#loc36)
    %435 = llvm.extractvalue %201[1] : !llvm.struct<(i32, i32)>  loc(#loc36)
    %436 = llvm.extractvalue %34[0] : !llvm.struct<(i32, i32)>  loc(#loc36)
    %437 = llvm.extractvalue %34[1] : !llvm.struct<(i32, i32)>  loc(#loc36)
    %438 = llvm.add %434, %436 : i32 loc(#loc36)
    %439 = llvm.add %435, %437 : i32 loc(#loc36)
    %440 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc36)
    %441 = llvm.insertvalue %438, %440[0] : !llvm.struct<(i32, i32)>  loc(#loc36)
    %442 = llvm.insertvalue %439, %441[1] : !llvm.struct<(i32, i32)>  loc(#loc36)
    %443 = llvm.extractvalue %442[0] : !llvm.struct<(i32, i32)>  loc(#loc37)
    %444 = llvm.extractvalue %442[1] : !llvm.struct<(i32, i32)>  loc(#loc37)
    %445 = llvm.extractvalue %205[0] : !llvm.struct<(i32, i32)>  loc(#loc37)
    %446 = llvm.extractvalue %205[1] : !llvm.struct<(i32, i32)>  loc(#loc37)
    %447 = llvm.mul %443, %445 : i32 loc(#loc37)
    %448 = llvm.mul %444, %446 : i32 loc(#loc37)
    %449 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc37)
    %450 = llvm.insertvalue %447, %449[0] : !llvm.struct<(i32, i32)>  loc(#loc37)
    %451 = llvm.insertvalue %448, %450[1] : !llvm.struct<(i32, i32)>  loc(#loc37)
    %452 = llvm.extractvalue %451[0] : !llvm.struct<(i32, i32)>  loc(#loc38)
    %453 = llvm.extractvalue %451[1] : !llvm.struct<(i32, i32)>  loc(#loc38)
    %454 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc38)
    %455 = llvm.insertvalue %452, %454[0] : !llvm.struct<(i32, i32)>  loc(#loc38)
    %456 = llvm.insertvalue %453, %455[1] : !llvm.struct<(i32, i32)>  loc(#loc38)
    %457 = llvm.extractvalue %456[0] : !llvm.struct<(i32, i32)>  loc(#loc38)
    %458 = llvm.extractvalue %456[1] : !llvm.struct<(i32, i32)>  loc(#loc38)
    %459 = llvm.extractvalue %226[0] : !llvm.struct<(i32, i32)>  loc(#loc38)
    %460 = llvm.extractvalue %226[1] : !llvm.struct<(i32, i32)>  loc(#loc38)
    %461 = llvm.add %457, %459 : i32 loc(#loc38)
    %462 = llvm.add %458, %460 : i32 loc(#loc38)
    %463 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc38)
    %464 = llvm.insertvalue %461, %463[0] : !llvm.struct<(i32, i32)>  loc(#loc38)
    %465 = llvm.insertvalue %462, %464[1] : !llvm.struct<(i32, i32)>  loc(#loc38)
    %466 = llvm.extractvalue %465[0] : !llvm.struct<(i32, i32)>  loc(#loc39)
    %467 = llvm.extractvalue %465[1] : !llvm.struct<(i32, i32)>  loc(#loc39)
    %468 = llvm.extractvalue %239[0] : !llvm.struct<(i32, i32)>  loc(#loc39)
    %469 = llvm.extractvalue %239[1] : !llvm.struct<(i32, i32)>  loc(#loc39)
    %470 = llvm.add %466, %468 : i32 loc(#loc39)
    %471 = llvm.add %467, %469 : i32 loc(#loc39)
    %472 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc39)
    %473 = llvm.insertvalue %470, %472[0] : !llvm.struct<(i32, i32)>  loc(#loc39)
    %474 = llvm.insertvalue %471, %473[1] : !llvm.struct<(i32, i32)>  loc(#loc39)
    %475 = llvm.extractvalue %252[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc40)
    %476 = llvm.extractvalue %252[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc40)
    %477 = llvm.extractvalue %474[0] : !llvm.struct<(i32, i32)>  loc(#loc40)
    %478 = llvm.extractvalue %474[1] : !llvm.struct<(i32, i32)>  loc(#loc40)
    %479 = llvm.getelementptr %475[%477] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc40)
    %480 = llvm.getelementptr %476[%478] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc40)
    %481 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>)> loc(#loc40)
    %482 = llvm.insertvalue %479, %481[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc40)
    %483 = llvm.insertvalue %480, %482[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc40)
    %484 = llvm.extractvalue %483[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc41)
    %485 = llvm.extractvalue %483[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc41)
    %486 = llvm.mlir.constant(true) : i1 loc(#loc41)
    %487 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %484, %486 : (!llvm.ptr<1>, i1) -> i16 loc(#loc41)
    %488 = llvm.bitcast %487 : i16 to vector<1xf16> loc(#loc41)
    %489 = llvm.mlir.constant(0 : index) : i32 loc(#loc41)
    %490 = llvm.extractelement %488[%489 : i32] : vector<1xf16> loc(#loc41)
    %491 = llvm.mlir.constant(true) : i1 loc(#loc41)
    %492 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %485, %491 : (!llvm.ptr<1>, i1) -> i16 loc(#loc41)
    %493 = llvm.bitcast %492 : i16 to vector<1xf16> loc(#loc41)
    %494 = llvm.mlir.constant(0 : index) : i32 loc(#loc41)
    %495 = llvm.extractelement %493[%494 : i32] : vector<1xf16> loc(#loc41)
    %496 = llvm.mlir.undef : !llvm.struct<(f16, f16)> loc(#loc41)
    %497 = llvm.insertvalue %490, %496[0] : !llvm.struct<(f16, f16)>  loc(#loc41)
    %498 = llvm.insertvalue %495, %497[1] : !llvm.struct<(f16, f16)>  loc(#loc41)
    %499 = llvm.extractvalue %433[0] : !llvm.struct<(f16, f16)>  loc(#loc42)
    %500 = llvm.extractvalue %433[1] : !llvm.struct<(f16, f16)>  loc(#loc42)
    %501 = llvm.extractvalue %498[0] : !llvm.struct<(f16, f16)>  loc(#loc42)
    %502 = llvm.extractvalue %498[1] : !llvm.struct<(f16, f16)>  loc(#loc42)
    %503 = llvm.fadd %499, %501  : f16 loc(#loc42)
    %504 = llvm.fadd %500, %502  : f16 loc(#loc42)
    %505 = llvm.mlir.undef : !llvm.struct<(f16, f16)> loc(#loc42)
    %506 = llvm.insertvalue %503, %505[0] : !llvm.struct<(f16, f16)>  loc(#loc42)
    %507 = llvm.insertvalue %504, %506[1] : !llvm.struct<(f16, f16)>  loc(#loc42)
    %508 = llvm.extractvalue %201[0] : !llvm.struct<(i32, i32)>  loc(#loc43)
    %509 = llvm.extractvalue %201[1] : !llvm.struct<(i32, i32)>  loc(#loc43)
    %510 = llvm.extractvalue %29[0] : !llvm.struct<(i32, i32)>  loc(#loc43)
    %511 = llvm.extractvalue %29[1] : !llvm.struct<(i32, i32)>  loc(#loc43)
    %512 = llvm.add %508, %510 : i32 loc(#loc43)
    %513 = llvm.add %509, %511 : i32 loc(#loc43)
    %514 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc43)
    %515 = llvm.insertvalue %512, %514[0] : !llvm.struct<(i32, i32)>  loc(#loc43)
    %516 = llvm.insertvalue %513, %515[1] : !llvm.struct<(i32, i32)>  loc(#loc43)
    %517 = llvm.extractvalue %516[0] : !llvm.struct<(i32, i32)>  loc(#loc44)
    %518 = llvm.extractvalue %516[1] : !llvm.struct<(i32, i32)>  loc(#loc44)
    %519 = llvm.extractvalue %205[0] : !llvm.struct<(i32, i32)>  loc(#loc44)
    %520 = llvm.extractvalue %205[1] : !llvm.struct<(i32, i32)>  loc(#loc44)
    %521 = llvm.mul %517, %519 : i32 loc(#loc44)
    %522 = llvm.mul %518, %520 : i32 loc(#loc44)
    %523 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc44)
    %524 = llvm.insertvalue %521, %523[0] : !llvm.struct<(i32, i32)>  loc(#loc44)
    %525 = llvm.insertvalue %522, %524[1] : !llvm.struct<(i32, i32)>  loc(#loc44)
    %526 = llvm.extractvalue %525[0] : !llvm.struct<(i32, i32)>  loc(#loc45)
    %527 = llvm.extractvalue %525[1] : !llvm.struct<(i32, i32)>  loc(#loc45)
    %528 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc45)
    %529 = llvm.insertvalue %526, %528[0] : !llvm.struct<(i32, i32)>  loc(#loc45)
    %530 = llvm.insertvalue %527, %529[1] : !llvm.struct<(i32, i32)>  loc(#loc45)
    %531 = llvm.extractvalue %530[0] : !llvm.struct<(i32, i32)>  loc(#loc45)
    %532 = llvm.extractvalue %530[1] : !llvm.struct<(i32, i32)>  loc(#loc45)
    %533 = llvm.extractvalue %226[0] : !llvm.struct<(i32, i32)>  loc(#loc45)
    %534 = llvm.extractvalue %226[1] : !llvm.struct<(i32, i32)>  loc(#loc45)
    %535 = llvm.add %531, %533 : i32 loc(#loc45)
    %536 = llvm.add %532, %534 : i32 loc(#loc45)
    %537 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc45)
    %538 = llvm.insertvalue %535, %537[0] : !llvm.struct<(i32, i32)>  loc(#loc45)
    %539 = llvm.insertvalue %536, %538[1] : !llvm.struct<(i32, i32)>  loc(#loc45)
    %540 = llvm.extractvalue %539[0] : !llvm.struct<(i32, i32)>  loc(#loc46)
    %541 = llvm.extractvalue %539[1] : !llvm.struct<(i32, i32)>  loc(#loc46)
    %542 = llvm.extractvalue %239[0] : !llvm.struct<(i32, i32)>  loc(#loc46)
    %543 = llvm.extractvalue %239[1] : !llvm.struct<(i32, i32)>  loc(#loc46)
    %544 = llvm.add %540, %542 : i32 loc(#loc46)
    %545 = llvm.add %541, %543 : i32 loc(#loc46)
    %546 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc46)
    %547 = llvm.insertvalue %544, %546[0] : !llvm.struct<(i32, i32)>  loc(#loc46)
    %548 = llvm.insertvalue %545, %547[1] : !llvm.struct<(i32, i32)>  loc(#loc46)
    %549 = llvm.extractvalue %252[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc47)
    %550 = llvm.extractvalue %252[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc47)
    %551 = llvm.extractvalue %548[0] : !llvm.struct<(i32, i32)>  loc(#loc47)
    %552 = llvm.extractvalue %548[1] : !llvm.struct<(i32, i32)>  loc(#loc47)
    %553 = llvm.getelementptr %549[%551] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc47)
    %554 = llvm.getelementptr %550[%552] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc47)
    %555 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>)> loc(#loc47)
    %556 = llvm.insertvalue %553, %555[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc47)
    %557 = llvm.insertvalue %554, %556[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc47)
    %558 = llvm.extractvalue %557[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc48)
    %559 = llvm.extractvalue %557[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc48)
    %560 = llvm.mlir.constant(true) : i1 loc(#loc48)
    %561 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %558, %560 : (!llvm.ptr<1>, i1) -> i16 loc(#loc48)
    %562 = llvm.bitcast %561 : i16 to vector<1xf16> loc(#loc48)
    %563 = llvm.mlir.constant(0 : index) : i32 loc(#loc48)
    %564 = llvm.extractelement %562[%563 : i32] : vector<1xf16> loc(#loc48)
    %565 = llvm.mlir.constant(true) : i1 loc(#loc48)
    %566 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %559, %565 : (!llvm.ptr<1>, i1) -> i16 loc(#loc48)
    %567 = llvm.bitcast %566 : i16 to vector<1xf16> loc(#loc48)
    %568 = llvm.mlir.constant(0 : index) : i32 loc(#loc48)
    %569 = llvm.extractelement %567[%568 : i32] : vector<1xf16> loc(#loc48)
    %570 = llvm.mlir.undef : !llvm.struct<(f16, f16)> loc(#loc48)
    %571 = llvm.insertvalue %564, %570[0] : !llvm.struct<(f16, f16)>  loc(#loc48)
    %572 = llvm.insertvalue %569, %571[1] : !llvm.struct<(f16, f16)>  loc(#loc48)
    %573 = llvm.extractvalue %507[0] : !llvm.struct<(f16, f16)>  loc(#loc49)
    %574 = llvm.extractvalue %507[1] : !llvm.struct<(f16, f16)>  loc(#loc49)
    %575 = llvm.extractvalue %572[0] : !llvm.struct<(f16, f16)>  loc(#loc49)
    %576 = llvm.extractvalue %572[1] : !llvm.struct<(f16, f16)>  loc(#loc49)
    %577 = llvm.fadd %573, %575  : f16 loc(#loc49)
    %578 = llvm.fadd %574, %576  : f16 loc(#loc49)
    %579 = llvm.mlir.undef : !llvm.struct<(f16, f16)> loc(#loc49)
    %580 = llvm.insertvalue %577, %579[0] : !llvm.struct<(f16, f16)>  loc(#loc49)
    %581 = llvm.insertvalue %578, %580[1] : !llvm.struct<(f16, f16)>  loc(#loc49)
    %582 = llvm.bitcast %arg4 : i32 to i32 loc(#loc50)
    %583 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc50)
    %584 = llvm.insertvalue %582, %583[0] : !llvm.struct<(i32, i32)>  loc(#loc50)
    %585 = llvm.insertvalue %582, %584[1] : !llvm.struct<(i32, i32)>  loc(#loc50)
    %586 = llvm.extractvalue %201[0] : !llvm.struct<(i32, i32)>  loc(#loc50)
    %587 = llvm.extractvalue %201[1] : !llvm.struct<(i32, i32)>  loc(#loc50)
    %588 = llvm.extractvalue %585[0] : !llvm.struct<(i32, i32)>  loc(#loc50)
    %589 = llvm.extractvalue %585[1] : !llvm.struct<(i32, i32)>  loc(#loc50)
    %590 = llvm.add %586, %588 : i32 loc(#loc50)
    %591 = llvm.add %587, %589 : i32 loc(#loc50)
    %592 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc50)
    %593 = llvm.insertvalue %590, %592[0] : !llvm.struct<(i32, i32)>  loc(#loc50)
    %594 = llvm.insertvalue %591, %593[1] : !llvm.struct<(i32, i32)>  loc(#loc50)
    %595 = llvm.extractvalue %594[0] : !llvm.struct<(i32, i32)>  loc(#loc51)
    %596 = llvm.extractvalue %594[1] : !llvm.struct<(i32, i32)>  loc(#loc51)
    %597 = llvm.extractvalue %205[0] : !llvm.struct<(i32, i32)>  loc(#loc51)
    %598 = llvm.extractvalue %205[1] : !llvm.struct<(i32, i32)>  loc(#loc51)
    %599 = llvm.mul %595, %597 : i32 loc(#loc51)
    %600 = llvm.mul %596, %598 : i32 loc(#loc51)
    %601 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc51)
    %602 = llvm.insertvalue %599, %601[0] : !llvm.struct<(i32, i32)>  loc(#loc51)
    %603 = llvm.insertvalue %600, %602[1] : !llvm.struct<(i32, i32)>  loc(#loc51)
    %604 = llvm.extractvalue %603[0] : !llvm.struct<(i32, i32)>  loc(#loc52)
    %605 = llvm.extractvalue %603[1] : !llvm.struct<(i32, i32)>  loc(#loc52)
    %606 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc52)
    %607 = llvm.insertvalue %604, %606[0] : !llvm.struct<(i32, i32)>  loc(#loc52)
    %608 = llvm.insertvalue %605, %607[1] : !llvm.struct<(i32, i32)>  loc(#loc52)
    %609 = llvm.extractvalue %608[0] : !llvm.struct<(i32, i32)>  loc(#loc52)
    %610 = llvm.extractvalue %608[1] : !llvm.struct<(i32, i32)>  loc(#loc52)
    %611 = llvm.extractvalue %226[0] : !llvm.struct<(i32, i32)>  loc(#loc52)
    %612 = llvm.extractvalue %226[1] : !llvm.struct<(i32, i32)>  loc(#loc52)
    %613 = llvm.add %609, %611 : i32 loc(#loc52)
    %614 = llvm.add %610, %612 : i32 loc(#loc52)
    %615 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc52)
    %616 = llvm.insertvalue %613, %615[0] : !llvm.struct<(i32, i32)>  loc(#loc52)
    %617 = llvm.insertvalue %614, %616[1] : !llvm.struct<(i32, i32)>  loc(#loc52)
    %618 = llvm.extractvalue %252[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc53)
    %619 = llvm.extractvalue %252[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc53)
    %620 = llvm.extractvalue %617[0] : !llvm.struct<(i32, i32)>  loc(#loc53)
    %621 = llvm.extractvalue %617[1] : !llvm.struct<(i32, i32)>  loc(#loc53)
    %622 = llvm.getelementptr %618[%620] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc53)
    %623 = llvm.getelementptr %619[%621] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc53)
    %624 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>)> loc(#loc53)
    %625 = llvm.insertvalue %622, %624[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc53)
    %626 = llvm.insertvalue %623, %625[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc53)
    %627 = llvm.extractvalue %626[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc54)
    %628 = llvm.extractvalue %626[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc54)
    %629 = llvm.mlir.constant(true) : i1 loc(#loc54)
    %630 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %627, %629 : (!llvm.ptr<1>, i1) -> i16 loc(#loc54)
    %631 = llvm.bitcast %630 : i16 to vector<1xf16> loc(#loc54)
    %632 = llvm.mlir.constant(0 : index) : i32 loc(#loc54)
    %633 = llvm.extractelement %631[%632 : i32] : vector<1xf16> loc(#loc54)
    %634 = llvm.mlir.constant(true) : i1 loc(#loc54)
    %635 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %628, %634 : (!llvm.ptr<1>, i1) -> i16 loc(#loc54)
    %636 = llvm.bitcast %635 : i16 to vector<1xf16> loc(#loc54)
    %637 = llvm.mlir.constant(0 : index) : i32 loc(#loc54)
    %638 = llvm.extractelement %636[%637 : i32] : vector<1xf16> loc(#loc54)
    %639 = llvm.mlir.undef : !llvm.struct<(f16, f16)> loc(#loc54)
    %640 = llvm.insertvalue %633, %639[0] : !llvm.struct<(f16, f16)>  loc(#loc54)
    %641 = llvm.insertvalue %638, %640[1] : !llvm.struct<(f16, f16)>  loc(#loc54)
    %642 = llvm.extractvalue %581[0] : !llvm.struct<(f16, f16)>  loc(#loc55)
    %643 = llvm.extractvalue %581[1] : !llvm.struct<(f16, f16)>  loc(#loc55)
    %644 = llvm.extractvalue %641[0] : !llvm.struct<(f16, f16)>  loc(#loc55)
    %645 = llvm.extractvalue %641[1] : !llvm.struct<(f16, f16)>  loc(#loc55)
    %646 = llvm.fadd %642, %644  : f16 loc(#loc55)
    %647 = llvm.fadd %643, %645  : f16 loc(#loc55)
    %648 = llvm.mlir.undef : !llvm.struct<(f16, f16)> loc(#loc55)
    %649 = llvm.insertvalue %646, %648[0] : !llvm.struct<(f16, f16)>  loc(#loc55)
    %650 = llvm.insertvalue %647, %649[1] : !llvm.struct<(f16, f16)>  loc(#loc55)
    %651 = llvm.extractvalue %617[0] : !llvm.struct<(i32, i32)>  loc(#loc56)
    %652 = llvm.extractvalue %617[1] : !llvm.struct<(i32, i32)>  loc(#loc56)
    %653 = llvm.extractvalue %24[0] : !llvm.struct<(i32, i32)>  loc(#loc56)
    %654 = llvm.extractvalue %24[1] : !llvm.struct<(i32, i32)>  loc(#loc56)
    %655 = llvm.add %651, %653 : i32 loc(#loc56)
    %656 = llvm.add %652, %654 : i32 loc(#loc56)
    %657 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc56)
    %658 = llvm.insertvalue %655, %657[0] : !llvm.struct<(i32, i32)>  loc(#loc56)
    %659 = llvm.insertvalue %656, %658[1] : !llvm.struct<(i32, i32)>  loc(#loc56)
    %660 = llvm.extractvalue %252[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc57)
    %661 = llvm.extractvalue %252[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc57)
    %662 = llvm.extractvalue %659[0] : !llvm.struct<(i32, i32)>  loc(#loc57)
    %663 = llvm.extractvalue %659[1] : !llvm.struct<(i32, i32)>  loc(#loc57)
    %664 = llvm.getelementptr %660[%662] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc57)
    %665 = llvm.getelementptr %661[%663] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc57)
    %666 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>)> loc(#loc57)
    %667 = llvm.insertvalue %664, %666[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc57)
    %668 = llvm.insertvalue %665, %667[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc57)
    %669 = llvm.extractvalue %668[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc58)
    %670 = llvm.extractvalue %668[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc58)
    %671 = llvm.mlir.constant(true) : i1 loc(#loc58)
    %672 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %669, %671 : (!llvm.ptr<1>, i1) -> i16 loc(#loc58)
    %673 = llvm.bitcast %672 : i16 to vector<1xf16> loc(#loc58)
    %674 = llvm.mlir.constant(0 : index) : i32 loc(#loc58)
    %675 = llvm.extractelement %673[%674 : i32] : vector<1xf16> loc(#loc58)
    %676 = llvm.mlir.constant(true) : i1 loc(#loc58)
    %677 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %670, %676 : (!llvm.ptr<1>, i1) -> i16 loc(#loc58)
    %678 = llvm.bitcast %677 : i16 to vector<1xf16> loc(#loc58)
    %679 = llvm.mlir.constant(0 : index) : i32 loc(#loc58)
    %680 = llvm.extractelement %678[%679 : i32] : vector<1xf16> loc(#loc58)
    %681 = llvm.mlir.undef : !llvm.struct<(f16, f16)> loc(#loc58)
    %682 = llvm.insertvalue %675, %681[0] : !llvm.struct<(f16, f16)>  loc(#loc58)
    %683 = llvm.insertvalue %680, %682[1] : !llvm.struct<(f16, f16)>  loc(#loc58)
    %684 = llvm.extractvalue %650[0] : !llvm.struct<(f16, f16)>  loc(#loc59)
    %685 = llvm.extractvalue %650[1] : !llvm.struct<(f16, f16)>  loc(#loc59)
    %686 = llvm.extractvalue %683[0] : !llvm.struct<(f16, f16)>  loc(#loc59)
    %687 = llvm.extractvalue %683[1] : !llvm.struct<(f16, f16)>  loc(#loc59)
    %688 = llvm.fadd %684, %686  : f16 loc(#loc59)
    %689 = llvm.fadd %685, %687  : f16 loc(#loc59)
    %690 = llvm.mlir.undef : !llvm.struct<(f16, f16)> loc(#loc59)
    %691 = llvm.insertvalue %688, %690[0] : !llvm.struct<(f16, f16)>  loc(#loc59)
    %692 = llvm.insertvalue %689, %691[1] : !llvm.struct<(f16, f16)>  loc(#loc59)
    %693 = llvm.extractvalue %617[0] : !llvm.struct<(i32, i32)>  loc(#loc60)
    %694 = llvm.extractvalue %617[1] : !llvm.struct<(i32, i32)>  loc(#loc60)
    %695 = llvm.extractvalue %19[0] : !llvm.struct<(i32, i32)>  loc(#loc60)
    %696 = llvm.extractvalue %19[1] : !llvm.struct<(i32, i32)>  loc(#loc60)
    %697 = llvm.add %693, %695 : i32 loc(#loc60)
    %698 = llvm.add %694, %696 : i32 loc(#loc60)
    %699 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc60)
    %700 = llvm.insertvalue %697, %699[0] : !llvm.struct<(i32, i32)>  loc(#loc60)
    %701 = llvm.insertvalue %698, %700[1] : !llvm.struct<(i32, i32)>  loc(#loc60)
    %702 = llvm.extractvalue %252[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc61)
    %703 = llvm.extractvalue %252[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc61)
    %704 = llvm.extractvalue %701[0] : !llvm.struct<(i32, i32)>  loc(#loc61)
    %705 = llvm.extractvalue %701[1] : !llvm.struct<(i32, i32)>  loc(#loc61)
    %706 = llvm.getelementptr %702[%704] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc61)
    %707 = llvm.getelementptr %703[%705] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc61)
    %708 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>)> loc(#loc61)
    %709 = llvm.insertvalue %706, %708[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc61)
    %710 = llvm.insertvalue %707, %709[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc61)
    %711 = llvm.extractvalue %710[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc62)
    %712 = llvm.extractvalue %710[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc62)
    %713 = llvm.mlir.constant(true) : i1 loc(#loc62)
    %714 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %711, %713 : (!llvm.ptr<1>, i1) -> i16 loc(#loc62)
    %715 = llvm.bitcast %714 : i16 to vector<1xf16> loc(#loc62)
    %716 = llvm.mlir.constant(0 : index) : i32 loc(#loc62)
    %717 = llvm.extractelement %715[%716 : i32] : vector<1xf16> loc(#loc62)
    %718 = llvm.mlir.constant(true) : i1 loc(#loc62)
    %719 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %712, %718 : (!llvm.ptr<1>, i1) -> i16 loc(#loc62)
    %720 = llvm.bitcast %719 : i16 to vector<1xf16> loc(#loc62)
    %721 = llvm.mlir.constant(0 : index) : i32 loc(#loc62)
    %722 = llvm.extractelement %720[%721 : i32] : vector<1xf16> loc(#loc62)
    %723 = llvm.mlir.undef : !llvm.struct<(f16, f16)> loc(#loc62)
    %724 = llvm.insertvalue %717, %723[0] : !llvm.struct<(f16, f16)>  loc(#loc62)
    %725 = llvm.insertvalue %722, %724[1] : !llvm.struct<(f16, f16)>  loc(#loc62)
    %726 = llvm.extractvalue %692[0] : !llvm.struct<(f16, f16)>  loc(#loc63)
    %727 = llvm.extractvalue %692[1] : !llvm.struct<(f16, f16)>  loc(#loc63)
    %728 = llvm.extractvalue %725[0] : !llvm.struct<(f16, f16)>  loc(#loc63)
    %729 = llvm.extractvalue %725[1] : !llvm.struct<(f16, f16)>  loc(#loc63)
    %730 = llvm.fadd %726, %728  : f16 loc(#loc63)
    %731 = llvm.fadd %727, %729  : f16 loc(#loc63)
    %732 = llvm.mlir.undef : !llvm.struct<(f16, f16)> loc(#loc63)
    %733 = llvm.insertvalue %730, %732[0] : !llvm.struct<(f16, f16)>  loc(#loc63)
    %734 = llvm.insertvalue %731, %733[1] : !llvm.struct<(f16, f16)>  loc(#loc63)
    %735 = llvm.extractvalue %617[0] : !llvm.struct<(i32, i32)>  loc(#loc64)
    %736 = llvm.extractvalue %617[1] : !llvm.struct<(i32, i32)>  loc(#loc64)
    %737 = llvm.extractvalue %14[0] : !llvm.struct<(i32, i32)>  loc(#loc64)
    %738 = llvm.extractvalue %14[1] : !llvm.struct<(i32, i32)>  loc(#loc64)
    %739 = llvm.add %735, %737 : i32 loc(#loc64)
    %740 = llvm.add %736, %738 : i32 loc(#loc64)
    %741 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc64)
    %742 = llvm.insertvalue %739, %741[0] : !llvm.struct<(i32, i32)>  loc(#loc64)
    %743 = llvm.insertvalue %740, %742[1] : !llvm.struct<(i32, i32)>  loc(#loc64)
    %744 = llvm.extractvalue %252[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc65)
    %745 = llvm.extractvalue %252[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc65)
    %746 = llvm.extractvalue %743[0] : !llvm.struct<(i32, i32)>  loc(#loc65)
    %747 = llvm.extractvalue %743[1] : !llvm.struct<(i32, i32)>  loc(#loc65)
    %748 = llvm.getelementptr %744[%746] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc65)
    %749 = llvm.getelementptr %745[%747] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc65)
    %750 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>)> loc(#loc65)
    %751 = llvm.insertvalue %748, %750[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc65)
    %752 = llvm.insertvalue %749, %751[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc65)
    %753 = llvm.extractvalue %752[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc66)
    %754 = llvm.extractvalue %752[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc66)
    %755 = llvm.mlir.constant(true) : i1 loc(#loc66)
    %756 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %753, %755 : (!llvm.ptr<1>, i1) -> i16 loc(#loc66)
    %757 = llvm.bitcast %756 : i16 to vector<1xf16> loc(#loc66)
    %758 = llvm.mlir.constant(0 : index) : i32 loc(#loc66)
    %759 = llvm.extractelement %757[%758 : i32] : vector<1xf16> loc(#loc66)
    %760 = llvm.mlir.constant(true) : i1 loc(#loc66)
    %761 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %754, %760 : (!llvm.ptr<1>, i1) -> i16 loc(#loc66)
    %762 = llvm.bitcast %761 : i16 to vector<1xf16> loc(#loc66)
    %763 = llvm.mlir.constant(0 : index) : i32 loc(#loc66)
    %764 = llvm.extractelement %762[%763 : i32] : vector<1xf16> loc(#loc66)
    %765 = llvm.mlir.undef : !llvm.struct<(f16, f16)> loc(#loc66)
    %766 = llvm.insertvalue %759, %765[0] : !llvm.struct<(f16, f16)>  loc(#loc66)
    %767 = llvm.insertvalue %764, %766[1] : !llvm.struct<(f16, f16)>  loc(#loc66)
    %768 = llvm.extractvalue %734[0] : !llvm.struct<(f16, f16)>  loc(#loc67)
    %769 = llvm.extractvalue %734[1] : !llvm.struct<(f16, f16)>  loc(#loc67)
    %770 = llvm.extractvalue %767[0] : !llvm.struct<(f16, f16)>  loc(#loc67)
    %771 = llvm.extractvalue %767[1] : !llvm.struct<(f16, f16)>  loc(#loc67)
    %772 = llvm.fadd %768, %770  : f16 loc(#loc67)
    %773 = llvm.fadd %769, %771  : f16 loc(#loc67)
    %774 = llvm.mlir.undef : !llvm.struct<(f16, f16)> loc(#loc67)
    %775 = llvm.insertvalue %772, %774[0] : !llvm.struct<(f16, f16)>  loc(#loc67)
    %776 = llvm.insertvalue %773, %775[1] : !llvm.struct<(f16, f16)>  loc(#loc67)
    %777 = llvm.extractvalue %617[0] : !llvm.struct<(i32, i32)>  loc(#loc68)
    %778 = llvm.extractvalue %617[1] : !llvm.struct<(i32, i32)>  loc(#loc68)
    %779 = llvm.extractvalue %239[0] : !llvm.struct<(i32, i32)>  loc(#loc68)
    %780 = llvm.extractvalue %239[1] : !llvm.struct<(i32, i32)>  loc(#loc68)
    %781 = llvm.add %777, %779 : i32 loc(#loc68)
    %782 = llvm.add %778, %780 : i32 loc(#loc68)
    %783 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc68)
    %784 = llvm.insertvalue %781, %783[0] : !llvm.struct<(i32, i32)>  loc(#loc68)
    %785 = llvm.insertvalue %782, %784[1] : !llvm.struct<(i32, i32)>  loc(#loc68)
    %786 = llvm.bitcast %arg1 : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc69)
    %787 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>)> loc(#loc69)
    %788 = llvm.insertvalue %786, %787[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc69)
    %789 = llvm.insertvalue %786, %788[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc69)
    %790 = llvm.extractvalue %789[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc69)
    %791 = llvm.extractvalue %789[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc69)
    %792 = llvm.extractvalue %785[0] : !llvm.struct<(i32, i32)>  loc(#loc69)
    %793 = llvm.extractvalue %785[1] : !llvm.struct<(i32, i32)>  loc(#loc69)
    %794 = llvm.getelementptr %790[%792] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc69)
    %795 = llvm.getelementptr %791[%793] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc69)
    %796 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>)> loc(#loc69)
    %797 = llvm.insertvalue %794, %796[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc69)
    %798 = llvm.insertvalue %795, %797[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc69)
    %799 = llvm.extractvalue %798[0] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc70)
    %800 = llvm.extractvalue %798[1] : !llvm.struct<(ptr<1>, ptr<1>)>  loc(#loc70)
    %801 = llvm.extractvalue %776[0] : !llvm.struct<(f16, f16)>  loc(#loc70)
    %802 = llvm.extractvalue %776[1] : !llvm.struct<(f16, f16)>  loc(#loc70)
    %803 = llvm.mlir.constant(true) : i1 loc(#loc70)
    %804 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc70)
    %805 = llvm.mlir.constant(0 : i32) : i32 loc(#loc70)
    %806 = nvgpu.cluster_id loc(#loc70)
    %807 = llvm.mlir.constant(32 : i32) : i32 loc(#loc70)
    %808 = llvm.urem %804, %807  : i32 loc(#loc70)
    %809 = llvm.udiv %804, %807  : i32 loc(#loc70)
    %810 = llvm.mlir.constant(1 : i32) : i32 loc(#loc70)
    %811 = llvm.urem %809, %810  : i32 loc(#loc70)
    %812 = llvm.udiv %809, %810  : i32 loc(#loc70)
    %813 = llvm.mlir.constant(4 : i32) : i32 loc(#loc70)
    %814 = llvm.urem %812, %813  : i32 loc(#loc70)
    %815 = llvm.udiv %812, %813  : i32 loc(#loc70)
    %816 = llvm.mlir.constant(16 : i32) : i32 loc(#loc70)
    %817 = llvm.urem %808, %816  : i32 loc(#loc70)
    %818 = llvm.udiv %808, %816  : i32 loc(#loc70)
    %819 = llvm.mlir.constant(2 : i32) : i32 loc(#loc70)
    %820 = llvm.urem %818, %819  : i32 loc(#loc70)
    %821 = llvm.udiv %818, %819  : i32 loc(#loc70)
    %822 = llvm.mlir.undef : vector<1xf16> loc(#loc70)
    %823 = llvm.bitcast %801 : f16 to f16 loc(#loc70)
    %824 = llvm.mlir.constant(0 : i32) : i32 loc(#loc70)
    %825 = llvm.insertelement %823, %822[%824 : i32] : vector<1xf16> loc(#loc70)
    %826 = llvm.bitcast %825 : vector<1xf16> to i16 loc(#loc70)
    %827 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b" %826, %799, %803 : (i16, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc70)
    %828 = llvm.mlir.undef : vector<1xf16> loc(#loc70)
    %829 = llvm.bitcast %802 : f16 to f16 loc(#loc70)
    %830 = llvm.mlir.constant(0 : i32) : i32 loc(#loc70)
    %831 = llvm.insertelement %829, %828[%830 : i32] : vector<1xf16> loc(#loc70)
    %832 = llvm.bitcast %831 : vector<1xf16> to i16 loc(#loc70)
    %833 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b" %832, %800, %803 : (i16, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc70)
    llvm.return loc(#loc71)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:19)
#loc16 = loc("2d9pt_naive.py":50:36)
#loc17 = loc("2d9pt_naive.py":50:40)
#loc18 = loc("2d9pt_naive.py":50:56)
#loc19 = loc("2d9pt_naive.py":50:18)
#loc20 = loc("2d9pt_naive.py":51:21)
#loc21 = loc("2d9pt_naive.py":52:22)
#loc22 = loc("2d9pt_naive.py":54:37)
#loc23 = loc("2d9pt_naive.py":54:40)
#loc24 = loc("2d9pt_naive.py":54:44)
#loc25 = loc("2d9pt_naive.py":54:60)
#loc26 = loc("2d9pt_naive.py":54:18)
#loc27 = loc("2d9pt_naive.py":55:21)
#loc28 = loc("2d9pt_naive.py":56:22)
#loc29 = loc("2d9pt_naive.py":58:37)
#loc30 = loc("2d9pt_naive.py":58:40)
#loc31 = loc("2d9pt_naive.py":58:44)
#loc32 = loc("2d9pt_naive.py":58:60)
#loc33 = loc("2d9pt_naive.py":58:18)
#loc34 = loc("2d9pt_naive.py":59:21)
#loc35 = loc("2d9pt_naive.py":60:22)
#loc36 = loc("2d9pt_naive.py":62:37)
#loc37 = loc("2d9pt_naive.py":62:40)
#loc38 = loc("2d9pt_naive.py":62:44)
#loc39 = loc("2d9pt_naive.py":62:60)
#loc40 = loc("2d9pt_naive.py":62:18)
#loc41 = loc("2d9pt_naive.py":63:21)
#loc42 = loc("2d9pt_naive.py":64:22)
#loc43 = loc("2d9pt_naive.py":66:37)
#loc44 = loc("2d9pt_naive.py":66:40)
#loc45 = loc("2d9pt_naive.py":66:44)
#loc46 = loc("2d9pt_naive.py":66:60)
#loc47 = loc("2d9pt_naive.py":66:18)
#loc48 = loc("2d9pt_naive.py":67:21)
#loc49 = loc("2d9pt_naive.py":68:22)
#loc50 = loc("2d9pt_naive.py":71:37)
#loc51 = loc("2d9pt_naive.py":71:40)
#loc52 = loc("2d9pt_naive.py":71:44)
#loc53 = loc("2d9pt_naive.py":71:18)
#loc54 = loc("2d9pt_naive.py":72:21)
#loc55 = loc("2d9pt_naive.py":73:22)
#loc56 = loc("2d9pt_naive.py":75:62)
#loc57 = loc("2d9pt_naive.py":75:18)
#loc58 = loc("2d9pt_naive.py":76:21)
#loc59 = loc("2d9pt_naive.py":77:22)
#loc60 = loc("2d9pt_naive.py":79:62)
#loc61 = loc("2d9pt_naive.py":79:18)
#loc62 = loc("2d9pt_naive.py":80:21)
#loc63 = loc("2d9pt_naive.py":81:22)
#loc64 = loc("2d9pt_naive.py":83:62)
#loc65 = loc("2d9pt_naive.py":83:18)
#loc66 = loc("2d9pt_naive.py":84:21)
#loc67 = loc("2d9pt_naive.py":85:22)
#loc68 = loc("2d9pt_naive.py":87:60)
#loc69 = loc("2d9pt_naive.py":87:18)
#loc70 = loc("2d9pt_naive.py":88:21)
#loc71 = loc("2d9pt_naive.py":88:4)
#loc72 = loc(callsite(#loc5 at #loc6))
#loc73 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before ArithToLLVMConversionPass (convert-arith-to-llvm) ('builtin.module' operation) //----- //
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.shared = 0 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @stencil_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.maxntid = array<i32: 128>} {
    %0 = llvm.mlir.constant(true) : i1 loc(#loc1)
    %1 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(15 : i32) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(0.000000e+00 : f16) : f16 loc(#loc1)
    %10 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %11 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %12 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc2)
    %13 = llvm.mul %arg4, %11 : i32 loc(#loc3)
    %14 = llvm.sub %arg2, %13 : i32 loc(#loc4)
    %15 = llvm.add %14, %8 : i32 loc(#loc71)
    %16 = llvm.sdiv %15, %10  : i32 loc(#loc72)
    %17 = llvm.sdiv %12, %16  : i32 loc(#loc8)
    %18 = llvm.srem %12, %16  : i32 loc(#loc9)
    %19 = llvm.mul %17, %10 : i32 loc(#loc10)
    %20 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc11)
    %21 = llvm.urem %20, %3  : i32 loc(#loc11)
    %22 = llvm.udiv %20, %3  : i32 loc(#loc11)
    %23 = llvm.and %21, %10  : i32 loc(#loc11)
    %24 = llvm.icmp "eq" %23, %2 : i32 loc(#loc11)
    %25 = llvm.select %24, %2, %5 : i1, i32 loc(#loc11)
    %26 = llvm.xor %2, %25  : i32 loc(#loc11)
    %27 = llvm.and %22, %5  : i32 loc(#loc11)
    %28 = llvm.icmp "eq" %27, %2 : i32 loc(#loc11)
    %29 = llvm.select %28, %2, %11 : i1, i32 loc(#loc11)
    %30 = llvm.xor %26, %29  : i32 loc(#loc11)
    %31 = llvm.and %22, %11  : i32 loc(#loc11)
    %32 = llvm.icmp "eq" %31, %2 : i32 loc(#loc11)
    %33 = llvm.select %32, %2, %7 : i1, i32 loc(#loc11)
    %34 = llvm.xor %30, %33  : i32 loc(#loc11)
    %35 = llvm.and %21, %10  : i32 loc(#loc11)
    %36 = llvm.icmp "eq" %35, %2 : i32 loc(#loc11)
    %37 = llvm.select %36, %2, %5 : i1, i32 loc(#loc11)
    %38 = llvm.xor %1, %37  : i32 loc(#loc11)
    %39 = llvm.and %22, %5  : i32 loc(#loc11)
    %40 = llvm.icmp "eq" %39, %2 : i32 loc(#loc11)
    %41 = llvm.select %40, %2, %11 : i1, i32 loc(#loc11)
    %42 = llvm.xor %38, %41  : i32 loc(#loc11)
    %43 = llvm.and %22, %11  : i32 loc(#loc11)
    %44 = llvm.icmp "eq" %43, %2 : i32 loc(#loc11)
    %45 = llvm.select %44, %2, %7 : i1, i32 loc(#loc11)
    %46 = llvm.xor %42, %45  : i32 loc(#loc11)
    %47 = llvm.add %34, %4 : i32 loc(#loc11)
    %48 = llvm.add %46, %4 : i32 loc(#loc11)
    %49 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc11)
    %50 = llvm.urem %49, %3  : i32 loc(#loc11)
    %51 = llvm.and %50, %5  : i32 loc(#loc11)
    %52 = llvm.icmp "eq" %51, %2 : i32 loc(#loc11)
    %53 = llvm.select %52, %2, %5 : i1, i32 loc(#loc11)
    %54 = llvm.xor %2, %53  : i32 loc(#loc11)
    %55 = llvm.and %50, %11  : i32 loc(#loc11)
    %56 = llvm.icmp "eq" %55, %2 : i32 loc(#loc11)
    %57 = llvm.select %56, %2, %11 : i1, i32 loc(#loc11)
    %58 = llvm.xor %54, %57  : i32 loc(#loc11)
    %59 = llvm.and %50, %7  : i32 loc(#loc11)
    %60 = llvm.icmp "eq" %59, %2 : i32 loc(#loc11)
    %61 = llvm.select %60, %2, %7 : i1, i32 loc(#loc11)
    %62 = llvm.xor %58, %61  : i32 loc(#loc11)
    %63 = llvm.and %50, %1  : i32 loc(#loc11)
    %64 = llvm.icmp "eq" %63, %2 : i32 loc(#loc11)
    %65 = llvm.select %64, %2, %1 : i1, i32 loc(#loc11)
    %66 = llvm.xor %62, %65  : i32 loc(#loc11)
    %67 = llvm.add %66, %4 : i32 loc(#loc11)
    %68 = llvm.add %19, %47 : i32 loc(#loc12)
    %69 = llvm.add %19, %48 : i32 loc(#loc12)
    %70 = llvm.mul %18, %10 : i32 loc(#loc13)
    %71 = llvm.add %70, %67 : i32 loc(#loc14)
    %72 = llvm.mul %68, %arg3 : i32 loc(#loc15)
    %73 = llvm.mul %69, %arg3 : i32 loc(#loc15)
    %74 = llvm.add %72, %71 : i32 loc(#loc16)
    %75 = llvm.add %73, %71 : i32 loc(#loc16)
    %76 = llvm.add %74, %arg4 : i32 loc(#loc17)
    %77 = llvm.add %75, %arg4 : i32 loc(#loc17)
    %78 = llvm.getelementptr %arg0[%76] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc18)
    %79 = llvm.getelementptr %arg0[%77] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc18)
    %80 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %78, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc19)
    %81 = llvm.bitcast %80 : i16 to vector<1xf16> loc(#loc19)
    %82 = llvm.extractelement %81[%4 : i32] : vector<1xf16> loc(#loc19)
    %83 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %79, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc19)
    %84 = llvm.bitcast %83 : i16 to vector<1xf16> loc(#loc19)
    %85 = llvm.extractelement %84[%4 : i32] : vector<1xf16> loc(#loc19)
    %86 = llvm.fadd %82, %9  : f16 loc(#loc20)
    %87 = llvm.fadd %85, %9  : f16 loc(#loc20)
    %88 = llvm.add %68, %5 : i32 loc(#loc21)
    %89 = llvm.add %69, %5 : i32 loc(#loc21)
    %90 = llvm.mul %88, %arg3 : i32 loc(#loc22)
    %91 = llvm.mul %89, %arg3 : i32 loc(#loc22)
    %92 = llvm.add %90, %71 : i32 loc(#loc23)
    %93 = llvm.add %91, %71 : i32 loc(#loc23)
    %94 = llvm.add %92, %arg4 : i32 loc(#loc24)
    %95 = llvm.add %93, %arg4 : i32 loc(#loc24)
    %96 = llvm.getelementptr %arg0[%94] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc25)
    %97 = llvm.getelementptr %arg0[%95] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc25)
    %98 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %96, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc26)
    %99 = llvm.bitcast %98 : i16 to vector<1xf16> loc(#loc26)
    %100 = llvm.extractelement %99[%4 : i32] : vector<1xf16> loc(#loc26)
    %101 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %97, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc26)
    %102 = llvm.bitcast %101 : i16 to vector<1xf16> loc(#loc26)
    %103 = llvm.extractelement %102[%4 : i32] : vector<1xf16> loc(#loc26)
    %104 = llvm.fadd %86, %100  : f16 loc(#loc27)
    %105 = llvm.fadd %87, %103  : f16 loc(#loc27)
    %106 = llvm.add %68, %11 : i32 loc(#loc28)
    %107 = llvm.add %69, %11 : i32 loc(#loc28)
    %108 = llvm.mul %106, %arg3 : i32 loc(#loc29)
    %109 = llvm.mul %107, %arg3 : i32 loc(#loc29)
    %110 = llvm.add %108, %71 : i32 loc(#loc30)
    %111 = llvm.add %109, %71 : i32 loc(#loc30)
    %112 = llvm.add %110, %arg4 : i32 loc(#loc31)
    %113 = llvm.add %111, %arg4 : i32 loc(#loc31)
    %114 = llvm.getelementptr %arg0[%112] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc32)
    %115 = llvm.getelementptr %arg0[%113] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc32)
    %116 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %114, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc33)
    %117 = llvm.bitcast %116 : i16 to vector<1xf16> loc(#loc33)
    %118 = llvm.extractelement %117[%4 : i32] : vector<1xf16> loc(#loc33)
    %119 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %115, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc33)
    %120 = llvm.bitcast %119 : i16 to vector<1xf16> loc(#loc33)
    %121 = llvm.extractelement %120[%4 : i32] : vector<1xf16> loc(#loc33)
    %122 = llvm.fadd %104, %118  : f16 loc(#loc34)
    %123 = llvm.fadd %105, %121  : f16 loc(#loc34)
    %124 = llvm.add %68, %6 : i32 loc(#loc35)
    %125 = llvm.add %69, %6 : i32 loc(#loc35)
    %126 = llvm.mul %124, %arg3 : i32 loc(#loc36)
    %127 = llvm.mul %125, %arg3 : i32 loc(#loc36)
    %128 = llvm.add %126, %71 : i32 loc(#loc37)
    %129 = llvm.add %127, %71 : i32 loc(#loc37)
    %130 = llvm.add %128, %arg4 : i32 loc(#loc38)
    %131 = llvm.add %129, %arg4 : i32 loc(#loc38)
    %132 = llvm.getelementptr %arg0[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc39)
    %133 = llvm.getelementptr %arg0[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc39)
    %134 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %132, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc40)
    %135 = llvm.bitcast %134 : i16 to vector<1xf16> loc(#loc40)
    %136 = llvm.extractelement %135[%4 : i32] : vector<1xf16> loc(#loc40)
    %137 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %133, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc40)
    %138 = llvm.bitcast %137 : i16 to vector<1xf16> loc(#loc40)
    %139 = llvm.extractelement %138[%4 : i32] : vector<1xf16> loc(#loc40)
    %140 = llvm.fadd %122, %136  : f16 loc(#loc41)
    %141 = llvm.fadd %123, %139  : f16 loc(#loc41)
    %142 = llvm.add %68, %7 : i32 loc(#loc42)
    %143 = llvm.add %69, %7 : i32 loc(#loc42)
    %144 = llvm.mul %142, %arg3 : i32 loc(#loc43)
    %145 = llvm.mul %143, %arg3 : i32 loc(#loc43)
    %146 = llvm.add %144, %71 : i32 loc(#loc44)
    %147 = llvm.add %145, %71 : i32 loc(#loc44)
    %148 = llvm.add %146, %arg4 : i32 loc(#loc45)
    %149 = llvm.add %147, %arg4 : i32 loc(#loc45)
    %150 = llvm.getelementptr %arg0[%148] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc46)
    %151 = llvm.getelementptr %arg0[%149] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc46)
    %152 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %150, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc47)
    %153 = llvm.bitcast %152 : i16 to vector<1xf16> loc(#loc47)
    %154 = llvm.extractelement %153[%4 : i32] : vector<1xf16> loc(#loc47)
    %155 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %151, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc47)
    %156 = llvm.bitcast %155 : i16 to vector<1xf16> loc(#loc47)
    %157 = llvm.extractelement %156[%4 : i32] : vector<1xf16> loc(#loc47)
    %158 = llvm.fadd %140, %154  : f16 loc(#loc48)
    %159 = llvm.fadd %141, %157  : f16 loc(#loc48)
    %160 = llvm.add %68, %arg4 : i32 loc(#loc49)
    %161 = llvm.add %69, %arg4 : i32 loc(#loc49)
    %162 = llvm.mul %160, %arg3 : i32 loc(#loc50)
    %163 = llvm.mul %161, %arg3 : i32 loc(#loc50)
    %164 = llvm.add %162, %71 : i32 loc(#loc51)
    %165 = llvm.add %163, %71 : i32 loc(#loc51)
    %166 = llvm.getelementptr %arg0[%164] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc52)
    %167 = llvm.getelementptr %arg0[%165] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc52)
    %168 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %166, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc53)
    %169 = llvm.bitcast %168 : i16 to vector<1xf16> loc(#loc53)
    %170 = llvm.extractelement %169[%4 : i32] : vector<1xf16> loc(#loc53)
    %171 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %167, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc53)
    %172 = llvm.bitcast %171 : i16 to vector<1xf16> loc(#loc53)
    %173 = llvm.extractelement %172[%4 : i32] : vector<1xf16> loc(#loc53)
    %174 = llvm.fadd %158, %170  : f16 loc(#loc54)
    %175 = llvm.fadd %159, %173  : f16 loc(#loc54)
    %176 = llvm.add %164, %5 : i32 loc(#loc55)
    %177 = llvm.add %165, %5 : i32 loc(#loc55)
    %178 = llvm.getelementptr %arg0[%176] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc56)
    %179 = llvm.getelementptr %arg0[%177] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc56)
    %180 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %178, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc57)
    %181 = llvm.bitcast %180 : i16 to vector<1xf16> loc(#loc57)
    %182 = llvm.extractelement %181[%4 : i32] : vector<1xf16> loc(#loc57)
    %183 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %179, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc57)
    %184 = llvm.bitcast %183 : i16 to vector<1xf16> loc(#loc57)
    %185 = llvm.extractelement %184[%4 : i32] : vector<1xf16> loc(#loc57)
    %186 = llvm.fadd %174, %182  : f16 loc(#loc58)
    %187 = llvm.fadd %175, %185  : f16 loc(#loc58)
    %188 = llvm.add %164, %6 : i32 loc(#loc59)
    %189 = llvm.add %165, %6 : i32 loc(#loc59)
    %190 = llvm.getelementptr %arg0[%188] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc60)
    %191 = llvm.getelementptr %arg0[%189] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc60)
    %192 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %190, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc61)
    %193 = llvm.bitcast %192 : i16 to vector<1xf16> loc(#loc61)
    %194 = llvm.extractelement %193[%4 : i32] : vector<1xf16> loc(#loc61)
    %195 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %191, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc61)
    %196 = llvm.bitcast %195 : i16 to vector<1xf16> loc(#loc61)
    %197 = llvm.extractelement %196[%4 : i32] : vector<1xf16> loc(#loc61)
    %198 = llvm.fadd %186, %194  : f16 loc(#loc62)
    %199 = llvm.fadd %187, %197  : f16 loc(#loc62)
    %200 = llvm.add %164, %7 : i32 loc(#loc63)
    %201 = llvm.add %165, %7 : i32 loc(#loc63)
    %202 = llvm.getelementptr %arg0[%200] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc64)
    %203 = llvm.getelementptr %arg0[%201] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc64)
    %204 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %202, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc65)
    %205 = llvm.bitcast %204 : i16 to vector<1xf16> loc(#loc65)
    %206 = llvm.extractelement %205[%4 : i32] : vector<1xf16> loc(#loc65)
    %207 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %203, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc65)
    %208 = llvm.bitcast %207 : i16 to vector<1xf16> loc(#loc65)
    %209 = llvm.extractelement %208[%4 : i32] : vector<1xf16> loc(#loc65)
    %210 = llvm.fadd %198, %206  : f16 loc(#loc66)
    %211 = llvm.fadd %199, %209  : f16 loc(#loc66)
    %212 = llvm.add %164, %arg4 : i32 loc(#loc67)
    %213 = llvm.add %165, %arg4 : i32 loc(#loc67)
    %214 = llvm.getelementptr %arg1[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc68)
    %215 = llvm.getelementptr %arg1[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc68)
    %216 = llvm.mlir.undef : vector<1xf16> loc(#loc69)
    %217 = llvm.insertelement %210, %216[%2 : i32] : vector<1xf16> loc(#loc69)
    %218 = llvm.bitcast %217 : vector<1xf16> to i16 loc(#loc69)
    %219 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b" %218, %214, %0 : (i16, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc69)
    %220 = llvm.mlir.undef : vector<1xf16> loc(#loc69)
    %221 = llvm.insertelement %211, %220[%2 : i32] : vector<1xf16> loc(#loc69)
    %222 = llvm.bitcast %221 : vector<1xf16> to i16 loc(#loc69)
    %223 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b" %222, %215, %0 : (i16, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc69)
    llvm.return loc(#loc70)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:36)
#loc16 = loc("2d9pt_naive.py":50:40)
#loc17 = loc("2d9pt_naive.py":50:56)
#loc18 = loc("2d9pt_naive.py":50:18)
#loc19 = loc("2d9pt_naive.py":51:21)
#loc20 = loc("2d9pt_naive.py":52:22)
#loc21 = loc("2d9pt_naive.py":54:37)
#loc22 = loc("2d9pt_naive.py":54:40)
#loc23 = loc("2d9pt_naive.py":54:44)
#loc24 = loc("2d9pt_naive.py":54:60)
#loc25 = loc("2d9pt_naive.py":54:18)
#loc26 = loc("2d9pt_naive.py":55:21)
#loc27 = loc("2d9pt_naive.py":56:22)
#loc28 = loc("2d9pt_naive.py":58:37)
#loc29 = loc("2d9pt_naive.py":58:40)
#loc30 = loc("2d9pt_naive.py":58:44)
#loc31 = loc("2d9pt_naive.py":58:60)
#loc32 = loc("2d9pt_naive.py":58:18)
#loc33 = loc("2d9pt_naive.py":59:21)
#loc34 = loc("2d9pt_naive.py":60:22)
#loc35 = loc("2d9pt_naive.py":62:37)
#loc36 = loc("2d9pt_naive.py":62:40)
#loc37 = loc("2d9pt_naive.py":62:44)
#loc38 = loc("2d9pt_naive.py":62:60)
#loc39 = loc("2d9pt_naive.py":62:18)
#loc40 = loc("2d9pt_naive.py":63:21)
#loc41 = loc("2d9pt_naive.py":64:22)
#loc42 = loc("2d9pt_naive.py":66:37)
#loc43 = loc("2d9pt_naive.py":66:40)
#loc44 = loc("2d9pt_naive.py":66:44)
#loc45 = loc("2d9pt_naive.py":66:60)
#loc46 = loc("2d9pt_naive.py":66:18)
#loc47 = loc("2d9pt_naive.py":67:21)
#loc48 = loc("2d9pt_naive.py":68:22)
#loc49 = loc("2d9pt_naive.py":71:37)
#loc50 = loc("2d9pt_naive.py":71:40)
#loc51 = loc("2d9pt_naive.py":71:44)
#loc52 = loc("2d9pt_naive.py":71:18)
#loc53 = loc("2d9pt_naive.py":72:21)
#loc54 = loc("2d9pt_naive.py":73:22)
#loc55 = loc("2d9pt_naive.py":75:62)
#loc56 = loc("2d9pt_naive.py":75:18)
#loc57 = loc("2d9pt_naive.py":76:21)
#loc58 = loc("2d9pt_naive.py":77:22)
#loc59 = loc("2d9pt_naive.py":79:62)
#loc60 = loc("2d9pt_naive.py":79:18)
#loc61 = loc("2d9pt_naive.py":80:21)
#loc62 = loc("2d9pt_naive.py":81:22)
#loc63 = loc("2d9pt_naive.py":83:62)
#loc64 = loc("2d9pt_naive.py":83:18)
#loc65 = loc("2d9pt_naive.py":84:21)
#loc66 = loc("2d9pt_naive.py":85:22)
#loc67 = loc("2d9pt_naive.py":87:60)
#loc68 = loc("2d9pt_naive.py":87:18)
#loc69 = loc("2d9pt_naive.py":88:21)
#loc70 = loc("2d9pt_naive.py":88:4)
#loc71 = loc(callsite(#loc5 at #loc6))
#loc72 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.shared = 0 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @stencil_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.maxntid = array<i32: 128>} {
    %0 = llvm.mlir.constant(true) : i1 loc(#loc1)
    %1 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(15 : i32) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(0.000000e+00 : f16) : f16 loc(#loc1)
    %10 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %11 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %12 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc2)
    %13 = llvm.mul %arg4, %11 : i32 loc(#loc3)
    %14 = llvm.sub %arg2, %13 : i32 loc(#loc4)
    %15 = llvm.add %14, %8 : i32 loc(#loc71)
    %16 = llvm.sdiv %15, %10  : i32 loc(#loc72)
    %17 = llvm.sdiv %12, %16  : i32 loc(#loc8)
    %18 = llvm.srem %12, %16  : i32 loc(#loc9)
    %19 = llvm.mul %17, %10 : i32 loc(#loc10)
    %20 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc11)
    %21 = llvm.urem %20, %3  : i32 loc(#loc11)
    %22 = llvm.udiv %20, %3  : i32 loc(#loc11)
    %23 = llvm.and %21, %10  : i32 loc(#loc11)
    %24 = llvm.icmp "eq" %23, %2 : i32 loc(#loc11)
    %25 = llvm.select %24, %2, %5 : i1, i32 loc(#loc11)
    %26 = llvm.xor %2, %25  : i32 loc(#loc11)
    %27 = llvm.and %22, %5  : i32 loc(#loc11)
    %28 = llvm.icmp "eq" %27, %2 : i32 loc(#loc11)
    %29 = llvm.select %28, %2, %11 : i1, i32 loc(#loc11)
    %30 = llvm.xor %26, %29  : i32 loc(#loc11)
    %31 = llvm.and %22, %11  : i32 loc(#loc11)
    %32 = llvm.icmp "eq" %31, %2 : i32 loc(#loc11)
    %33 = llvm.select %32, %2, %7 : i1, i32 loc(#loc11)
    %34 = llvm.xor %30, %33  : i32 loc(#loc11)
    %35 = llvm.and %21, %10  : i32 loc(#loc11)
    %36 = llvm.icmp "eq" %35, %2 : i32 loc(#loc11)
    %37 = llvm.select %36, %2, %5 : i1, i32 loc(#loc11)
    %38 = llvm.xor %1, %37  : i32 loc(#loc11)
    %39 = llvm.and %22, %5  : i32 loc(#loc11)
    %40 = llvm.icmp "eq" %39, %2 : i32 loc(#loc11)
    %41 = llvm.select %40, %2, %11 : i1, i32 loc(#loc11)
    %42 = llvm.xor %38, %41  : i32 loc(#loc11)
    %43 = llvm.and %22, %11  : i32 loc(#loc11)
    %44 = llvm.icmp "eq" %43, %2 : i32 loc(#loc11)
    %45 = llvm.select %44, %2, %7 : i1, i32 loc(#loc11)
    %46 = llvm.xor %42, %45  : i32 loc(#loc11)
    %47 = llvm.add %34, %4 : i32 loc(#loc11)
    %48 = llvm.add %46, %4 : i32 loc(#loc11)
    %49 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc11)
    %50 = llvm.urem %49, %3  : i32 loc(#loc11)
    %51 = llvm.and %50, %5  : i32 loc(#loc11)
    %52 = llvm.icmp "eq" %51, %2 : i32 loc(#loc11)
    %53 = llvm.select %52, %2, %5 : i1, i32 loc(#loc11)
    %54 = llvm.xor %2, %53  : i32 loc(#loc11)
    %55 = llvm.and %50, %11  : i32 loc(#loc11)
    %56 = llvm.icmp "eq" %55, %2 : i32 loc(#loc11)
    %57 = llvm.select %56, %2, %11 : i1, i32 loc(#loc11)
    %58 = llvm.xor %54, %57  : i32 loc(#loc11)
    %59 = llvm.and %50, %7  : i32 loc(#loc11)
    %60 = llvm.icmp "eq" %59, %2 : i32 loc(#loc11)
    %61 = llvm.select %60, %2, %7 : i1, i32 loc(#loc11)
    %62 = llvm.xor %58, %61  : i32 loc(#loc11)
    %63 = llvm.and %50, %1  : i32 loc(#loc11)
    %64 = llvm.icmp "eq" %63, %2 : i32 loc(#loc11)
    %65 = llvm.select %64, %2, %1 : i1, i32 loc(#loc11)
    %66 = llvm.xor %62, %65  : i32 loc(#loc11)
    %67 = llvm.add %66, %4 : i32 loc(#loc11)
    %68 = llvm.add %19, %47 : i32 loc(#loc12)
    %69 = llvm.add %19, %48 : i32 loc(#loc12)
    %70 = llvm.mul %18, %10 : i32 loc(#loc13)
    %71 = llvm.add %70, %67 : i32 loc(#loc14)
    %72 = llvm.mul %68, %arg3 : i32 loc(#loc15)
    %73 = llvm.mul %69, %arg3 : i32 loc(#loc15)
    %74 = llvm.add %72, %71 : i32 loc(#loc16)
    %75 = llvm.add %73, %71 : i32 loc(#loc16)
    %76 = llvm.add %74, %arg4 : i32 loc(#loc17)
    %77 = llvm.add %75, %arg4 : i32 loc(#loc17)
    %78 = llvm.getelementptr %arg0[%76] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc18)
    %79 = llvm.getelementptr %arg0[%77] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc18)
    %80 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %78, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc19)
    %81 = llvm.bitcast %80 : i16 to vector<1xf16> loc(#loc19)
    %82 = llvm.extractelement %81[%4 : i32] : vector<1xf16> loc(#loc19)
    %83 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %79, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc19)
    %84 = llvm.bitcast %83 : i16 to vector<1xf16> loc(#loc19)
    %85 = llvm.extractelement %84[%4 : i32] : vector<1xf16> loc(#loc19)
    %86 = llvm.fadd %82, %9  : f16 loc(#loc20)
    %87 = llvm.fadd %85, %9  : f16 loc(#loc20)
    %88 = llvm.add %68, %5 : i32 loc(#loc21)
    %89 = llvm.add %69, %5 : i32 loc(#loc21)
    %90 = llvm.mul %88, %arg3 : i32 loc(#loc22)
    %91 = llvm.mul %89, %arg3 : i32 loc(#loc22)
    %92 = llvm.add %90, %71 : i32 loc(#loc23)
    %93 = llvm.add %91, %71 : i32 loc(#loc23)
    %94 = llvm.add %92, %arg4 : i32 loc(#loc24)
    %95 = llvm.add %93, %arg4 : i32 loc(#loc24)
    %96 = llvm.getelementptr %arg0[%94] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc25)
    %97 = llvm.getelementptr %arg0[%95] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc25)
    %98 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %96, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc26)
    %99 = llvm.bitcast %98 : i16 to vector<1xf16> loc(#loc26)
    %100 = llvm.extractelement %99[%4 : i32] : vector<1xf16> loc(#loc26)
    %101 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %97, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc26)
    %102 = llvm.bitcast %101 : i16 to vector<1xf16> loc(#loc26)
    %103 = llvm.extractelement %102[%4 : i32] : vector<1xf16> loc(#loc26)
    %104 = llvm.fadd %86, %100  : f16 loc(#loc27)
    %105 = llvm.fadd %87, %103  : f16 loc(#loc27)
    %106 = llvm.add %68, %11 : i32 loc(#loc28)
    %107 = llvm.add %69, %11 : i32 loc(#loc28)
    %108 = llvm.mul %106, %arg3 : i32 loc(#loc29)
    %109 = llvm.mul %107, %arg3 : i32 loc(#loc29)
    %110 = llvm.add %108, %71 : i32 loc(#loc30)
    %111 = llvm.add %109, %71 : i32 loc(#loc30)
    %112 = llvm.add %110, %arg4 : i32 loc(#loc31)
    %113 = llvm.add %111, %arg4 : i32 loc(#loc31)
    %114 = llvm.getelementptr %arg0[%112] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc32)
    %115 = llvm.getelementptr %arg0[%113] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc32)
    %116 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %114, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc33)
    %117 = llvm.bitcast %116 : i16 to vector<1xf16> loc(#loc33)
    %118 = llvm.extractelement %117[%4 : i32] : vector<1xf16> loc(#loc33)
    %119 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %115, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc33)
    %120 = llvm.bitcast %119 : i16 to vector<1xf16> loc(#loc33)
    %121 = llvm.extractelement %120[%4 : i32] : vector<1xf16> loc(#loc33)
    %122 = llvm.fadd %104, %118  : f16 loc(#loc34)
    %123 = llvm.fadd %105, %121  : f16 loc(#loc34)
    %124 = llvm.add %68, %6 : i32 loc(#loc35)
    %125 = llvm.add %69, %6 : i32 loc(#loc35)
    %126 = llvm.mul %124, %arg3 : i32 loc(#loc36)
    %127 = llvm.mul %125, %arg3 : i32 loc(#loc36)
    %128 = llvm.add %126, %71 : i32 loc(#loc37)
    %129 = llvm.add %127, %71 : i32 loc(#loc37)
    %130 = llvm.add %128, %arg4 : i32 loc(#loc38)
    %131 = llvm.add %129, %arg4 : i32 loc(#loc38)
    %132 = llvm.getelementptr %arg0[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc39)
    %133 = llvm.getelementptr %arg0[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc39)
    %134 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %132, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc40)
    %135 = llvm.bitcast %134 : i16 to vector<1xf16> loc(#loc40)
    %136 = llvm.extractelement %135[%4 : i32] : vector<1xf16> loc(#loc40)
    %137 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %133, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc40)
    %138 = llvm.bitcast %137 : i16 to vector<1xf16> loc(#loc40)
    %139 = llvm.extractelement %138[%4 : i32] : vector<1xf16> loc(#loc40)
    %140 = llvm.fadd %122, %136  : f16 loc(#loc41)
    %141 = llvm.fadd %123, %139  : f16 loc(#loc41)
    %142 = llvm.add %68, %7 : i32 loc(#loc42)
    %143 = llvm.add %69, %7 : i32 loc(#loc42)
    %144 = llvm.mul %142, %arg3 : i32 loc(#loc43)
    %145 = llvm.mul %143, %arg3 : i32 loc(#loc43)
    %146 = llvm.add %144, %71 : i32 loc(#loc44)
    %147 = llvm.add %145, %71 : i32 loc(#loc44)
    %148 = llvm.add %146, %arg4 : i32 loc(#loc45)
    %149 = llvm.add %147, %arg4 : i32 loc(#loc45)
    %150 = llvm.getelementptr %arg0[%148] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc46)
    %151 = llvm.getelementptr %arg0[%149] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc46)
    %152 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %150, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc47)
    %153 = llvm.bitcast %152 : i16 to vector<1xf16> loc(#loc47)
    %154 = llvm.extractelement %153[%4 : i32] : vector<1xf16> loc(#loc47)
    %155 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %151, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc47)
    %156 = llvm.bitcast %155 : i16 to vector<1xf16> loc(#loc47)
    %157 = llvm.extractelement %156[%4 : i32] : vector<1xf16> loc(#loc47)
    %158 = llvm.fadd %140, %154  : f16 loc(#loc48)
    %159 = llvm.fadd %141, %157  : f16 loc(#loc48)
    %160 = llvm.add %68, %arg4 : i32 loc(#loc49)
    %161 = llvm.add %69, %arg4 : i32 loc(#loc49)
    %162 = llvm.mul %160, %arg3 : i32 loc(#loc50)
    %163 = llvm.mul %161, %arg3 : i32 loc(#loc50)
    %164 = llvm.add %162, %71 : i32 loc(#loc51)
    %165 = llvm.add %163, %71 : i32 loc(#loc51)
    %166 = llvm.getelementptr %arg0[%164] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc52)
    %167 = llvm.getelementptr %arg0[%165] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc52)
    %168 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %166, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc53)
    %169 = llvm.bitcast %168 : i16 to vector<1xf16> loc(#loc53)
    %170 = llvm.extractelement %169[%4 : i32] : vector<1xf16> loc(#loc53)
    %171 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %167, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc53)
    %172 = llvm.bitcast %171 : i16 to vector<1xf16> loc(#loc53)
    %173 = llvm.extractelement %172[%4 : i32] : vector<1xf16> loc(#loc53)
    %174 = llvm.fadd %158, %170  : f16 loc(#loc54)
    %175 = llvm.fadd %159, %173  : f16 loc(#loc54)
    %176 = llvm.add %164, %5 : i32 loc(#loc55)
    %177 = llvm.add %165, %5 : i32 loc(#loc55)
    %178 = llvm.getelementptr %arg0[%176] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc56)
    %179 = llvm.getelementptr %arg0[%177] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc56)
    %180 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %178, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc57)
    %181 = llvm.bitcast %180 : i16 to vector<1xf16> loc(#loc57)
    %182 = llvm.extractelement %181[%4 : i32] : vector<1xf16> loc(#loc57)
    %183 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %179, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc57)
    %184 = llvm.bitcast %183 : i16 to vector<1xf16> loc(#loc57)
    %185 = llvm.extractelement %184[%4 : i32] : vector<1xf16> loc(#loc57)
    %186 = llvm.fadd %174, %182  : f16 loc(#loc58)
    %187 = llvm.fadd %175, %185  : f16 loc(#loc58)
    %188 = llvm.add %164, %6 : i32 loc(#loc59)
    %189 = llvm.add %165, %6 : i32 loc(#loc59)
    %190 = llvm.getelementptr %arg0[%188] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc60)
    %191 = llvm.getelementptr %arg0[%189] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc60)
    %192 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %190, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc61)
    %193 = llvm.bitcast %192 : i16 to vector<1xf16> loc(#loc61)
    %194 = llvm.extractelement %193[%4 : i32] : vector<1xf16> loc(#loc61)
    %195 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %191, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc61)
    %196 = llvm.bitcast %195 : i16 to vector<1xf16> loc(#loc61)
    %197 = llvm.extractelement %196[%4 : i32] : vector<1xf16> loc(#loc61)
    %198 = llvm.fadd %186, %194  : f16 loc(#loc62)
    %199 = llvm.fadd %187, %197  : f16 loc(#loc62)
    %200 = llvm.add %164, %7 : i32 loc(#loc63)
    %201 = llvm.add %165, %7 : i32 loc(#loc63)
    %202 = llvm.getelementptr %arg0[%200] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc64)
    %203 = llvm.getelementptr %arg0[%201] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc64)
    %204 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %202, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc65)
    %205 = llvm.bitcast %204 : i16 to vector<1xf16> loc(#loc65)
    %206 = llvm.extractelement %205[%4 : i32] : vector<1xf16> loc(#loc65)
    %207 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %203, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc65)
    %208 = llvm.bitcast %207 : i16 to vector<1xf16> loc(#loc65)
    %209 = llvm.extractelement %208[%4 : i32] : vector<1xf16> loc(#loc65)
    %210 = llvm.fadd %198, %206  : f16 loc(#loc66)
    %211 = llvm.fadd %199, %209  : f16 loc(#loc66)
    %212 = llvm.add %164, %arg4 : i32 loc(#loc67)
    %213 = llvm.add %165, %arg4 : i32 loc(#loc67)
    %214 = llvm.getelementptr %arg1[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc68)
    %215 = llvm.getelementptr %arg1[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc68)
    %216 = llvm.mlir.undef : vector<1xf16> loc(#loc69)
    %217 = llvm.insertelement %210, %216[%2 : i32] : vector<1xf16> loc(#loc69)
    %218 = llvm.bitcast %217 : vector<1xf16> to i16 loc(#loc69)
    %219 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b" %218, %214, %0 : (i16, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc69)
    %220 = llvm.mlir.undef : vector<1xf16> loc(#loc69)
    %221 = llvm.insertelement %211, %220[%2 : i32] : vector<1xf16> loc(#loc69)
    %222 = llvm.bitcast %221 : vector<1xf16> to i16 loc(#loc69)
    %223 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b" %222, %215, %0 : (i16, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc69)
    llvm.return loc(#loc70)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:36)
#loc16 = loc("2d9pt_naive.py":50:40)
#loc17 = loc("2d9pt_naive.py":50:56)
#loc18 = loc("2d9pt_naive.py":50:18)
#loc19 = loc("2d9pt_naive.py":51:21)
#loc20 = loc("2d9pt_naive.py":52:22)
#loc21 = loc("2d9pt_naive.py":54:37)
#loc22 = loc("2d9pt_naive.py":54:40)
#loc23 = loc("2d9pt_naive.py":54:44)
#loc24 = loc("2d9pt_naive.py":54:60)
#loc25 = loc("2d9pt_naive.py":54:18)
#loc26 = loc("2d9pt_naive.py":55:21)
#loc27 = loc("2d9pt_naive.py":56:22)
#loc28 = loc("2d9pt_naive.py":58:37)
#loc29 = loc("2d9pt_naive.py":58:40)
#loc30 = loc("2d9pt_naive.py":58:44)
#loc31 = loc("2d9pt_naive.py":58:60)
#loc32 = loc("2d9pt_naive.py":58:18)
#loc33 = loc("2d9pt_naive.py":59:21)
#loc34 = loc("2d9pt_naive.py":60:22)
#loc35 = loc("2d9pt_naive.py":62:37)
#loc36 = loc("2d9pt_naive.py":62:40)
#loc37 = loc("2d9pt_naive.py":62:44)
#loc38 = loc("2d9pt_naive.py":62:60)
#loc39 = loc("2d9pt_naive.py":62:18)
#loc40 = loc("2d9pt_naive.py":63:21)
#loc41 = loc("2d9pt_naive.py":64:22)
#loc42 = loc("2d9pt_naive.py":66:37)
#loc43 = loc("2d9pt_naive.py":66:40)
#loc44 = loc("2d9pt_naive.py":66:44)
#loc45 = loc("2d9pt_naive.py":66:60)
#loc46 = loc("2d9pt_naive.py":66:18)
#loc47 = loc("2d9pt_naive.py":67:21)
#loc48 = loc("2d9pt_naive.py":68:22)
#loc49 = loc("2d9pt_naive.py":71:37)
#loc50 = loc("2d9pt_naive.py":71:40)
#loc51 = loc("2d9pt_naive.py":71:44)
#loc52 = loc("2d9pt_naive.py":71:18)
#loc53 = loc("2d9pt_naive.py":72:21)
#loc54 = loc("2d9pt_naive.py":73:22)
#loc55 = loc("2d9pt_naive.py":75:62)
#loc56 = loc("2d9pt_naive.py":75:18)
#loc57 = loc("2d9pt_naive.py":76:21)
#loc58 = loc("2d9pt_naive.py":77:22)
#loc59 = loc("2d9pt_naive.py":79:62)
#loc60 = loc("2d9pt_naive.py":79:18)
#loc61 = loc("2d9pt_naive.py":80:21)
#loc62 = loc("2d9pt_naive.py":81:22)
#loc63 = loc("2d9pt_naive.py":83:62)
#loc64 = loc("2d9pt_naive.py":83:18)
#loc65 = loc("2d9pt_naive.py":84:21)
#loc66 = loc("2d9pt_naive.py":85:22)
#loc67 = loc("2d9pt_naive.py":87:60)
#loc68 = loc("2d9pt_naive.py":87:18)
#loc69 = loc("2d9pt_naive.py":88:21)
#loc70 = loc("2d9pt_naive.py":88:4)
#loc71 = loc(callsite(#loc5 at #loc6))
#loc72 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.shared = 0 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @stencil_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.maxntid = array<i32: 128>} {
    %0 = llvm.mlir.constant(true) : i1 loc(#loc1)
    %1 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(15 : i32) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(0.000000e+00 : f16) : f16 loc(#loc1)
    %10 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %11 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %12 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc2)
    %13 = llvm.mul %arg4, %11 : i32 loc(#loc3)
    %14 = llvm.sub %arg2, %13 : i32 loc(#loc4)
    %15 = llvm.add %14, %8 : i32 loc(#loc71)
    %16 = llvm.sdiv %15, %10  : i32 loc(#loc72)
    %17 = llvm.sdiv %12, %16  : i32 loc(#loc8)
    %18 = llvm.srem %12, %16  : i32 loc(#loc9)
    %19 = llvm.mul %17, %10 : i32 loc(#loc10)
    %20 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc11)
    %21 = llvm.urem %20, %3  : i32 loc(#loc11)
    %22 = llvm.udiv %20, %3  : i32 loc(#loc11)
    %23 = llvm.and %21, %10  : i32 loc(#loc11)
    %24 = llvm.icmp "eq" %23, %2 : i32 loc(#loc11)
    %25 = llvm.select %24, %2, %5 : i1, i32 loc(#loc11)
    %26 = llvm.xor %2, %25  : i32 loc(#loc11)
    %27 = llvm.and %22, %5  : i32 loc(#loc11)
    %28 = llvm.icmp "eq" %27, %2 : i32 loc(#loc11)
    %29 = llvm.select %28, %2, %11 : i1, i32 loc(#loc11)
    %30 = llvm.xor %26, %29  : i32 loc(#loc11)
    %31 = llvm.and %22, %11  : i32 loc(#loc11)
    %32 = llvm.icmp "eq" %31, %2 : i32 loc(#loc11)
    %33 = llvm.select %32, %2, %7 : i1, i32 loc(#loc11)
    %34 = llvm.xor %30, %33  : i32 loc(#loc11)
    %35 = llvm.and %21, %10  : i32 loc(#loc11)
    %36 = llvm.icmp "eq" %35, %2 : i32 loc(#loc11)
    %37 = llvm.select %36, %2, %5 : i1, i32 loc(#loc11)
    %38 = llvm.xor %1, %37  : i32 loc(#loc11)
    %39 = llvm.and %22, %5  : i32 loc(#loc11)
    %40 = llvm.icmp "eq" %39, %2 : i32 loc(#loc11)
    %41 = llvm.select %40, %2, %11 : i1, i32 loc(#loc11)
    %42 = llvm.xor %38, %41  : i32 loc(#loc11)
    %43 = llvm.and %22, %11  : i32 loc(#loc11)
    %44 = llvm.icmp "eq" %43, %2 : i32 loc(#loc11)
    %45 = llvm.select %44, %2, %7 : i1, i32 loc(#loc11)
    %46 = llvm.xor %42, %45  : i32 loc(#loc11)
    %47 = llvm.add %34, %4 : i32 loc(#loc11)
    %48 = llvm.add %46, %4 : i32 loc(#loc11)
    %49 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc11)
    %50 = llvm.urem %49, %3  : i32 loc(#loc11)
    %51 = llvm.and %50, %5  : i32 loc(#loc11)
    %52 = llvm.icmp "eq" %51, %2 : i32 loc(#loc11)
    %53 = llvm.select %52, %2, %5 : i1, i32 loc(#loc11)
    %54 = llvm.xor %2, %53  : i32 loc(#loc11)
    %55 = llvm.and %50, %11  : i32 loc(#loc11)
    %56 = llvm.icmp "eq" %55, %2 : i32 loc(#loc11)
    %57 = llvm.select %56, %2, %11 : i1, i32 loc(#loc11)
    %58 = llvm.xor %54, %57  : i32 loc(#loc11)
    %59 = llvm.and %50, %7  : i32 loc(#loc11)
    %60 = llvm.icmp "eq" %59, %2 : i32 loc(#loc11)
    %61 = llvm.select %60, %2, %7 : i1, i32 loc(#loc11)
    %62 = llvm.xor %58, %61  : i32 loc(#loc11)
    %63 = llvm.and %50, %1  : i32 loc(#loc11)
    %64 = llvm.icmp "eq" %63, %2 : i32 loc(#loc11)
    %65 = llvm.select %64, %2, %1 : i1, i32 loc(#loc11)
    %66 = llvm.xor %62, %65  : i32 loc(#loc11)
    %67 = llvm.add %66, %4 : i32 loc(#loc11)
    %68 = llvm.add %19, %47 : i32 loc(#loc12)
    %69 = llvm.add %19, %48 : i32 loc(#loc12)
    %70 = llvm.mul %18, %10 : i32 loc(#loc13)
    %71 = llvm.add %70, %67 : i32 loc(#loc14)
    %72 = llvm.mul %68, %arg3 : i32 loc(#loc15)
    %73 = llvm.mul %69, %arg3 : i32 loc(#loc15)
    %74 = llvm.add %72, %71 : i32 loc(#loc16)
    %75 = llvm.add %73, %71 : i32 loc(#loc16)
    %76 = llvm.add %74, %arg4 : i32 loc(#loc17)
    %77 = llvm.add %75, %arg4 : i32 loc(#loc17)
    %78 = llvm.getelementptr %arg0[%76] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc18)
    %79 = llvm.getelementptr %arg0[%77] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc18)
    %80 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %78, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc19)
    %81 = llvm.bitcast %80 : i16 to vector<1xf16> loc(#loc19)
    %82 = llvm.extractelement %81[%4 : i32] : vector<1xf16> loc(#loc19)
    %83 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %79, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc19)
    %84 = llvm.bitcast %83 : i16 to vector<1xf16> loc(#loc19)
    %85 = llvm.extractelement %84[%4 : i32] : vector<1xf16> loc(#loc19)
    %86 = llvm.fadd %82, %9  : f16 loc(#loc20)
    %87 = llvm.fadd %85, %9  : f16 loc(#loc20)
    %88 = llvm.add %68, %5 : i32 loc(#loc21)
    %89 = llvm.add %69, %5 : i32 loc(#loc21)
    %90 = llvm.mul %88, %arg3 : i32 loc(#loc22)
    %91 = llvm.mul %89, %arg3 : i32 loc(#loc22)
    %92 = llvm.add %90, %71 : i32 loc(#loc23)
    %93 = llvm.add %91, %71 : i32 loc(#loc23)
    %94 = llvm.add %92, %arg4 : i32 loc(#loc24)
    %95 = llvm.add %93, %arg4 : i32 loc(#loc24)
    %96 = llvm.getelementptr %arg0[%94] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc25)
    %97 = llvm.getelementptr %arg0[%95] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc25)
    %98 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %96, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc26)
    %99 = llvm.bitcast %98 : i16 to vector<1xf16> loc(#loc26)
    %100 = llvm.extractelement %99[%4 : i32] : vector<1xf16> loc(#loc26)
    %101 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %97, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc26)
    %102 = llvm.bitcast %101 : i16 to vector<1xf16> loc(#loc26)
    %103 = llvm.extractelement %102[%4 : i32] : vector<1xf16> loc(#loc26)
    %104 = llvm.fadd %86, %100  : f16 loc(#loc27)
    %105 = llvm.fadd %87, %103  : f16 loc(#loc27)
    %106 = llvm.add %68, %11 : i32 loc(#loc28)
    %107 = llvm.add %69, %11 : i32 loc(#loc28)
    %108 = llvm.mul %106, %arg3 : i32 loc(#loc29)
    %109 = llvm.mul %107, %arg3 : i32 loc(#loc29)
    %110 = llvm.add %108, %71 : i32 loc(#loc30)
    %111 = llvm.add %109, %71 : i32 loc(#loc30)
    %112 = llvm.add %110, %arg4 : i32 loc(#loc31)
    %113 = llvm.add %111, %arg4 : i32 loc(#loc31)
    %114 = llvm.getelementptr %arg0[%112] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc32)
    %115 = llvm.getelementptr %arg0[%113] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc32)
    %116 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %114, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc33)
    %117 = llvm.bitcast %116 : i16 to vector<1xf16> loc(#loc33)
    %118 = llvm.extractelement %117[%4 : i32] : vector<1xf16> loc(#loc33)
    %119 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %115, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc33)
    %120 = llvm.bitcast %119 : i16 to vector<1xf16> loc(#loc33)
    %121 = llvm.extractelement %120[%4 : i32] : vector<1xf16> loc(#loc33)
    %122 = llvm.fadd %104, %118  : f16 loc(#loc34)
    %123 = llvm.fadd %105, %121  : f16 loc(#loc34)
    %124 = llvm.add %68, %6 : i32 loc(#loc35)
    %125 = llvm.add %69, %6 : i32 loc(#loc35)
    %126 = llvm.mul %124, %arg3 : i32 loc(#loc36)
    %127 = llvm.mul %125, %arg3 : i32 loc(#loc36)
    %128 = llvm.add %126, %71 : i32 loc(#loc37)
    %129 = llvm.add %127, %71 : i32 loc(#loc37)
    %130 = llvm.add %128, %arg4 : i32 loc(#loc38)
    %131 = llvm.add %129, %arg4 : i32 loc(#loc38)
    %132 = llvm.getelementptr %arg0[%130] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc39)
    %133 = llvm.getelementptr %arg0[%131] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc39)
    %134 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %132, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc40)
    %135 = llvm.bitcast %134 : i16 to vector<1xf16> loc(#loc40)
    %136 = llvm.extractelement %135[%4 : i32] : vector<1xf16> loc(#loc40)
    %137 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %133, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc40)
    %138 = llvm.bitcast %137 : i16 to vector<1xf16> loc(#loc40)
    %139 = llvm.extractelement %138[%4 : i32] : vector<1xf16> loc(#loc40)
    %140 = llvm.fadd %122, %136  : f16 loc(#loc41)
    %141 = llvm.fadd %123, %139  : f16 loc(#loc41)
    %142 = llvm.add %68, %7 : i32 loc(#loc42)
    %143 = llvm.add %69, %7 : i32 loc(#loc42)
    %144 = llvm.mul %142, %arg3 : i32 loc(#loc43)
    %145 = llvm.mul %143, %arg3 : i32 loc(#loc43)
    %146 = llvm.add %144, %71 : i32 loc(#loc44)
    %147 = llvm.add %145, %71 : i32 loc(#loc44)
    %148 = llvm.add %146, %arg4 : i32 loc(#loc45)
    %149 = llvm.add %147, %arg4 : i32 loc(#loc45)
    %150 = llvm.getelementptr %arg0[%148] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc46)
    %151 = llvm.getelementptr %arg0[%149] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc46)
    %152 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %150, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc47)
    %153 = llvm.bitcast %152 : i16 to vector<1xf16> loc(#loc47)
    %154 = llvm.extractelement %153[%4 : i32] : vector<1xf16> loc(#loc47)
    %155 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %151, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc47)
    %156 = llvm.bitcast %155 : i16 to vector<1xf16> loc(#loc47)
    %157 = llvm.extractelement %156[%4 : i32] : vector<1xf16> loc(#loc47)
    %158 = llvm.fadd %140, %154  : f16 loc(#loc48)
    %159 = llvm.fadd %141, %157  : f16 loc(#loc48)
    %160 = llvm.add %68, %arg4 : i32 loc(#loc49)
    %161 = llvm.add %69, %arg4 : i32 loc(#loc49)
    %162 = llvm.mul %160, %arg3 : i32 loc(#loc50)
    %163 = llvm.mul %161, %arg3 : i32 loc(#loc50)
    %164 = llvm.add %162, %71 : i32 loc(#loc51)
    %165 = llvm.add %163, %71 : i32 loc(#loc51)
    %166 = llvm.getelementptr %arg0[%164] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc52)
    %167 = llvm.getelementptr %arg0[%165] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc52)
    %168 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %166, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc53)
    %169 = llvm.bitcast %168 : i16 to vector<1xf16> loc(#loc53)
    %170 = llvm.extractelement %169[%4 : i32] : vector<1xf16> loc(#loc53)
    %171 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %167, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc53)
    %172 = llvm.bitcast %171 : i16 to vector<1xf16> loc(#loc53)
    %173 = llvm.extractelement %172[%4 : i32] : vector<1xf16> loc(#loc53)
    %174 = llvm.fadd %158, %170  : f16 loc(#loc54)
    %175 = llvm.fadd %159, %173  : f16 loc(#loc54)
    %176 = llvm.add %164, %5 : i32 loc(#loc55)
    %177 = llvm.add %165, %5 : i32 loc(#loc55)
    %178 = llvm.getelementptr %arg0[%176] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc56)
    %179 = llvm.getelementptr %arg0[%177] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc56)
    %180 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %178, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc57)
    %181 = llvm.bitcast %180 : i16 to vector<1xf16> loc(#loc57)
    %182 = llvm.extractelement %181[%4 : i32] : vector<1xf16> loc(#loc57)
    %183 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %179, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc57)
    %184 = llvm.bitcast %183 : i16 to vector<1xf16> loc(#loc57)
    %185 = llvm.extractelement %184[%4 : i32] : vector<1xf16> loc(#loc57)
    %186 = llvm.fadd %174, %182  : f16 loc(#loc58)
    %187 = llvm.fadd %175, %185  : f16 loc(#loc58)
    %188 = llvm.add %164, %6 : i32 loc(#loc59)
    %189 = llvm.add %165, %6 : i32 loc(#loc59)
    %190 = llvm.getelementptr %arg0[%188] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc60)
    %191 = llvm.getelementptr %arg0[%189] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc60)
    %192 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %190, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc61)
    %193 = llvm.bitcast %192 : i16 to vector<1xf16> loc(#loc61)
    %194 = llvm.extractelement %193[%4 : i32] : vector<1xf16> loc(#loc61)
    %195 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %191, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc61)
    %196 = llvm.bitcast %195 : i16 to vector<1xf16> loc(#loc61)
    %197 = llvm.extractelement %196[%4 : i32] : vector<1xf16> loc(#loc61)
    %198 = llvm.fadd %186, %194  : f16 loc(#loc62)
    %199 = llvm.fadd %187, %197  : f16 loc(#loc62)
    %200 = llvm.add %164, %7 : i32 loc(#loc63)
    %201 = llvm.add %165, %7 : i32 loc(#loc63)
    %202 = llvm.getelementptr %arg0[%200] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc64)
    %203 = llvm.getelementptr %arg0[%201] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc64)
    %204 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %202, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc65)
    %205 = llvm.bitcast %204 : i16 to vector<1xf16> loc(#loc65)
    %206 = llvm.extractelement %205[%4 : i32] : vector<1xf16> loc(#loc65)
    %207 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %203, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc65)
    %208 = llvm.bitcast %207 : i16 to vector<1xf16> loc(#loc65)
    %209 = llvm.extractelement %208[%4 : i32] : vector<1xf16> loc(#loc65)
    %210 = llvm.fadd %198, %206  : f16 loc(#loc66)
    %211 = llvm.fadd %199, %209  : f16 loc(#loc66)
    %212 = llvm.add %164, %arg4 : i32 loc(#loc67)
    %213 = llvm.add %165, %arg4 : i32 loc(#loc67)
    %214 = llvm.getelementptr %arg1[%212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc68)
    %215 = llvm.getelementptr %arg1[%213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc68)
    %216 = llvm.mlir.undef : vector<1xf16> loc(#loc69)
    %217 = llvm.insertelement %210, %216[%2 : i32] : vector<1xf16> loc(#loc69)
    %218 = llvm.bitcast %217 : vector<1xf16> to i16 loc(#loc69)
    %219 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b" %218, %214, %0 : (i16, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc69)
    %220 = llvm.mlir.undef : vector<1xf16> loc(#loc69)
    %221 = llvm.insertelement %211, %220[%2 : i32] : vector<1xf16> loc(#loc69)
    %222 = llvm.bitcast %221 : vector<1xf16> to i16 loc(#loc69)
    %223 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b" %222, %215, %0 : (i16, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc69)
    llvm.return loc(#loc70)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:36)
#loc16 = loc("2d9pt_naive.py":50:40)
#loc17 = loc("2d9pt_naive.py":50:56)
#loc18 = loc("2d9pt_naive.py":50:18)
#loc19 = loc("2d9pt_naive.py":51:21)
#loc20 = loc("2d9pt_naive.py":52:22)
#loc21 = loc("2d9pt_naive.py":54:37)
#loc22 = loc("2d9pt_naive.py":54:40)
#loc23 = loc("2d9pt_naive.py":54:44)
#loc24 = loc("2d9pt_naive.py":54:60)
#loc25 = loc("2d9pt_naive.py":54:18)
#loc26 = loc("2d9pt_naive.py":55:21)
#loc27 = loc("2d9pt_naive.py":56:22)
#loc28 = loc("2d9pt_naive.py":58:37)
#loc29 = loc("2d9pt_naive.py":58:40)
#loc30 = loc("2d9pt_naive.py":58:44)
#loc31 = loc("2d9pt_naive.py":58:60)
#loc32 = loc("2d9pt_naive.py":58:18)
#loc33 = loc("2d9pt_naive.py":59:21)
#loc34 = loc("2d9pt_naive.py":60:22)
#loc35 = loc("2d9pt_naive.py":62:37)
#loc36 = loc("2d9pt_naive.py":62:40)
#loc37 = loc("2d9pt_naive.py":62:44)
#loc38 = loc("2d9pt_naive.py":62:60)
#loc39 = loc("2d9pt_naive.py":62:18)
#loc40 = loc("2d9pt_naive.py":63:21)
#loc41 = loc("2d9pt_naive.py":64:22)
#loc42 = loc("2d9pt_naive.py":66:37)
#loc43 = loc("2d9pt_naive.py":66:40)
#loc44 = loc("2d9pt_naive.py":66:44)
#loc45 = loc("2d9pt_naive.py":66:60)
#loc46 = loc("2d9pt_naive.py":66:18)
#loc47 = loc("2d9pt_naive.py":67:21)
#loc48 = loc("2d9pt_naive.py":68:22)
#loc49 = loc("2d9pt_naive.py":71:37)
#loc50 = loc("2d9pt_naive.py":71:40)
#loc51 = loc("2d9pt_naive.py":71:44)
#loc52 = loc("2d9pt_naive.py":71:18)
#loc53 = loc("2d9pt_naive.py":72:21)
#loc54 = loc("2d9pt_naive.py":73:22)
#loc55 = loc("2d9pt_naive.py":75:62)
#loc56 = loc("2d9pt_naive.py":75:18)
#loc57 = loc("2d9pt_naive.py":76:21)
#loc58 = loc("2d9pt_naive.py":77:22)
#loc59 = loc("2d9pt_naive.py":79:62)
#loc60 = loc("2d9pt_naive.py":79:18)
#loc61 = loc("2d9pt_naive.py":80:21)
#loc62 = loc("2d9pt_naive.py":81:22)
#loc63 = loc("2d9pt_naive.py":83:62)
#loc64 = loc("2d9pt_naive.py":83:18)
#loc65 = loc("2d9pt_naive.py":84:21)
#loc66 = loc("2d9pt_naive.py":85:22)
#loc67 = loc("2d9pt_naive.py":87:60)
#loc68 = loc("2d9pt_naive.py":87:18)
#loc69 = loc("2d9pt_naive.py":88:21)
#loc70 = loc("2d9pt_naive.py":88:4)
#loc71 = loc(callsite(#loc5 at #loc6))
#loc72 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.shared = 0 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @stencil_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.maxntid = array<i32: 128>} {
    %0 = llvm.mlir.constant(true) : i1 loc(#loc1)
    %1 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(15 : i32) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(0.000000e+00 : f16) : f16 loc(#loc1)
    %10 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %11 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %12 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc2)
    %13 = llvm.mul %arg4, %11 : i32 loc(#loc3)
    %14 = llvm.sub %arg2, %13 : i32 loc(#loc4)
    %15 = llvm.add %14, %8 : i32 loc(#loc71)
    %16 = llvm.sdiv %15, %10  : i32 loc(#loc72)
    %17 = llvm.sdiv %12, %16  : i32 loc(#loc8)
    %18 = llvm.srem %12, %16  : i32 loc(#loc9)
    %19 = llvm.mul %17, %10 : i32 loc(#loc10)
    %20 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc11)
    %21 = llvm.urem %20, %3  : i32 loc(#loc11)
    %22 = llvm.udiv %20, %3  : i32 loc(#loc11)
    %23 = llvm.and %21, %10  : i32 loc(#loc11)
    %24 = llvm.icmp "eq" %23, %2 : i32 loc(#loc11)
    %25 = llvm.select %24, %2, %5 : i1, i32 loc(#loc11)
    %26 = llvm.xor %2, %25  : i32 loc(#loc11)
    %27 = llvm.and %22, %5  : i32 loc(#loc11)
    %28 = llvm.icmp "eq" %27, %2 : i32 loc(#loc11)
    %29 = llvm.select %28, %2, %11 : i1, i32 loc(#loc11)
    %30 = llvm.xor %26, %29  : i32 loc(#loc11)
    %31 = llvm.and %22, %11  : i32 loc(#loc11)
    %32 = llvm.icmp "eq" %31, %2 : i32 loc(#loc11)
    %33 = llvm.select %32, %2, %7 : i1, i32 loc(#loc11)
    %34 = llvm.xor %30, %33  : i32 loc(#loc11)
    %35 = llvm.xor %1, %25  : i32 loc(#loc11)
    %36 = llvm.xor %35, %29  : i32 loc(#loc11)
    %37 = llvm.xor %36, %33  : i32 loc(#loc11)
    %38 = llvm.add %34, %4 : i32 loc(#loc11)
    %39 = llvm.add %37, %4 : i32 loc(#loc11)
    %40 = llvm.and %21, %5  : i32 loc(#loc11)
    %41 = llvm.icmp "eq" %40, %2 : i32 loc(#loc11)
    %42 = llvm.select %41, %2, %5 : i1, i32 loc(#loc11)
    %43 = llvm.xor %2, %42  : i32 loc(#loc11)
    %44 = llvm.and %21, %11  : i32 loc(#loc11)
    %45 = llvm.icmp "eq" %44, %2 : i32 loc(#loc11)
    %46 = llvm.select %45, %2, %11 : i1, i32 loc(#loc11)
    %47 = llvm.xor %43, %46  : i32 loc(#loc11)
    %48 = llvm.and %21, %7  : i32 loc(#loc11)
    %49 = llvm.icmp "eq" %48, %2 : i32 loc(#loc11)
    %50 = llvm.select %49, %2, %7 : i1, i32 loc(#loc11)
    %51 = llvm.xor %47, %50  : i32 loc(#loc11)
    %52 = llvm.and %21, %1  : i32 loc(#loc11)
    %53 = llvm.icmp "eq" %52, %2 : i32 loc(#loc11)
    %54 = llvm.select %53, %2, %1 : i1, i32 loc(#loc11)
    %55 = llvm.xor %51, %54  : i32 loc(#loc11)
    %56 = llvm.add %55, %4 : i32 loc(#loc11)
    %57 = llvm.add %19, %38 : i32 loc(#loc12)
    %58 = llvm.add %19, %39 : i32 loc(#loc12)
    %59 = llvm.mul %18, %10 : i32 loc(#loc13)
    %60 = llvm.add %59, %56 : i32 loc(#loc14)
    %61 = llvm.mul %57, %arg3 : i32 loc(#loc15)
    %62 = llvm.mul %58, %arg3 : i32 loc(#loc15)
    %63 = llvm.add %61, %60 : i32 loc(#loc16)
    %64 = llvm.add %62, %60 : i32 loc(#loc16)
    %65 = llvm.add %63, %arg4 : i32 loc(#loc17)
    %66 = llvm.add %64, %arg4 : i32 loc(#loc17)
    %67 = llvm.getelementptr %arg0[%65] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc18)
    %68 = llvm.getelementptr %arg0[%66] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc18)
    %69 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %67, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc19)
    %70 = llvm.bitcast %69 : i16 to vector<1xf16> loc(#loc19)
    %71 = llvm.extractelement %70[%4 : i32] : vector<1xf16> loc(#loc19)
    %72 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %68, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc19)
    %73 = llvm.bitcast %72 : i16 to vector<1xf16> loc(#loc19)
    %74 = llvm.extractelement %73[%4 : i32] : vector<1xf16> loc(#loc19)
    %75 = llvm.fadd %71, %9  : f16 loc(#loc20)
    %76 = llvm.fadd %74, %9  : f16 loc(#loc20)
    %77 = llvm.add %57, %5 : i32 loc(#loc21)
    %78 = llvm.add %58, %5 : i32 loc(#loc21)
    %79 = llvm.mul %77, %arg3 : i32 loc(#loc22)
    %80 = llvm.mul %78, %arg3 : i32 loc(#loc22)
    %81 = llvm.add %79, %60 : i32 loc(#loc23)
    %82 = llvm.add %80, %60 : i32 loc(#loc23)
    %83 = llvm.add %81, %arg4 : i32 loc(#loc24)
    %84 = llvm.add %82, %arg4 : i32 loc(#loc24)
    %85 = llvm.getelementptr %arg0[%83] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc25)
    %86 = llvm.getelementptr %arg0[%84] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc25)
    %87 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %85, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc26)
    %88 = llvm.bitcast %87 : i16 to vector<1xf16> loc(#loc26)
    %89 = llvm.extractelement %88[%4 : i32] : vector<1xf16> loc(#loc26)
    %90 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %86, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc26)
    %91 = llvm.bitcast %90 : i16 to vector<1xf16> loc(#loc26)
    %92 = llvm.extractelement %91[%4 : i32] : vector<1xf16> loc(#loc26)
    %93 = llvm.fadd %75, %89  : f16 loc(#loc27)
    %94 = llvm.fadd %76, %92  : f16 loc(#loc27)
    %95 = llvm.add %57, %11 : i32 loc(#loc28)
    %96 = llvm.add %58, %11 : i32 loc(#loc28)
    %97 = llvm.mul %95, %arg3 : i32 loc(#loc29)
    %98 = llvm.mul %96, %arg3 : i32 loc(#loc29)
    %99 = llvm.add %97, %60 : i32 loc(#loc30)
    %100 = llvm.add %98, %60 : i32 loc(#loc30)
    %101 = llvm.add %99, %arg4 : i32 loc(#loc31)
    %102 = llvm.add %100, %arg4 : i32 loc(#loc31)
    %103 = llvm.getelementptr %arg0[%101] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc32)
    %104 = llvm.getelementptr %arg0[%102] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc32)
    %105 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %103, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc33)
    %106 = llvm.bitcast %105 : i16 to vector<1xf16> loc(#loc33)
    %107 = llvm.extractelement %106[%4 : i32] : vector<1xf16> loc(#loc33)
    %108 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %104, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc33)
    %109 = llvm.bitcast %108 : i16 to vector<1xf16> loc(#loc33)
    %110 = llvm.extractelement %109[%4 : i32] : vector<1xf16> loc(#loc33)
    %111 = llvm.fadd %93, %107  : f16 loc(#loc34)
    %112 = llvm.fadd %94, %110  : f16 loc(#loc34)
    %113 = llvm.add %57, %6 : i32 loc(#loc35)
    %114 = llvm.add %58, %6 : i32 loc(#loc35)
    %115 = llvm.mul %113, %arg3 : i32 loc(#loc36)
    %116 = llvm.mul %114, %arg3 : i32 loc(#loc36)
    %117 = llvm.add %115, %60 : i32 loc(#loc37)
    %118 = llvm.add %116, %60 : i32 loc(#loc37)
    %119 = llvm.add %117, %arg4 : i32 loc(#loc38)
    %120 = llvm.add %118, %arg4 : i32 loc(#loc38)
    %121 = llvm.getelementptr %arg0[%119] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc39)
    %122 = llvm.getelementptr %arg0[%120] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc39)
    %123 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %121, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc40)
    %124 = llvm.bitcast %123 : i16 to vector<1xf16> loc(#loc40)
    %125 = llvm.extractelement %124[%4 : i32] : vector<1xf16> loc(#loc40)
    %126 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %122, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc40)
    %127 = llvm.bitcast %126 : i16 to vector<1xf16> loc(#loc40)
    %128 = llvm.extractelement %127[%4 : i32] : vector<1xf16> loc(#loc40)
    %129 = llvm.fadd %111, %125  : f16 loc(#loc41)
    %130 = llvm.fadd %112, %128  : f16 loc(#loc41)
    %131 = llvm.add %57, %7 : i32 loc(#loc42)
    %132 = llvm.add %58, %7 : i32 loc(#loc42)
    %133 = llvm.mul %131, %arg3 : i32 loc(#loc43)
    %134 = llvm.mul %132, %arg3 : i32 loc(#loc43)
    %135 = llvm.add %133, %60 : i32 loc(#loc44)
    %136 = llvm.add %134, %60 : i32 loc(#loc44)
    %137 = llvm.add %135, %arg4 : i32 loc(#loc45)
    %138 = llvm.add %136, %arg4 : i32 loc(#loc45)
    %139 = llvm.getelementptr %arg0[%137] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc46)
    %140 = llvm.getelementptr %arg0[%138] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc46)
    %141 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %139, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc47)
    %142 = llvm.bitcast %141 : i16 to vector<1xf16> loc(#loc47)
    %143 = llvm.extractelement %142[%4 : i32] : vector<1xf16> loc(#loc47)
    %144 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %140, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc47)
    %145 = llvm.bitcast %144 : i16 to vector<1xf16> loc(#loc47)
    %146 = llvm.extractelement %145[%4 : i32] : vector<1xf16> loc(#loc47)
    %147 = llvm.fadd %129, %143  : f16 loc(#loc48)
    %148 = llvm.fadd %130, %146  : f16 loc(#loc48)
    %149 = llvm.add %57, %arg4 : i32 loc(#loc49)
    %150 = llvm.add %58, %arg4 : i32 loc(#loc49)
    %151 = llvm.mul %149, %arg3 : i32 loc(#loc50)
    %152 = llvm.mul %150, %arg3 : i32 loc(#loc50)
    %153 = llvm.add %151, %60 : i32 loc(#loc51)
    %154 = llvm.add %152, %60 : i32 loc(#loc51)
    %155 = llvm.getelementptr %arg0[%153] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc52)
    %156 = llvm.getelementptr %arg0[%154] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc52)
    %157 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %155, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc53)
    %158 = llvm.bitcast %157 : i16 to vector<1xf16> loc(#loc53)
    %159 = llvm.extractelement %158[%4 : i32] : vector<1xf16> loc(#loc53)
    %160 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %156, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc53)
    %161 = llvm.bitcast %160 : i16 to vector<1xf16> loc(#loc53)
    %162 = llvm.extractelement %161[%4 : i32] : vector<1xf16> loc(#loc53)
    %163 = llvm.fadd %147, %159  : f16 loc(#loc54)
    %164 = llvm.fadd %148, %162  : f16 loc(#loc54)
    %165 = llvm.add %153, %5 : i32 loc(#loc55)
    %166 = llvm.add %154, %5 : i32 loc(#loc55)
    %167 = llvm.getelementptr %arg0[%165] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc56)
    %168 = llvm.getelementptr %arg0[%166] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc56)
    %169 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %167, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc57)
    %170 = llvm.bitcast %169 : i16 to vector<1xf16> loc(#loc57)
    %171 = llvm.extractelement %170[%4 : i32] : vector<1xf16> loc(#loc57)
    %172 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %168, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc57)
    %173 = llvm.bitcast %172 : i16 to vector<1xf16> loc(#loc57)
    %174 = llvm.extractelement %173[%4 : i32] : vector<1xf16> loc(#loc57)
    %175 = llvm.fadd %163, %171  : f16 loc(#loc58)
    %176 = llvm.fadd %164, %174  : f16 loc(#loc58)
    %177 = llvm.add %153, %6 : i32 loc(#loc59)
    %178 = llvm.add %154, %6 : i32 loc(#loc59)
    %179 = llvm.getelementptr %arg0[%177] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc60)
    %180 = llvm.getelementptr %arg0[%178] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc60)
    %181 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %179, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc61)
    %182 = llvm.bitcast %181 : i16 to vector<1xf16> loc(#loc61)
    %183 = llvm.extractelement %182[%4 : i32] : vector<1xf16> loc(#loc61)
    %184 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %180, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc61)
    %185 = llvm.bitcast %184 : i16 to vector<1xf16> loc(#loc61)
    %186 = llvm.extractelement %185[%4 : i32] : vector<1xf16> loc(#loc61)
    %187 = llvm.fadd %175, %183  : f16 loc(#loc62)
    %188 = llvm.fadd %176, %186  : f16 loc(#loc62)
    %189 = llvm.add %153, %7 : i32 loc(#loc63)
    %190 = llvm.add %154, %7 : i32 loc(#loc63)
    %191 = llvm.getelementptr %arg0[%189] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc64)
    %192 = llvm.getelementptr %arg0[%190] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc64)
    %193 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %191, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc65)
    %194 = llvm.bitcast %193 : i16 to vector<1xf16> loc(#loc65)
    %195 = llvm.extractelement %194[%4 : i32] : vector<1xf16> loc(#loc65)
    %196 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %192, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc65)
    %197 = llvm.bitcast %196 : i16 to vector<1xf16> loc(#loc65)
    %198 = llvm.extractelement %197[%4 : i32] : vector<1xf16> loc(#loc65)
    %199 = llvm.fadd %187, %195  : f16 loc(#loc66)
    %200 = llvm.fadd %188, %198  : f16 loc(#loc66)
    %201 = llvm.add %153, %arg4 : i32 loc(#loc67)
    %202 = llvm.add %154, %arg4 : i32 loc(#loc67)
    %203 = llvm.getelementptr %arg1[%201] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc68)
    %204 = llvm.getelementptr %arg1[%202] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc68)
    %205 = llvm.mlir.undef : vector<1xf16> loc(#loc69)
    %206 = llvm.insertelement %199, %205[%2 : i32] : vector<1xf16> loc(#loc69)
    %207 = llvm.bitcast %206 : vector<1xf16> to i16 loc(#loc69)
    %208 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b" %207, %203, %0 : (i16, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc69)
    %209 = llvm.insertelement %200, %205[%2 : i32] : vector<1xf16> loc(#loc69)
    %210 = llvm.bitcast %209 : vector<1xf16> to i16 loc(#loc69)
    %211 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b" %210, %204, %0 : (i16, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc69)
    llvm.return loc(#loc70)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:36)
#loc16 = loc("2d9pt_naive.py":50:40)
#loc17 = loc("2d9pt_naive.py":50:56)
#loc18 = loc("2d9pt_naive.py":50:18)
#loc19 = loc("2d9pt_naive.py":51:21)
#loc20 = loc("2d9pt_naive.py":52:22)
#loc21 = loc("2d9pt_naive.py":54:37)
#loc22 = loc("2d9pt_naive.py":54:40)
#loc23 = loc("2d9pt_naive.py":54:44)
#loc24 = loc("2d9pt_naive.py":54:60)
#loc25 = loc("2d9pt_naive.py":54:18)
#loc26 = loc("2d9pt_naive.py":55:21)
#loc27 = loc("2d9pt_naive.py":56:22)
#loc28 = loc("2d9pt_naive.py":58:37)
#loc29 = loc("2d9pt_naive.py":58:40)
#loc30 = loc("2d9pt_naive.py":58:44)
#loc31 = loc("2d9pt_naive.py":58:60)
#loc32 = loc("2d9pt_naive.py":58:18)
#loc33 = loc("2d9pt_naive.py":59:21)
#loc34 = loc("2d9pt_naive.py":60:22)
#loc35 = loc("2d9pt_naive.py":62:37)
#loc36 = loc("2d9pt_naive.py":62:40)
#loc37 = loc("2d9pt_naive.py":62:44)
#loc38 = loc("2d9pt_naive.py":62:60)
#loc39 = loc("2d9pt_naive.py":62:18)
#loc40 = loc("2d9pt_naive.py":63:21)
#loc41 = loc("2d9pt_naive.py":64:22)
#loc42 = loc("2d9pt_naive.py":66:37)
#loc43 = loc("2d9pt_naive.py":66:40)
#loc44 = loc("2d9pt_naive.py":66:44)
#loc45 = loc("2d9pt_naive.py":66:60)
#loc46 = loc("2d9pt_naive.py":66:18)
#loc47 = loc("2d9pt_naive.py":67:21)
#loc48 = loc("2d9pt_naive.py":68:22)
#loc49 = loc("2d9pt_naive.py":71:37)
#loc50 = loc("2d9pt_naive.py":71:40)
#loc51 = loc("2d9pt_naive.py":71:44)
#loc52 = loc("2d9pt_naive.py":71:18)
#loc53 = loc("2d9pt_naive.py":72:21)
#loc54 = loc("2d9pt_naive.py":73:22)
#loc55 = loc("2d9pt_naive.py":75:62)
#loc56 = loc("2d9pt_naive.py":75:18)
#loc57 = loc("2d9pt_naive.py":76:21)
#loc58 = loc("2d9pt_naive.py":77:22)
#loc59 = loc("2d9pt_naive.py":79:62)
#loc60 = loc("2d9pt_naive.py":79:18)
#loc61 = loc("2d9pt_naive.py":80:21)
#loc62 = loc("2d9pt_naive.py":81:22)
#loc63 = loc("2d9pt_naive.py":83:62)
#loc64 = loc("2d9pt_naive.py":83:18)
#loc65 = loc("2d9pt_naive.py":84:21)
#loc66 = loc("2d9pt_naive.py":85:22)
#loc67 = loc("2d9pt_naive.py":87:60)
#loc68 = loc("2d9pt_naive.py":87:18)
#loc69 = loc("2d9pt_naive.py":88:21)
#loc70 = loc("2d9pt_naive.py":88:4)
#loc71 = loc(callsite(#loc5 at #loc6))
#loc72 = loc(callsite(#loc7 at #loc6))


// -----// IR Dump Before LLVMDIScope (enable-line-info) ('builtin.module' operation) //----- //
#loc = loc("2d9pt_naive.py":18:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.shared = 0 : i32, triton_gpu.target = "cuda:70", "triton_gpu.threads-per-warp" = 32 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @stencil_kernel(%arg0: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg1: !llvm.ptr<1> {tt.divisibility = 16 : i32} loc("2d9pt_naive.py":18:0), %arg2: i32 loc("2d9pt_naive.py":18:0), %arg3: i32 loc("2d9pt_naive.py":18:0), %arg4: i32 loc("2d9pt_naive.py":18:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.maxntid = array<i32: 128>} {
    %0 = llvm.mlir.constant(true) : i1 loc(#loc1)
    %1 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %3 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %4 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %5 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %6 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %7 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %8 = llvm.mlir.constant(15 : i32) : i32 loc(#loc1)
    %9 = llvm.mlir.constant(0.000000e+00 : f16) : f16 loc(#loc1)
    %10 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %11 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %12 = llvm.inline_asm asm_dialect = att operand_attrs = [] "mov.u32 $0, %ctaid.x;", "=r"  : () -> i32 loc(#loc2)
    %13 = llvm.mul %arg4, %11 : i32 loc(#loc3)
    %14 = llvm.sub %arg2, %13 : i32 loc(#loc4)
    %15 = llvm.add %14, %8 : i32 loc(#loc71)
    %16 = llvm.sdiv %15, %10  : i32 loc(#loc72)
    %17 = llvm.sdiv %12, %16  : i32 loc(#loc8)
    %18 = llvm.srem %12, %16  : i32 loc(#loc9)
    %19 = llvm.mul %17, %10 : i32 loc(#loc10)
    %20 = nvvm.read.ptx.sreg.tid.x : i32 loc(#loc11)
    %21 = llvm.urem %20, %3  : i32 loc(#loc11)
    %22 = llvm.udiv %20, %3  : i32 loc(#loc11)
    %23 = llvm.and %21, %10  : i32 loc(#loc11)
    %24 = llvm.icmp "eq" %23, %2 : i32 loc(#loc11)
    %25 = llvm.select %24, %2, %5 : i1, i32 loc(#loc11)
    %26 = llvm.xor %2, %25  : i32 loc(#loc11)
    %27 = llvm.and %22, %5  : i32 loc(#loc11)
    %28 = llvm.icmp "eq" %27, %2 : i32 loc(#loc11)
    %29 = llvm.select %28, %2, %11 : i1, i32 loc(#loc11)
    %30 = llvm.xor %26, %29  : i32 loc(#loc11)
    %31 = llvm.and %22, %11  : i32 loc(#loc11)
    %32 = llvm.icmp "eq" %31, %2 : i32 loc(#loc11)
    %33 = llvm.select %32, %2, %7 : i1, i32 loc(#loc11)
    %34 = llvm.xor %30, %33  : i32 loc(#loc11)
    %35 = llvm.xor %1, %25  : i32 loc(#loc11)
    %36 = llvm.xor %35, %29  : i32 loc(#loc11)
    %37 = llvm.xor %36, %33  : i32 loc(#loc11)
    %38 = llvm.add %34, %4 : i32 loc(#loc11)
    %39 = llvm.add %37, %4 : i32 loc(#loc11)
    %40 = llvm.and %21, %5  : i32 loc(#loc11)
    %41 = llvm.icmp "eq" %40, %2 : i32 loc(#loc11)
    %42 = llvm.select %41, %2, %5 : i1, i32 loc(#loc11)
    %43 = llvm.xor %2, %42  : i32 loc(#loc11)
    %44 = llvm.and %21, %11  : i32 loc(#loc11)
    %45 = llvm.icmp "eq" %44, %2 : i32 loc(#loc11)
    %46 = llvm.select %45, %2, %11 : i1, i32 loc(#loc11)
    %47 = llvm.xor %43, %46  : i32 loc(#loc11)
    %48 = llvm.and %21, %7  : i32 loc(#loc11)
    %49 = llvm.icmp "eq" %48, %2 : i32 loc(#loc11)
    %50 = llvm.select %49, %2, %7 : i1, i32 loc(#loc11)
    %51 = llvm.xor %47, %50  : i32 loc(#loc11)
    %52 = llvm.and %21, %1  : i32 loc(#loc11)
    %53 = llvm.icmp "eq" %52, %2 : i32 loc(#loc11)
    %54 = llvm.select %53, %2, %1 : i1, i32 loc(#loc11)
    %55 = llvm.xor %51, %54  : i32 loc(#loc11)
    %56 = llvm.add %55, %4 : i32 loc(#loc11)
    %57 = llvm.add %19, %38 : i32 loc(#loc12)
    %58 = llvm.add %19, %39 : i32 loc(#loc12)
    %59 = llvm.mul %18, %10 : i32 loc(#loc13)
    %60 = llvm.add %59, %56 : i32 loc(#loc14)
    %61 = llvm.mul %57, %arg3 : i32 loc(#loc15)
    %62 = llvm.mul %58, %arg3 : i32 loc(#loc15)
    %63 = llvm.add %61, %60 : i32 loc(#loc16)
    %64 = llvm.add %62, %60 : i32 loc(#loc16)
    %65 = llvm.add %63, %arg4 : i32 loc(#loc17)
    %66 = llvm.add %64, %arg4 : i32 loc(#loc17)
    %67 = llvm.getelementptr %arg0[%65] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc18)
    %68 = llvm.getelementptr %arg0[%66] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc18)
    %69 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %67, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc19)
    %70 = llvm.bitcast %69 : i16 to vector<1xf16> loc(#loc19)
    %71 = llvm.extractelement %70[%4 : i32] : vector<1xf16> loc(#loc19)
    %72 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %68, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc19)
    %73 = llvm.bitcast %72 : i16 to vector<1xf16> loc(#loc19)
    %74 = llvm.extractelement %73[%4 : i32] : vector<1xf16> loc(#loc19)
    %75 = llvm.fadd %71, %9  : f16 loc(#loc20)
    %76 = llvm.fadd %74, %9  : f16 loc(#loc20)
    %77 = llvm.add %57, %5 : i32 loc(#loc21)
    %78 = llvm.add %58, %5 : i32 loc(#loc21)
    %79 = llvm.mul %77, %arg3 : i32 loc(#loc22)
    %80 = llvm.mul %78, %arg3 : i32 loc(#loc22)
    %81 = llvm.add %79, %60 : i32 loc(#loc23)
    %82 = llvm.add %80, %60 : i32 loc(#loc23)
    %83 = llvm.add %81, %arg4 : i32 loc(#loc24)
    %84 = llvm.add %82, %arg4 : i32 loc(#loc24)
    %85 = llvm.getelementptr %arg0[%83] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc25)
    %86 = llvm.getelementptr %arg0[%84] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc25)
    %87 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %85, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc26)
    %88 = llvm.bitcast %87 : i16 to vector<1xf16> loc(#loc26)
    %89 = llvm.extractelement %88[%4 : i32] : vector<1xf16> loc(#loc26)
    %90 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %86, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc26)
    %91 = llvm.bitcast %90 : i16 to vector<1xf16> loc(#loc26)
    %92 = llvm.extractelement %91[%4 : i32] : vector<1xf16> loc(#loc26)
    %93 = llvm.fadd %75, %89  : f16 loc(#loc27)
    %94 = llvm.fadd %76, %92  : f16 loc(#loc27)
    %95 = llvm.add %57, %11 : i32 loc(#loc28)
    %96 = llvm.add %58, %11 : i32 loc(#loc28)
    %97 = llvm.mul %95, %arg3 : i32 loc(#loc29)
    %98 = llvm.mul %96, %arg3 : i32 loc(#loc29)
    %99 = llvm.add %97, %60 : i32 loc(#loc30)
    %100 = llvm.add %98, %60 : i32 loc(#loc30)
    %101 = llvm.add %99, %arg4 : i32 loc(#loc31)
    %102 = llvm.add %100, %arg4 : i32 loc(#loc31)
    %103 = llvm.getelementptr %arg0[%101] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc32)
    %104 = llvm.getelementptr %arg0[%102] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc32)
    %105 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %103, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc33)
    %106 = llvm.bitcast %105 : i16 to vector<1xf16> loc(#loc33)
    %107 = llvm.extractelement %106[%4 : i32] : vector<1xf16> loc(#loc33)
    %108 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %104, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc33)
    %109 = llvm.bitcast %108 : i16 to vector<1xf16> loc(#loc33)
    %110 = llvm.extractelement %109[%4 : i32] : vector<1xf16> loc(#loc33)
    %111 = llvm.fadd %93, %107  : f16 loc(#loc34)
    %112 = llvm.fadd %94, %110  : f16 loc(#loc34)
    %113 = llvm.add %57, %6 : i32 loc(#loc35)
    %114 = llvm.add %58, %6 : i32 loc(#loc35)
    %115 = llvm.mul %113, %arg3 : i32 loc(#loc36)
    %116 = llvm.mul %114, %arg3 : i32 loc(#loc36)
    %117 = llvm.add %115, %60 : i32 loc(#loc37)
    %118 = llvm.add %116, %60 : i32 loc(#loc37)
    %119 = llvm.add %117, %arg4 : i32 loc(#loc38)
    %120 = llvm.add %118, %arg4 : i32 loc(#loc38)
    %121 = llvm.getelementptr %arg0[%119] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc39)
    %122 = llvm.getelementptr %arg0[%120] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc39)
    %123 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %121, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc40)
    %124 = llvm.bitcast %123 : i16 to vector<1xf16> loc(#loc40)
    %125 = llvm.extractelement %124[%4 : i32] : vector<1xf16> loc(#loc40)
    %126 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %122, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc40)
    %127 = llvm.bitcast %126 : i16 to vector<1xf16> loc(#loc40)
    %128 = llvm.extractelement %127[%4 : i32] : vector<1xf16> loc(#loc40)
    %129 = llvm.fadd %111, %125  : f16 loc(#loc41)
    %130 = llvm.fadd %112, %128  : f16 loc(#loc41)
    %131 = llvm.add %57, %7 : i32 loc(#loc42)
    %132 = llvm.add %58, %7 : i32 loc(#loc42)
    %133 = llvm.mul %131, %arg3 : i32 loc(#loc43)
    %134 = llvm.mul %132, %arg3 : i32 loc(#loc43)
    %135 = llvm.add %133, %60 : i32 loc(#loc44)
    %136 = llvm.add %134, %60 : i32 loc(#loc44)
    %137 = llvm.add %135, %arg4 : i32 loc(#loc45)
    %138 = llvm.add %136, %arg4 : i32 loc(#loc45)
    %139 = llvm.getelementptr %arg0[%137] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc46)
    %140 = llvm.getelementptr %arg0[%138] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc46)
    %141 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %139, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc47)
    %142 = llvm.bitcast %141 : i16 to vector<1xf16> loc(#loc47)
    %143 = llvm.extractelement %142[%4 : i32] : vector<1xf16> loc(#loc47)
    %144 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %140, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc47)
    %145 = llvm.bitcast %144 : i16 to vector<1xf16> loc(#loc47)
    %146 = llvm.extractelement %145[%4 : i32] : vector<1xf16> loc(#loc47)
    %147 = llvm.fadd %129, %143  : f16 loc(#loc48)
    %148 = llvm.fadd %130, %146  : f16 loc(#loc48)
    %149 = llvm.add %57, %arg4 : i32 loc(#loc49)
    %150 = llvm.add %58, %arg4 : i32 loc(#loc49)
    %151 = llvm.mul %149, %arg3 : i32 loc(#loc50)
    %152 = llvm.mul %150, %arg3 : i32 loc(#loc50)
    %153 = llvm.add %151, %60 : i32 loc(#loc51)
    %154 = llvm.add %152, %60 : i32 loc(#loc51)
    %155 = llvm.getelementptr %arg0[%153] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc52)
    %156 = llvm.getelementptr %arg0[%154] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc52)
    %157 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %155, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc53)
    %158 = llvm.bitcast %157 : i16 to vector<1xf16> loc(#loc53)
    %159 = llvm.extractelement %158[%4 : i32] : vector<1xf16> loc(#loc53)
    %160 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %156, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc53)
    %161 = llvm.bitcast %160 : i16 to vector<1xf16> loc(#loc53)
    %162 = llvm.extractelement %161[%4 : i32] : vector<1xf16> loc(#loc53)
    %163 = llvm.fadd %147, %159  : f16 loc(#loc54)
    %164 = llvm.fadd %148, %162  : f16 loc(#loc54)
    %165 = llvm.add %153, %5 : i32 loc(#loc55)
    %166 = llvm.add %154, %5 : i32 loc(#loc55)
    %167 = llvm.getelementptr %arg0[%165] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc56)
    %168 = llvm.getelementptr %arg0[%166] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc56)
    %169 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %167, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc57)
    %170 = llvm.bitcast %169 : i16 to vector<1xf16> loc(#loc57)
    %171 = llvm.extractelement %170[%4 : i32] : vector<1xf16> loc(#loc57)
    %172 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %168, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc57)
    %173 = llvm.bitcast %172 : i16 to vector<1xf16> loc(#loc57)
    %174 = llvm.extractelement %173[%4 : i32] : vector<1xf16> loc(#loc57)
    %175 = llvm.fadd %163, %171  : f16 loc(#loc58)
    %176 = llvm.fadd %164, %174  : f16 loc(#loc58)
    %177 = llvm.add %153, %6 : i32 loc(#loc59)
    %178 = llvm.add %154, %6 : i32 loc(#loc59)
    %179 = llvm.getelementptr %arg0[%177] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc60)
    %180 = llvm.getelementptr %arg0[%178] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc60)
    %181 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %179, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc61)
    %182 = llvm.bitcast %181 : i16 to vector<1xf16> loc(#loc61)
    %183 = llvm.extractelement %182[%4 : i32] : vector<1xf16> loc(#loc61)
    %184 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %180, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc61)
    %185 = llvm.bitcast %184 : i16 to vector<1xf16> loc(#loc61)
    %186 = llvm.extractelement %185[%4 : i32] : vector<1xf16> loc(#loc61)
    %187 = llvm.fadd %175, %183  : f16 loc(#loc62)
    %188 = llvm.fadd %176, %186  : f16 loc(#loc62)
    %189 = llvm.add %153, %7 : i32 loc(#loc63)
    %190 = llvm.add %154, %7 : i32 loc(#loc63)
    %191 = llvm.getelementptr %arg0[%189] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc64)
    %192 = llvm.getelementptr %arg0[%190] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc64)
    %193 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %191, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc65)
    %194 = llvm.bitcast %193 : i16 to vector<1xf16> loc(#loc65)
    %195 = llvm.extractelement %194[%4 : i32] : vector<1xf16> loc(#loc65)
    %196 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b" %192, %0 : (!llvm.ptr<1>, i1) -> i16 loc(#loc65)
    %197 = llvm.bitcast %196 : i16 to vector<1xf16> loc(#loc65)
    %198 = llvm.extractelement %197[%4 : i32] : vector<1xf16> loc(#loc65)
    %199 = llvm.fadd %187, %195  : f16 loc(#loc66)
    %200 = llvm.fadd %188, %198  : f16 loc(#loc66)
    %201 = llvm.add %153, %arg4 : i32 loc(#loc67)
    %202 = llvm.add %154, %arg4 : i32 loc(#loc67)
    %203 = llvm.getelementptr %arg1[%201] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc68)
    %204 = llvm.getelementptr %arg1[%202] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, f16 loc(#loc68)
    %205 = llvm.mlir.undef : vector<1xf16> loc(#loc69)
    %206 = llvm.insertelement %199, %205[%2 : i32] : vector<1xf16> loc(#loc69)
    %207 = llvm.bitcast %206 : vector<1xf16> to i16 loc(#loc69)
    %208 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b" %207, %203, %0 : (i16, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc69)
    %209 = llvm.insertelement %200, %205[%2 : i32] : vector<1xf16> loc(#loc69)
    %210 = llvm.bitcast %209 : vector<1xf16> to i16 loc(#loc69)
    %211 = llvm.inline_asm has_side_effects asm_dialect = att operand_attrs = [] "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b" %210, %204, %0 : (i16, !llvm.ptr<1>, i1) -> !llvm.void loc(#loc69)
    llvm.return loc(#loc70)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("2d9pt_naive.py":30:10)
#loc3 = loc("2d9pt_naive.py":31:28)
#loc4 = loc("2d9pt_naive.py":31:26)
#loc5 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:22)
#loc6 = loc("2d9pt_naive.py":31:31)
#loc7 = loc("/usr/local/lib/python3.8/dist-packages/triton/language/standard.py":44:28)
#loc8 = loc("2d9pt_naive.py":34:19)
#loc9 = loc("2d9pt_naive.py":35:18)
#loc10 = loc("2d9pt_naive.py":39:22)
#loc11 = loc("2d9pt_naive.py":39:50)
#loc12 = loc("2d9pt_naive.py":39:37)
#loc13 = loc("2d9pt_naive.py":40:22)
#loc14 = loc("2d9pt_naive.py":40:37)
#loc15 = loc("2d9pt_naive.py":50:36)
#loc16 = loc("2d9pt_naive.py":50:40)
#loc17 = loc("2d9pt_naive.py":50:56)
#loc18 = loc("2d9pt_naive.py":50:18)
#loc19 = loc("2d9pt_naive.py":51:21)
#loc20 = loc("2d9pt_naive.py":52:22)
#loc21 = loc("2d9pt_naive.py":54:37)
#loc22 = loc("2d9pt_naive.py":54:40)
#loc23 = loc("2d9pt_naive.py":54:44)
#loc24 = loc("2d9pt_naive.py":54:60)
#loc25 = loc("2d9pt_naive.py":54:18)
#loc26 = loc("2d9pt_naive.py":55:21)
#loc27 = loc("2d9pt_naive.py":56:22)
#loc28 = loc("2d9pt_naive.py":58:37)
#loc29 = loc("2d9pt_naive.py":58:40)
#loc30 = loc("2d9pt_naive.py":58:44)
#loc31 = loc("2d9pt_naive.py":58:60)
#loc32 = loc("2d9pt_naive.py":58:18)
#loc33 = loc("2d9pt_naive.py":59:21)
#loc34 = loc("2d9pt_naive.py":60:22)
#loc35 = loc("2d9pt_naive.py":62:37)
#loc36 = loc("2d9pt_naive.py":62:40)
#loc37 = loc("2d9pt_naive.py":62:44)
#loc38 = loc("2d9pt_naive.py":62:60)
#loc39 = loc("2d9pt_naive.py":62:18)
#loc40 = loc("2d9pt_naive.py":63:21)
#loc41 = loc("2d9pt_naive.py":64:22)
#loc42 = loc("2d9pt_naive.py":66:37)
#loc43 = loc("2d9pt_naive.py":66:40)
#loc44 = loc("2d9pt_naive.py":66:44)
#loc45 = loc("2d9pt_naive.py":66:60)
#loc46 = loc("2d9pt_naive.py":66:18)
#loc47 = loc("2d9pt_naive.py":67:21)
#loc48 = loc("2d9pt_naive.py":68:22)
#loc49 = loc("2d9pt_naive.py":71:37)
#loc50 = loc("2d9pt_naive.py":71:40)
#loc51 = loc("2d9pt_naive.py":71:44)
#loc52 = loc("2d9pt_naive.py":71:18)
#loc53 = loc("2d9pt_naive.py":72:21)
#loc54 = loc("2d9pt_naive.py":73:22)
#loc55 = loc("2d9pt_naive.py":75:62)
#loc56 = loc("2d9pt_naive.py":75:18)
#loc57 = loc("2d9pt_naive.py":76:21)
#loc58 = loc("2d9pt_naive.py":77:22)
#loc59 = loc("2d9pt_naive.py":79:62)
#loc60 = loc("2d9pt_naive.py":79:18)
#loc61 = loc("2d9pt_naive.py":80:21)
#loc62 = loc("2d9pt_naive.py":81:22)
#loc63 = loc("2d9pt_naive.py":83:62)
#loc64 = loc("2d9pt_naive.py":83:18)
#loc65 = loc("2d9pt_naive.py":84:21)
#loc66 = loc("2d9pt_naive.py":85:22)
#loc67 = loc("2d9pt_naive.py":87:60)
#loc68 = loc("2d9pt_naive.py":87:18)
#loc69 = loc("2d9pt_naive.py":88:21)
#loc70 = loc("2d9pt_naive.py":88:4)
#loc71 = loc(callsite(#loc5 at #loc6))
#loc72 = loc(callsite(#loc7 at #loc6))


0.008208000101149082
